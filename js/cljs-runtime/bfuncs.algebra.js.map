{"version":3,"sources":["bfuncs/algebra.cljs"],"mappings":"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","names":["bfuncs.algebra/first-if-singleton","x","bfuncs.utils/singleton?","cljs.core/first","bfuncs.algebra/echo-mma","cljs.core.println","cljs.core/prn-str-with-opts","var_args","G__67243","bfuncs.algebra/operator","js/Error","op","cljs.core.get","bfuncs.algebra/operators","simp","bfuncs.algebra/simplifying-operators","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","bfuncs.algebra/get-operators","seq67244","G__67245","cljs.core/next","self__4723__auto__","ops","cljs.core.mapv","bfuncs.algebra/operation?","cljs.core/set?","cljs.core/contains?","cljs.core._EQ_","bfuncs.data/operation","bfuncs.algebra/bsum?","bfuncs.algebra/bprod?","bfuncs.algebra/bxsum?","bfuncs.algebra/bxprod?","bfuncs.algebra/bxop?","bfuncs.algebra/bnot?","bfuncs.algebra/bvar?","bfuncs.algebra/_annihilator","G__67251","cljs.core/Keyword","bfuncs.algebra/_identity","G__67252","G__67254","bfuncs.algebra/valid-form?","spec","form","bfuncs.algebra.valid_form_QMARK_","cljs.core/>","cmp","init","parent-spec","child","temp__5733__auto__","child-spec","and__4115__auto__","cljs.core/every?","cljs.core.partial","go","bfuncs.algebra/sum-of-prods?","bfuncs.algebra/prod-of-sums?","bfuncs.algebra/anf?","bfuncs.algebra/get-vars","bobj","cljs.core.mapcat","bfuncs.algebra/get-vars-tr","cljs.core.into","cljs.core.map","G__67258","bfuncs.algebra/bfactor?","y","bfuncs.algebra.bfactor_QMARK_","f67266","p1__67255#","clojure.set/subset?","bfuncs.algebra/!","cljs.core/boolean?","bfuncs.data/bool-not","bfuncs.algebra/dual","G__67268","bfuncs.algebra/negation","G__67269","bfuncs.algebra/cancellation-fn","cancel?","or__4126__auto__","bfuncs.algebra/xconj","xcoll","id","nxc","cljs.core.disj","G__67270","cljs.core/count","cljs.core.conj","bfuncs.algebra/apply-reduction","rf","more","result","bfuncs.utils/reduce-from","temp__5737__auto__","vec__67273","cljs.core.nth","_","G__67272","cljs.core/name","cljs.core/re-matches","bfuncs.data/with-operation","cljs.core.keyword","G__67281","bfuncs.algebra/||","args-arr__4757__auto__","argseq__4758__auto__","seq67278","G__67279","G__67280","f67294","p1__67276#","cljs.core.reduce","bfuncs.data.bool_set","bfuncs.algebra._BAR__BAR_","G__67299","bfuncs.algebra/&&","seq67296","G__67297","G__67298","f67306","bfuncs.algebra._AMPERSAND__AMPERSAND_","G__67311","bfuncs.algebra/<+>","seq67308","G__67309","G__67310","bfuncs.algebra._LT__PLUS__GT_","bfuncs.algebra/reducing-!||","cljs.core/reduced","G__67322","bfuncs.algebra/!||","seq67319","G__67320","G__67321","bfuncs.algebra/reducing-!&&","G__67327","bfuncs.algebra/!&&","seq67324","G__67325","G__67326","G__67332","bfuncs.algebra/<*>","seq67329","G__67330","G__67331","bfuncs.algebra._LT__STAR__GT_","bfuncs.algebra/reducing-<=>","G__67343","bfuncs.algebra/<=>","seq67340","G__67341","G__67342","bfuncs.algebra/reducing-!<=>","G__67348","bfuncs.algebra/!<=>","seq67345","G__67346","G__67347","bfuncs.algebra/==>","bfuncs.data.bool_vec","bfuncs.algebra/!==>","bfuncs.algebra/<==","bfuncs.algebra/!<==","bfuncs.algebra/*cancellation-rules*","bfuncs.algebra/_sbconj","op'","cljs.core/some","cljs.core.some_fn","cljs.core/=","p1__67349#","p1__67350#","p1__67351#","cljs.core.remove","bfuncs.algebra/_sbnew","temp__5739__auto__","bfuncs.algebra/_soperate","f67358","G__67363","bfuncs.algebra/||*","seq67360","G__67361","G__67362","bfuncs.algebra._BAR__BAR__STAR_","G__67368","bfuncs.algebra/&&*","seq67365","G__67366","G__67367","bfuncs.algebra._AMPERSAND__AMPERSAND__STAR_","bfuncs.algebra/simplify","temp__27540__auto__","G__67369","cljs.core.apply","bfuncs.algebra/convert-xop","target-op","xop","fexpr__67372","vec__67373","f","g","bfuncs.algebra.get_operators","negate?","G__67376","cljs.core/even?","cljs.core/odd?","xs","cljs.core/rest","v","x'","cljs.core.map_indexed","i","col","G__67379","G__67380","p1__67370#","p1__67371#","cljs.core/rseq","bfuncs.algebra/expand-eq","input-op","||","bfuncs.algebra.operator","&&","G__67381","G__67382","G__67383","G__67384","bfuncs.utils.map_reduce","tail","cljs.core/seq","xs__27556__auto__","G__67392","G__67393","G__67394","G__67395","G__67396","G__67397","G__67398","G__67399","G__67400","G__67401","G__67409","G__67410","G__67411","G__67412","G__67413","G__67414","G__67415","bfuncs.algebra/expand-not","G__67416","bfuncs.algebra/normalize","G__67417","expanded","cljs.core/second","bfuncs.algebra/two-level-normalize","n1","bfuncs.algebra/distribute","o1","o2","f67428","p1__67418#","p1__67419#","p1__67420#","p1__67421#","bfuncs.algebra/expand-to","fexpr__67429","done?","pred__67430","expr__67431","bfuncs.algebra/->SOP","p__67435","map__67436","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","seq67433","G__67434","bfuncs.algebra/->POS","p__67440","map__67441","seq67438","G__67439","bfuncs.algebra/xor-with-true?","bfuncs.algebra/->ANF","G__67443","G__67444","G__67445","G__67446","G__67447","G__67448","G__67449","G__67450","G__67451","G__67452","G__67453","G__67454","G__67455","G__67456","cljs.core/constantly","cljs.core/identity","cljs.core.merge"],"sourcesContent":["(ns bfuncs.algebra\r\n  (:require [bfuncs.utils\r\n             :refer [map-reduce singleton? echo let-case bool-casep log reduce-from if-first echol]]\r\n            [clojure.set :as set]\r\n            [bfuncs.data :refer [bool-not bool-set bool-vec with-operation IBoolOp\r\n                                 operation replace-operands]]\r\n            [clojure.string :as str]))\r\n\r\n(defn- first-if-singleton [x] (if (singleton? x) (first x) x))\r\n;(declare | & b' b<+> b<*> sb* sb+)\r\n(declare operators simplifying-operators)\r\n\r\n(defn echo-mma [x]\r\n  (println (prn-str-with-opts [x] {:mathematica true}))\r\n  x)\r\n\r\n(defn operator\r\n  ([op] (get operators op))\r\n  ([op simp] (get (if simp simplifying-operators operators) op)))\r\n\r\n(defn- get-operators\r\n  [simp & ops]\r\n  (mapv (if simp simplifying-operators operators) ops))\r\n\r\n(defn operation? [op x]\r\n  (if (set? op)\r\n    (contains? op x)\r\n    (= op (operation x))))\r\n\r\n(defn bsum? \"Returns true if (operation x) is :OR\" [x] (= :OR (operation x)))\r\n\r\n(defn bprod? \"Returns true if (operation x) is :AND\" [x] (= :AND (operation x)))\r\n\r\n(defn bxsum? \"Returns true if (operation x) is :XOR\" [x] (= :XOR (operation x)))\r\n\r\n(defn bxprod? \"Returns true if (operation x) is :XNOR\" [x] (= :XNOR (operation x)))\r\n\r\n(defn bxop? \"Returns true if (operation x) is :XOR or :XNOR\" [x] (contains? #{:XOR :XNOR} (operation x)))\r\n\r\n(defn bnot? \"Returns true if (operation x) is :NOT\" [x] (= :NOT (operation x)))\r\n\r\n(defn bvar? \"Returns true if (operation x) is nil\" [x] (nil? (operation x)))\r\n\r\n(defn- _annihilator\r\n  [op]\r\n  (case op\r\n    :OR true\r\n    :AND false))\r\n\r\n(defn- _identity\r\n  [op]\r\n  (case op\r\n    :OR false\r\n    :AND true))\r\n\r\n(defn- valid-form?\r\n  \"Returns true if the given form is valid w.r.t. the specification spec.\r\n\r\n  The form x is considered valid if either\r\n  1. (operation x) is nil, or\r\n  2. (spec (operation x)) is non-nil, and for all y in x,\r\n     (spec (operation y)) > (spec (operation x)), and y is valid.\r\n\r\n  When a comparison function cmp and initial value init are supplied, the second\r\n  condition is generalized\r\n  2. (spec (operation x)) is non-nil, and for all y in x, y is valid, and\r\n     (cmp (spec (operation y)) (spec (operation x))) is logical true.\r\n  With (cmp init (spec (operation form))) being the top-level comparison.\r\n\r\n  Ex:\r\n  (valid-form {:OR 1, :AND 2, :NOT 3} x)\r\n  ;; => true if x is a sum of products\r\n  (valid-form {:OR 2, :AND 1, :NOT 3} x)\r\n  ;; => true if x is a product of sums\r\n  (valid-form #{:OR :NOT} and true x)\r\n  ;; => true if x is an expression of only :OR and :NOT.\"\r\n  ([spec form] (valid-form? spec > ##-Inf form))\r\n  ([spec cmp init form]\r\n   ((fn go [parent-spec child]\r\n      (if-let [op (operation child)]\r\n        (if-let [child-spec (spec op)]\r\n          (and (cmp child-spec parent-spec)\r\n               (every? (partial go child-spec) child))\r\n          false)\r\n        true))\r\n    init form)))\r\n\r\n(defn sum-of-prods?\r\n  \"Returns true if x is a bobj representing a sum of products.\"\r\n  [x]\r\n  (valid-form? {:OR 1, :AND 2, :NOT 3} x))\r\n\r\n(defn prod-of-sums?\r\n  \"Returns true if x is a bobj representing a product of sums.\"\r\n  [x]\r\n  (valid-form? {:AND 1, :OR 2, :NOT 3} x))\r\n\r\n(defn anf?\r\n  \"Returns true if x is a bobj in algebraic normal form.\"\r\n  [x]\r\n  (valid-form? {:XOR 1, :AND 2} x))\r\n\r\n(defn get-vars\r\n  [bobj]\r\n  (if (bvar? bobj)\r\n    bobj\r\n    (mapcat get-vars bobj)))\r\n\r\n(defn get-vars-tr\r\n  [bobj]\r\n  (cond\r\n    (bvar? bobj) [bobj true]\r\n    (and (bnot? bobj)\r\n         (bvar? (first bobj))) [(first bobj) false]\r\n    :else (into {} (map get-vars-tr) bobj)))\r\n\r\n(defn bfactor?\r\n  \"Returns true if x is a factor of y with respect to the operation op\r\n  (default :AND).\"\r\n  ([x y] (bfactor? :AND x y))\r\n  ([op x y]\r\n   (bool-casep #(= op (operation %)) [x y]\r\n     [true true] (set/subset? x y)\r\n     [true false] false\r\n     [false true] (contains? y x)\r\n     [false false] (= x y))))\r\n\r\n(defn ! [x]\r\n  \"Gives a data structure representing the boolean negation of the input.\r\n  Automatically reduces according to the identities\r\n    true' = false,\r\n    false' = true,\r\n    A'' = A.\"\r\n  (cond\r\n    (boolean? x) (not x)\r\n    (bnot? x) (first x)\r\n    :else (bool-not x)))\r\n\r\n(defn- dual\r\n  [op]\r\n  (case op\r\n    :TRUE :FALSE\r\n    :FALSE :TRUE\r\n    :NOT :NOT\r\n    :ID :ID\r\n    :OR :AND,\r\n    :NOR :NAND,\r\n    :AND :OR,\r\n    :NAND :NOR\r\n    :XOR :XNOR\r\n    :XNOR :XOR\r\n    :IMP :NCON\r\n    :NIMP :CON\r\n    :CON :NIMP\r\n    :NCON :IMP))\r\n\r\n(defn- negation\r\n  [op]\r\n  (case op\r\n    :TRUE :FALSE\r\n    :FALSE :TRUE\r\n    :NOT :ID\r\n    :ID :NOT\r\n    :OR :NOR\r\n    :NOR :OR\r\n    :AND :NAND\r\n    :NAND :AND\r\n    :XOR :XNOR\r\n    :XNOR :XOR\r\n    :IMP :NIMP\r\n    :NIMP :IMP\r\n    :CON :NCON\r\n    :NCON :CON\r\n    :EQ :NEQ\r\n    ))\r\n\r\n(defn- cancellation-fn\r\n  [cancel?]\r\n  (fn [x y]\r\n    (or (cancel? x y)\r\n        (= x (! y)))))\r\n\r\n(defn- xconj [xcoll y id]\r\n  (if (contains? xcoll y)\r\n    (let [nxc (disj xcoll y)]\r\n      (case (count nxc)\r\n        0 id\r\n        1 (if id\r\n            (! (first nxc))\r\n            (first nxc))\r\n        nxc))\r\n    (conj xcoll y)))\r\n\r\n(defn- apply-reduction [rf x y more]\r\n  (let [result (reduce-from rf (rf x y) more)]\r\n    (if-some [[_ op] (some->> result operation name (re-matches #\"(.*)'\"))]\r\n      (with-operation (keyword op) result)\r\n      result)))\r\n\r\n;; OR\r\n(defn ||\r\n  ([] false)\r\n  ([x] x)\r\n  ([x y] (cond\r\n           (or (true? x) (true? y)) true\r\n           (false? x) y\r\n           (false? y) x\r\n           :else (bool-casep #(= :OR (operation %)) [x y]\r\n                   [true true] (reduce || x y)\r\n                   [true false] (cond\r\n                                  (contains? x y) x\r\n                                  (contains? x (! y)) true\r\n                                  :else (conj x y))\r\n                   [false true] (cond\r\n                                  (contains? y x) y\r\n                                  (contains? y (! x)) true\r\n                                  :else (conj y x))\r\n                   [false false] (cond\r\n                                   (= x y) x\r\n                                   (= x (! y)) true\r\n                                   :else (bool-set :OR x y)))))\r\n  ([x y & more] (reduce || (|| x y) more)))\r\n\r\n;; AND\r\n(defn &&\r\n  ([] true)\r\n  ([x] x)\r\n  ([x y]\r\n   (cond\r\n     (or (false? x) (false? y)) false\r\n     (true? x) y\r\n     (true? y) x\r\n     :else (bool-casep (partial operation? :AND) [x y]\r\n             [true true] (reduce && x y)\r\n             [true false] (cond\r\n                            (contains? x y) x\r\n                            (contains? x (! y)) false\r\n                            :else (conj x y))\r\n             [false true] (cond\r\n                            (contains? y x) y\r\n                            (contains? y (! x)) false\r\n                            :else (conj y x))\r\n             [false false] (cond\r\n                             (= x y) x\r\n                             (= x (! y)) false\r\n                             :else (bool-set :AND x y)))))\r\n  ([x y & more] (reduce && (&& x y) more)))\r\n\r\n;; XOR\r\n(defn <+>\r\n  ([] false)\r\n  ([x] x)\r\n  ([x y] (cond\r\n           (false? x) y\r\n           (false? y) x\r\n           :else (bool-casep bxsum? [x y]\r\n                   [true true] (reduce <+> x y)\r\n                   [true false] (xconj x y false)\r\n                   [false true] (xconj y x false)\r\n                   [false false] (if (= x y) false (bool-set :XOR x y)))))\r\n  ([x y & more] (reduce <+> (<+> x y) more)))\r\n\r\n;; NOR\r\n(defn- reducing-!|| [x y]\r\n  (cond\r\n    (or (true? x) (true? y)) (reduced false)\r\n    (false? x) (! y)\r\n    (false? y) (! x)\r\n    :else (if (operation? :NOR' x)\r\n            (cond\r\n              (contains? x y) x\r\n              (contains? x (! y)) (reduced false)\r\n              :else (conj x y))\r\n            (cond\r\n              (= x y) (! x)\r\n              (= x (! y)) (reduced false)\r\n              :else (bool-set :NOR' x y)))))\r\n(defn !||\r\n  ([] true)\r\n  ([x] (! x))\r\n  ([x y] (cond\r\n           (or (true? x) (true? y)) false\r\n           (false? x) (! y)\r\n           (false? y) (! x)\r\n           (= x y) (! x)\r\n           (= x (! y)) false\r\n           :else (bool-set :NOR x y)))\r\n  ([x y & more] (apply-reduction reducing-!|| x y more)))\r\n\r\n\r\n;; NAND\r\n(defn- reducing-!&& [x y]\r\n  (cond\r\n    (or (false? x) (false? y)) (reduced true)\r\n    (true? x) (! y)\r\n    (true? y) (! x)\r\n    :else (if (operation? :NAND' x)\r\n            (cond\r\n              (contains? x y) x\r\n              (contains? x (! y)) (reduced true)\r\n              :else (conj x y))\r\n            (cond\r\n              (= x y) (! x)\r\n              (= x (! y)) (reduced true)\r\n              :else (bool-set :NAND' x y)))))\r\n(defn !&&\r\n  ([] false)\r\n  ([x] (! x))\r\n  ([x y] (cond\r\n           (or (false? x) (false? y)) true\r\n           (true? x) (! y)\r\n           (true? y) (! x)\r\n           (= x y) (! x)\r\n           (= x (! y)) true\r\n           :else (bool-set :NAND x y)))\r\n  ([x y & more] (apply-reduction reducing-!&& x y more)))\r\n\r\n\r\n;; XNOR\r\n(defn <*>\r\n  ([] true)\r\n  ([x] (! x))\r\n  ([x y] (cond\r\n           (false? x) (! y)\r\n           (false? y) (! x)\r\n           :else (bool-casep bxprod? [x y]\r\n                   [true true] (reduce <*> x y)\r\n                   [true false] (xconj x y true)\r\n                   [false true] (xconj y x true)\r\n                   [false false] (if (= x y) true (bool-set :XNOR x y)))))\r\n  ([x y & more] (reduce <*> (<*> x y) more)))\r\n\r\n;;; Relational operators\r\n\r\n;; EQ\r\n(defn- reducing-<=> [x y]\r\n  (cond\r\n    (true? x) y\r\n    (true? y) x\r\n    (false? x) (! y)\r\n    (false? y) (! x)\r\n    :else (if (operation? :EQ' x)\r\n            (cond\r\n              (contains? x y) x\r\n              (contains? x (! y)) (reduced false)\r\n              :else (conj x y))\r\n            (cond\r\n              (= x y) (reduced true)\r\n              (= x (! y)) (reduced false)\r\n              :else (bool-set :EQ' x y)))))\r\n\r\n(defn <=>\r\n  ([] true)\r\n  ([x] true)\r\n  ([x y] (cond\r\n           (true? x) y\r\n           (true? y) x\r\n           (false? x) (! y)\r\n           (false? y) (! x)\r\n           (= x y) true\r\n           (= x (! y)) false\r\n           :else (bool-set :EQ x y)))\r\n  ([x y & more] (apply-reduction reducing-<=> x y more)))\r\n\r\n;; NEQ\r\n(defn- reducing-!<=> [x y]\r\n  (cond\r\n    (true? x) (! y)\r\n    (true? y) (! x)\r\n    (false? x) y\r\n    (false? y) x\r\n    :else (if (operation? :NEQ' x)\r\n            (cond\r\n              (contains? x y) x\r\n              (contains? x (! y)) (reduced true)\r\n              :else (conj x y))\r\n            (cond\r\n              (= x y) (reduced false)\r\n              (= x (! y)) (reduced true)\r\n              :else (bool-set :NEQ' x y)))))\r\n\r\n(defn !<=>\r\n  ([] false)\r\n  ([x] false)\r\n  ([x y] (cond\r\n           (true? x) (! y)\r\n           (true? y) (! x)\r\n           (false? x) y\r\n           (false? y) x\r\n           (= x y) false\r\n           (= x (! y)) true\r\n           :else (bool-set :NEQ x y)))\r\n  ([x y & more] (apply-reduction reducing-!<=> x y more)))\r\n\r\n;; IMP\r\n(defn ==> [x y]\r\n  (cond\r\n    (true? x) y\r\n    (false? x) true\r\n    (true? y) true\r\n    (false? y) (! x)\r\n    (= x y) true\r\n    (= x (! y)) y\r\n    :else (bool-vec :IMP x y)))\r\n\r\n;; NIMP\r\n(defn !==> [x y]\r\n  (cond\r\n    (true? x) (! y)\r\n    (false? x) false\r\n    (true? y) false\r\n    (false? y) x\r\n    (= x y) false\r\n    (= x (! y)) x\r\n    :else (bool-vec :NIMP x y)))\r\n\r\n;; CON\r\n(defn <== [x y]\r\n  (cond\r\n    (true? x) true\r\n    (false? x) (! y)\r\n    (true? y) x\r\n    (false? y) true\r\n    (= x y) true\r\n    (= x (! y)) x\r\n    :else (bool-vec :CON x y)))\r\n\r\n;; NCON\r\n(defn !<== [x y]\r\n  (cond\r\n    (true? x) false\r\n    (false? x) y\r\n    (true? y) (! x)\r\n    (false? y) false\r\n    (= x y) false\r\n    (= x (! y)) y\r\n    :else (bool-vec :NCON x y)))\r\n\r\n\r\n;;; Simplifying operations\r\n\r\n(def ^:dynamic *cancellation-rules* {})\r\n\r\n(defn- _sbconj\r\n  ([xcoll y]\r\n   (let [op (operation xcoll)\r\n         op' (dual op)]\r\n     (cond\r\n       (if-some [cancel? (get *cancellation-rules* op)]\r\n         (some (some-fn (partial cancel? y)\r\n                        (partial = (! y)))\r\n               xcoll)\r\n         (contains? xcoll (! y))) (_annihilator op)\r\n       (some #(bfactor? op' % y) xcoll) xcoll\r\n       (some #(bfactor? op' y %) xcoll) (first-if-singleton\r\n                                         (into (bool-set op y)\r\n                                               (remove #(bfactor? op' y %))\r\n                                               xcoll))\r\n       :else (conj xcoll y)))))\r\n\r\n(defn- _sbnew\r\n  ([op x y]\r\n   (let [op' (dual op)]\r\n     (cond\r\n       (or (= x (! y))\r\n           (when-some [cancel? (get *cancellation-rules* op)]\r\n             (cancel? x y))) (_annihilator op)\r\n       (bfactor? op' x y) x\r\n       (bfactor? op' y x) y\r\n       :else (bool-set op x y)))))\r\n\r\n(defn- _soperate\r\n  ([op x y]\r\n   (bool-casep (partial operation? op) [x y]\r\n     [true true] (reduce (simplifying-operators op) x y)\r\n     [true false] (_sbconj x y)\r\n     [false true] (_sbconj y x)\r\n     [false false] (_sbnew op x y))))\r\n\r\n(defn ||*\r\n  \"Simplifying boolean sum.\r\n\r\n  Gives a structure logically equivalent to the disjunction of the input.\r\n  Nested sums, duplicate terms, and boolean primitives are handled as with |.\r\n  In addition, the following transformations are made to boolean structures:\r\n    A + A' -> true,\r\n    A + AB -> A\r\n  Returns false when called with no arguments. \"\r\n  ([] false)\r\n  ([x] x)\r\n  ([x y]\r\n   (cond\r\n     (or (true? x) (true? y)) true\r\n     (false? x) y\r\n     (false? y) x\r\n     :else (_soperate :OR x y)))\r\n  ([x y & more]\r\n   (reduce ||* (||* x y) more)))\r\n\r\n(defn &&*\r\n  \"Simplifying boolean product.\r\n\r\n  Gives a structure logically equivalent to the conjunction of the input terms.\r\n  Nested sums, duplicate terms, and boolean primitives are handled as with &.\r\n  In addition, the following transformations are made to boolean structures:\r\n    A A' -> false,\r\n    A (A + B) -> A\r\n  With no arguments, returns true.\"\r\n  ([] true)\r\n  ([x] x)\r\n  ([x y]\r\n   (cond\r\n     (or (false? x) (false? y)) false\r\n     (true? x) y\r\n     (true? y) x\r\n     :else (_soperate :AND x y)))\r\n  ([x y & more]\r\n   (reduce &&* (&&* x y) more)))\r\n\r\n(defn simplify\r\n  \"Simplifies terms in the first level of the input.\"\r\n  [bobj]\r\n  (let-case [op (operation bobj)]\r\n    (:OR :AND) (apply (simplifying-operators op) bobj)\r\n    bobj))\r\n\r\n(defn- convert-xop\r\n  [target-op simp xop]\r\n  {:pre [(bxop? xop)\r\n         (> (count xop) 1)\r\n         (#{:AND :OR} target-op)]}\r\n  (let [[f g] (get-operators simp target-op (dual target-op))\r\n        ; XOR -> SoP => terms are products w/ odd # true (non-negated) exprs\r\n        ;   even n, odd # true => odd # false => negate even i\r\n        ;   odd n, odd # true => even # false => negate odd i\r\n        ; XOR -> PoS => terms are sums w/ even # false (negated) exprs\r\n        ;   even # false => negate odd i\r\n        ; XNOR -> SoP => terms are products w/ odd # false exprs\r\n        ;   odd # false => negate even i\r\n        ; XNOR -> PoS => terms are sums w/ odd # true exprs\r\n        ;   even n, odd # true => odd # false => negate even i\r\n        ;   odd n, odd # true => even # false => negate odd i\r\n        negate? (case [(operation xop) target-op]\r\n                  ([:XOR :OR] [:XNOR :AND]) (if (even? (count xop)) even? odd?)\r\n                  [:XOR :AND] odd?\r\n                  [:XNOR :OR] even?)]\r\n    (apply f\r\n           (loop [xs (rest xop)\r\n                  v [(first xop) (! (first xop))]]\r\n             (let [x (first xs), x' (! x)]\r\n               (if (singleton? xs)\r\n                 ; The # of negated terms in an item of v has the same parity as that item's index in v.\r\n                 ; When adding the last element, negating at even indices gives all items an\r\n                 ; odd # negated terms, and vice versa.\r\n                 (map-indexed (fn [i col]\r\n                                (g col (if (negate? i) x' x)))\r\n                              v)\r\n                 (recur (next xs)\r\n                        (into (mapv #(g % x) v)\r\n                              (map #(g % x'))\r\n                              (rseq v)))))))))\r\n\r\n(defn- expand-eq [input-op target-op simp bobj]\r\n  (let [|| (operator :OR simp)\r\n        && (operator :AND simp)]\r\n    (case input-op\r\n      :EQ (case target-op\r\n            :OR (|| (reduce && bobj) (map-reduce ! && bobj))\r\n            :AND (loop [x (first bobj)\r\n                        tail (next bobj)\r\n                        result true]\r\n                   (if-first [y tail]\r\n                     (recur y (next tail)\r\n                            (&& result\r\n                                (|| x (! y))\r\n                                (|| (! x) y)))\r\n                     result)))\r\n      :NEQ (case target-op\r\n             :AND (&& (reduce || bobj) (map-reduce ! || bobj))\r\n             :OR (loop [x (first bobj)\r\n                        tail (next bobj)\r\n                        result false]\r\n                   (if-first [y tail]\r\n                     (recur y (next tail)\r\n                            (|| result\r\n                                (&& x (! y))\r\n                                (&& (! x) y)))\r\n                     result))))))\r\n\r\n(defn- expand-not\r\n  [target-op simp bobj]\r\n  (if (bnot? bobj)\r\n    (let [x (first bobj)]\r\n      (let-case [op (operation x)]\r\n        :NOT (first x)\r\n        (:AND :OR) (map-reduce ! (operator (dual op) simp) x)\r\n        (:NAND :NOR) (apply (operator (negation op) simp) x)\r\n        (:EQ :NEQ) (expand-eq (negation op) target-op simp x)\r\n        nil bobj\r\n        (apply (operator (negation op) simp) x)))\r\n    bobj))\r\n\r\n(defn- normalize [target-op simp bobj]\r\n  (let-case [op (operation bobj)]\r\n    :NOT (let [expanded (expand-not target-op simp bobj)]\r\n           (if (operation? :NOT expanded)\r\n             expanded\r\n             (recur target-op simp (expand-not target-op simp bobj))))\r\n    (:OR :AND nil) bobj\r\n    (:XOR :XNOR) (convert-xop target-op simp bobj)\r\n    (:NOR :NAND) (map-reduce ! (operator (dual (negation op)) simp) bobj)\r\n    (:EQ :NEQ) (expand-eq op target-op simp bobj)\r\n    :IMP (|| (! (first bobj)) (second bobj))\r\n    :NIMP (&& (first bobj) (! (second bobj)))\r\n    :CON (|| (first bobj) (! (second bobj)))\r\n    :NCON (&& (! (first bobj)) (second bobj))))\r\n\r\n(defn two-level-normalize [target-op simp bobj]\r\n  (let [n1 (normalize target-op simp bobj)]\r\n    (if-let [op (operation n1)]\r\n      (apply (operator op simp) (map (partial normalize target-op simp) n1))\r\n      n1)))\r\n\r\n(defn- distribute\r\n  \"Distributes the operation o1 over o2 in the first two levels of bobj.\"\r\n  [o1 o2 simp bobj]\r\n  (let [f (operator o1 simp),\r\n        g (operator o2 simp)]\r\n    (if (= o1 (operation bobj))\r\n      (reduce (fn go [x y]\r\n                (bool-casep #(= o2 (operation %)) [x y]\r\n                  [true true] (map-reduce #(go x %) g y)\r\n                  [true false] (map-reduce #(f % y) g x)\r\n                  [false true] (map-reduce #(f x %) g y)\r\n                  [false false] (f x y)))\r\n              bobj)\r\n      bobj)))\r\n\r\n(defn- expand-to\r\n  \"Expands bobj to a form in terms of the given operation op;\r\n  SoP when op is :OR\r\n  PoS when op is :AND\"\r\n  [op simp bobj]\r\n  {:pre [(#{:AND :OR} op)]}\r\n  (let [op' (dual op)\r\n        done? (partial valid-form? {op 1, op' 2, :NOT 3})]\r\n    ((fn go [x]\r\n       (let [x (two-level-normalize op simp x)]\r\n         (if (done? x)\r\n           (if simp (simplify x) x)\r\n           (condp = (operation x)\r\n             op (map-reduce go (operator op simp) x)\r\n             op' (recur (distribute op' op simp x))\r\n             (recur x)))))\r\n     bobj)))\r\n\r\n(defn ->SOP\r\n  [bobj & {simp :simplify, :or {simp true}}]\r\n  (expand-to :OR simp bobj))\r\n\r\n(defn ->POS\r\n  [bobj & {simp :simplify, :or {simp true}}]\r\n  (expand-to :AND simp bobj))\r\n\r\n(defn- xor-with-true?\r\n  [x]\r\n  (and (bxsum? x)\r\n       (contains? x true)))\r\n\r\n(defn ->ANF [bobj]\r\n  (if (anf? bobj)\r\n    bobj\r\n    (let-case [op (operation bobj)]\r\n      :NOT (<+> true (->ANF (first bobj)))\r\n      :AND (let [bobj (map-reduce ->ANF &&* bobj)]\r\n             (if (operation? :AND bobj)\r\n               (distribute :AND :XOR true bobj)\r\n               bobj))\r\n      :NAND (<+> true (->ANF (apply &&* bobj)))\r\n      :OR (let [bobj (map-reduce ->ANF ||* bobj)]\r\n            (if (operation? :OR bobj)\r\n              (reduce (fn [x y]\r\n                        (if (and (operation? :XOR x) (operation? :XOR y)\r\n                                 (contains? x true) (contains? y true))\r\n                          (<+> true (->ANF (&&* (apply <+> (disj x true))\r\n                                                (apply <+> (disj y true)))))\r\n                          (<+> x y (->ANF (&&* x y)))))\r\n                      bobj)\r\n              bobj))\r\n      :NOR (<+> true (->ANF (apply ||* bobj)))\r\n      :XOR (map-reduce ->ANF <+> bobj)\r\n      :XNOR (<+> true (map-reduce ->ANF <+> bobj))\r\n      (:EQ :NEQ) (recur (expand-eq op :OR true bobj))\r\n      :IMP (<+> true (->ANF (first bobj))\r\n                (->ANF (apply &&* bobj)))\r\n      :NIMP (<+> (->ANF (first bobj))\r\n                 (->ANF (apply &&* bobj)))\r\n      :CON (<+> true (->ANF (second bobj))\r\n                (->ANF (apply &&* bobj)))\r\n      :NCON (<+> (->ANF (second bobj))\r\n                 (->ANF (apply &&* bobj)))\r\n      bobj)))\r\n\r\n(def operators {:TRUE (constantly true)\r\n                :FALSE (constantly false)\r\n                :NOT !\r\n                :ID identity\r\n                :AND &&\r\n                :NAND !&&\r\n                :OR ||\r\n                :NOR !||\r\n                :XOR <+>\r\n                :XNOR <*>\r\n                :EQ <=>\r\n                :NEQ !<=>\r\n                :IMP ==>\r\n                :NIMP !==>\r\n                :CON <==\r\n                :NCON !<==})\r\n\r\n(def simplifying-operators (merge operators {:AND &&*, :OR ||*}))\r\n"]}