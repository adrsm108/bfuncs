{"version":3,"sources":["bfuncs/data.cljs"],"mappingsaL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAcL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAcL,AAAA,AAAOC,AAAeC,AAAIC,AAAOC;AAAjC,AACE,AAAAC,AAAMH;AAAN,AAAA,AAAA,AAAAI,AAAA,AAAAD;AACO,AAAA,AAACE,AAAOJ;;AADf,AAAA,AAAAG,AAAA,AAAAD;AAEQ,AAAA,AAACE,AAAOJ;;AAFhB,AAGE,AAACK,AAAUN,AAAIC,AAAOC;;;;;AAE1B,AAAA,AAAAK,AAAOM,AAAmBC,AAAUC,AAASd;AAA7C,AAAA,AAAAO,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAsFN;AAAtF,AAAAU,AAAAJ,AAAA,AAA4DQ;AAA5D,AAAAJ,AAAAJ,AAAA,AAAwES;AAAxE,AACE,AAACC,AAAqBjB,AACA,AAAIe,AAAYjB,AAAcO,AAC9B,AACEU,AAAY,AAAK,AAAAG,AAAMrB;AAANsB,AAAgCN;AAAhC,AAAA,AAAA,AAAAO,AAAAF,AAAAC;AAAA,AAAAR,AAAAO,AAAAC;;AAA0C,AAACE,AAAKR;;AADnE,AACc,AAEZG,AAAS,AAAA,AACK,AAAAE,AAAMtB;AAANuB,AAA2BN;AAA3B,AAAA,AAAA,AAAAO,AAAAF,AAAAC;AAAA,AAAAR,AAAAO,AAAAC;;AAAqC,AAACE,AAAKR;;AAJ3D,AAAA,AAGW;AAIX,AAAA,AAAA,AAAA,AAAA,AACEE,AACAC,AACM,AAAAE,AAAMvB;AAANwB,AAA0BN;AAA1B,AAAA,AAAA,AAAAO,AAAAF,AAAAC;AAAA,AAAAR,AAAAO,AAAAC;;AAAoC,AAAA,AAAA,AAAU,AAACE,AAAKR;;;AAC5D,AAAA,AAAA,AAAA,AACEE;AAEFd,AAAKa;;AAE7B,AAAA;AAAA;;;AAAA,AAAaqB;;AAAb,AAAAb,AAAA,AACec;AADf,AAAA,AAAAb,AAAA,AAAA,AAAA,AAAA,AACea,AAAAA;AADfZ,AAAA,AAAAC,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACeY,AAAAA;;AADf,AAAAT,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACeS,AAAAA;;AADf,AAAA,AAAAR,AAAA,AACeQ;;;;AADf,AAAA,AAAA,AACGX,AAAYW;AADf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACeA,AAAAA;AADf,AACeA,AAAAA;;AADf,AAAAd,AACec;;;;AADf,AAAAP,AAAA,AAEcO;AAFd,AAAA,AAAAb,AAAA,AAAA,AAAA,AAAA,AAEca,AAAAA;AAFdZ,AAAA,AAAAM,AAAA,AAAAJ,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEcY,AAAAA;;AAFd,AAAAT,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEcS,AAAAA;;AAFd,AAAA,AAAAR,AAAA,AAEcQ;;;;AAFd,AAAA,AAAA,AAEGN,AAAWM;AAFd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEcA,AAAAA;AAFd,AAEcA,AAAAA;;AAFd,AAAAP,AAEcO;;;;AAFd,AAAAL,AAAA,AAGsBK,AAAKC;AAH3B,AAAA,AAAAd,AAAA,AAAA,AAAA,AAAA,AAGsBa,AAAAA;AAHtBZ,AAAA,AAAAQ,AAAA,AAAAN,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGsBY,AAAAA,AAAKC,AAAAA;;AAH3B,AAAAV,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAL,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGsBS,AAAAA,AAAKC,AAAAA;;AAH3B,AAAA,AAAAT,AAAA,AAGsBQ;;;;AAHtB,AAAA,AAAA,AAGGJ,AAAmBI,AAAKC;AAH3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGsBD,AAAAA;AAHtB,AAGsBA,AAAAA,AAAKC;;AAH3B,AAAAN,AAGsBK,AAAKC;;;;AAH3B,AAAAJ,AAAA,AAIoBG,AAAKE;AAJzB,AAAA,AAAAf,AAAA,AAAA,AAAA,AAAA,AAIoBa,AAAAA;AAJpBZ,AAAA,AAAAU,AAAA,AAAAR,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIoBY,AAAAA,AAAKE,AAAAA;;AAJzB,AAAAX,AAAA,AAAAO,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAP,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIoBS,AAAAA,AAAKE,AAAAA;;AAJzB,AAAA,AAAAV,AAAA,AAIoBQ;;;;AAJpB,AAAA,AAAA,AAIGF,AAAiBE,AAAKE;AAJzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIoBF,AAAAA;AAJpB,AAIoBA,AAAAA,AAAKE;;AAJzB,AAAAL,AAIoBG,AAAKE;;;;AAJzB,AAMA,AAAA,AAAOC,AAAiBC;AAAxB,AACE,AAACC,AACA,AAACC,AAAK,AAACjB,AAAWe,AAClB,AAACE,AAAK,AAACC,AAAMH;;AAEhB,AAAA,AAAOI,AAAeC;AAAtB,AACE,AAAAC,AAAW,AAACE,AAAIH;AAAhB,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAACN,AACA,AAACC,AAAK,AAACjB,AAAWoB,AAClB,AAACI,AAAoBF;;AAHxB;;;AAMF,AAAA,AAAOG,AAAeC;AAAtB,AACE,AAAAL,AAAW,AAACE,AAAIG;AAAhB,AAAA,AAAAL;AAAA,AAAAA,AAASC;AAAT,AACE,AAACN,AACA,AAACC,AAAK,AAACjB,AAAW0B,AAClB,AAACC,AAAkBL;;AAHtB;;;AAMF,AAAA,AAAOM,AAAkBhB,AAAKiB;AAA9B,AACE,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA9C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA+C,AAAA,AAAA,AAAAA,AAAYpB,AAAAA,AAAQmB,AAAAA,AAAAA,AAAAA,AAAAA;AACtB,AAACtB,AAAkBsB,AAAEjB;;AACrB,AAAC1B,AAAI0B,AAAKiB,AAAEA;;;AAEhB;;;AAAA,AAAME,AAEHF;AAFH,AAEM,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA9C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA+C,AAAA,AAAA,AAAAA,AAAYpB,AAAAA,AAAQmB,AAAAA,AAAAA,AAAAA,AAAAA;AAA1B,AAA6B,AAAC7B,AAAW6B;;AAAzC;;;AAEN,AAAA,AAAMG,AAAUH;AAAhB,AACE,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA9C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA+C,AAAA,AAAA,AAAAA,AAAYpB,AAAAA,AAAQmB,AAAAA,AAAAA,AAAAA,AAAAA;AAA1B,AAA6B,AAACxB,AAAUwB;;AAAxC;;;AAEF,AAAA,AAAMI,AAAYpB;AAAlB,AACE,AAAAqB,AAAMrB;AAANqB,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;;;;AAUF,AAAA,AAAOE,AAAYC,AAAIC;AAAvB,AACE,AAAI,AAACC,AAAOD;AAAZ;;AAEE,AAAOE,AAAI,AAACtB,AAAMoB;AACXA,AAAK,AAACG,AAAKH;;AADlB,AAEE,AAAAjB,AAAA,AAAAE,AAAae;AAAb,AAAA,AAAAjB;AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAA,AAAAH,AAAAwB,AAAWb;AAAX,AACE,AAAO,AAAI,AAAA,AAAM,AAACQ,AAAAA,AAAAA,AAAIG,AAAAA,AAAIX,AAAAA,AAAIA,AAAEW;AACzB,AAACC,AAAKH;;;;;AACbE;;;;;;AAER,AAAA,AAAMG,AAAcd,AAAEe;AAAtB,AACE,AAAI,AAAClE,AAAEmD,AAAEe;AAAT;;AAEE,AAAMC,AAAG,AAACd,AAAUF;AAAIiB,AAAG,AAACf,AAAUa;AAAtC,AACE,AAAAG,AAAA,AAAAC;AAAA,AAAa,AAAA,AAAAA,AAACtE;;AAAd,AAAA,AAAA,AAAAqE,AAAyBF;AAAzB,AAAA,AAAAE,AAA4BD;AACd,AAAAG,AAAc,AAAC/B,AAAMW;AAArBqB,AAAwB,AAAChC,AAAM0B;AAA/B,AAAA,AAAAK,AAAAC,AAAAD,AAAAC,AAACP,AAAAA,AAAAA;;AACA,AAAAQ,AAAa,AAAAC,AAAc,AAAClC,AAAMW;AAArBwB,AAAwBT;AAAxB,AAAA,AAAAQ,AAAAC,AAAAD,AAAAC,AAACV,AAAAA,AAAAA;;AAAd,AAAA,AAAA,AAAAQ,AAAA;AAAA,AAAA;;AAAAA;;;;AAFf,AAAA,AAAAJ,AAA4BD;AAGb,AAAAK,AAAa,AAAAG,AAAczB;AAAd0B,AAAgB,AAACrC,AAAM0B;AAAvB,AAAA,AAAAU,AAAAC,AAAAD,AAAAC,AAACZ,AAAAA,AAAAA;;AAAd,AAAA,AAAA,AAAAQ,AAAA;AAAA,AAAA;;AAAAA;;;AAEb,AAAA,AAAA,AAAkBN;AAAlB,AAAA,AAAA,AAAqBC;AACP,AAAA,AAAK,AAACW,AAAQ5B,AAAEe;AAAhB,AAAA,AAAAY,AACYE;AADZ,AAAAF,AACsBG;AADtB,AAEO,AACE,AAACC,AAAS/B;AADZ;;AAAA,AAEE,AAAC+B,AAAShB;AAFZ;;AAAA,AAGE,AAASf;AAHX;;AAAA,AAIE,AAASe;AAJX;;AAAA,AAKE,AAASf;AALX;;AAAA,AAME,AAASe;AANX;;AAAA,AAOE,AAACiB,AAAOhC;AAPV;;AAAA,AAQE,AAACgC,AAAOjB;AARV;;AAAA,AAAA;;;;;;;;;;;AAFP,AAAA,AAAAY;;;;AADd;;;AAAA,AAAA,AAAA,AAAqBV;AAArB;;AAgBE,AAAAK,AAAa,AAACM,AAAQ,AAACxB,AAAWY,AAAI,AAACZ,AAAWa;AAAlD,AAAA,AAAA,AAAAK,AAAA;AAAA,AACE,AAAAA,AAAa,AAACM,AAAQ,AAACK,AAAMjC,AAAG,AAACiC,AAAMlB;AAAvC,AAAA,AAAA,AAAAO,AAAA;AAAA,AACE,AAAOtB,AAAEA;AAAGe,AAAEA;;AAAd,AACE,AAAA,AAAYL,AAAQV;AAApB,AAAA,AAAYU,AAAUK;AAAtB;;AAAA;;;AAAA,AAAA,AAAYL,AAAUK;AAAtB;;AAIE,AAAMmB,AAAG,AAAC3B,AAAWO,AAAad;AAC5BmC,AAAG,AAAC5B,AAAWO,AAAaC;AADlC,AAEE,AAAAO,AAAa,AAACR,AAAAA,AAAAA,AAAaoB,AAAAA,AAAGC,AAAAA;AAA9B,AAAA,AAAA,AAAAb,AAAA;AAAA,AACE,AAAO,AAACc,AAAKpC,AAAEkC;AAAI,AAACE,AAAKrB,AAAEoB;;;;;AAD7Bb;;;;;;;AARRA;;;AADFA;;;;;;;;AAaV,AAAA,AAAOe,AAAUrC;AAAjB,AACE,AAAI,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA9C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA+C,AAAA,AAAA,AAAAA,AAAYpB,AAAAA,AAAQmB,AAAAA,AAAAA,AAAAA,AAAAA;AAA7B,AAAA,AACY,AAACsC,AAAQtC;;AACnB,AAACsC,AAAQtC;;;AAEb,AAAA;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAa0C;;AAAb,AAAA,AAAA,AAEa5D;AAFb,AAEmB,AAACiE,AAAQjE;;;AAF5B,AAAA,AAAA,AAAA,AAAa4D,AAGEM;;AAHf,AAAA,AAAA,AAGUlE;AAHV,AAII,AAAQA,AAAKkE;;;AAJjB,AAAA,AAAA,AAAA,AAAaN,AAyCEc,AAAG9G,AAAOC;;AAzCzB,AAAA,AAAA,AAyCe6G;AAzCf,AA0CI,AAAI,AAAA,AAAW7G;AACb,AAAI,AAAA,AAACG,AAAOJ;;AACR,AAACK,AAAU8F,AAAQnG,AAAOC;;AAC1B,AAAA,AAACG,AAAOJ;;AACZ,AAAI,AAAA,AAACI,AAAOJ;;AACR,AAACK,AAAU8F,AAAQnG,AAAOC;;;;AA/CpC,AAAA,AAAA,AAAA,AAAa+F,AAyDHO;;AAzDV,AAAA,AAAA,AAyDUA;AAzDV,AAyDaL;;;AAzDb,AAAA,AAAA,AAAA,AAAaF,AAmCHO;;AAnCV,AAAA,AAAA,AAmCUA;AAnCV,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAaP,AAsCFO;;AAtCX,AAAA,AAAA,AAsCWA;AAtCX,AAAA;;;AAAA,AAAA,AAAA,AAAA/F,AAAawF;;AAAb,AAAA,AAAA,AAAA,AAAaA,AA4DAO;;AA5Db,AAAA,AAAA,AA4DaA;AA5Db,AA6DY,AAACX,AAAQO,AACb,AAAAa,AAAA,AACA,AAAAE;AA5QkB,AA2QlB,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAA;AAAA,AAAA,AAAAC,AAAA,AAAqB,AAACrB,AAAQ/E;;AAA9BoG;;AACA,AAAA,AAAQf;AAAK,AAAAiB,AAAAD;AA5QK,AA4QL,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAA;AAAA,AAAA,AAAAC,AAAA,AAAgB,AAACxB,AAAQM;;AAAzBkB;;AAAbF;;;;AA/DR,AAAA,AAAA,AAAA,AAAalB,AAyEA1C;;AAzEb,AAAA,AAAA,AAyEaA;AAzEb,AAyEgB,AAAC+D,AAAO/D;;;AAzExB,AAAA,AAAA,AAAA,AAAa0C,AAyBHjC;;AAzBV,AAAA,AAAA,AAyBUA;AAzBV,AAyBgB,AAAA6C,AAAmCR;AAAnC,AAAA,AAAA,AAAA,AAAAQ,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAc7C,AAAKxB;AAAnB,AAAA,AAAAqE,AAAmCR;;AAAnCQ;;;;AAzBhB,AAAA,AAAA,AAAA,AAAaZ,AAoBFU,AAAEJ;;AApBb,AAAA,AAAA,AAoBWI;AApBX,AAqBI,AAAK,AAACvG,AAAE,AAACwG,AAAKD,AAAG,AAACC,AAAKL,AAClB,AAACnG,AAAEgG,AAAQ,AAACxD,AAAM2D;;;AAtB3B,AAAA,AAAA,AAAA,AAAaN,AA4BFO;;AA5BX,AAAA,AAAA,AA4BWA;AA5BX,AA4BcJ;;;AA5Bd,AAAA,AAAA,AAAA,AAAaH,AA6BHO;;AA7BV,AAAA,AAAA,AA6BUA;AA7BV,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAaP,AAgCJa;;AAhCT,AAAA,AAAA,AAgCSA;AAhCT,AAAA,AAgCiBV;;;AAhCjB,AAAA,AAAA,AAAA3F,AAAawF;;AAAb,AAAA,AAAA,AAAA,AAAaA,AAOEO;;AAPf,AAAA,AAAA,AAOeA;AAPf,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAaP,AAQCO;;AARd,AAAA,AAAA,AAQcA;AARd,AAAA,AAQkBJ;;;AARlB,AAAA,AAAA,AAAA,AAAaH,AASO5D,AAAKoE;;AATzB,AAAA,AAAA,AASoBpE;AATpB,AAUI,AAAI,AAACjC,AAAEU,AAAU2F;AACfpE;;AACA,AAAA4D,AAAA,AAAYE,AAAKM,AAAcL;;;;AAZrC,AAAA,AAAA,AAAA,AAAaH,AAaS5D,AAAKC;;AAb3B,AAAA,AAAA,AAasBD;AAbtB,AAcI,AAAMqE,AAAS,AAACpD,AAAiBhB,AAAK8D;AAAtC,AACE,AAAI,AAAYA,AAAQM;AACtBrE;;AACA,AAAA4D,AAAA,AAAYE,AAAKrF,AAAU4F;;;;AAjBnC,AAAA,AAAA,AAAA,AAAaT,AAmDEU,AAAEK;;AAnDjB,AAAA,AAAA,AAmDeL;AAnDf,AAoDI,AAAI,AAAYR,AAAKa;AACnBL;;AACA,AAAAV,AAAYe,AAASlG,AAAUsF,AAAQC;;;;AAtD7C,AAAA,AAAA,AAAaJ;AAAb,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAAaA;;AAAb,AAAA,AAAA,AAAaA;;AAAb,AAAA,AAAA,AAAAH,AAAAC,AAAAC,AAAaC;AAAb,AAAA,AAAA5F,AAAA0F,AAAA;;;AAAA;;;AAAA,AAAaG,AAAWC,AAAKrF,AAAUsF,AAAkBC;AAAzD,AAAA,AAAAJ,AAAwBE,AAAKrF,AAAUsF,AAAkBC;;;AAA5CJ,AA4Eb,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAayB;;AAAb,AAAA,AAAA,AAGarF;AAHb,AAGmB,AAACiE,AAAQjE;;;AAH5B,AAAA,AAAA,AAAA,AAAaqF,AAIEnB;;AAJf,AAAA,AAAA,AAIUlE;AAJV,AAIsB,AAAQA,AAAKkE;;;AAJnC,AAAA,AAAA,AAAA,AAAamB,AAmDD1D,AAAKqE;;AAnDjB,AAAA,AAAA,AAmDYrE;AAnDZ,AAoDI,AAAA,AAASA,AAAKqE;;;AApDlB,AAAA,AAAA,AAAA,AAAaX,AAqDDZ,AAAMuB,AAAEG;;AArDpB,AAAA,AAAA,AAqDY1B;AArDZ,AAsDI,AAAC2B,AAAQb,AAAYS,AAAEG;;;AAtD3B,AAAA,AAAA,AAAA,AAAad,AAmEEX,AAAG9G,AAAOC;;AAnEzB,AAAA,AAAA,AAmEe6G;AAnEf,AAoEI,AAAClG,AAAkBC,AAAU8G,AAAY3H,AAAOC;;;AApEpD,AAAA,AAAA,AAAA,AAAawH,AAgFClB;;AAhFd,AAAA,AAAA,AAgFcA;AAhFd,AAgFiB,AAACsC,AAAUlB;;;AAhF5B,AAAA,AAAA,AAAA,AAAaF,AAgEHlB;;AAhEV,AAAA,AAAA,AAgEUA;AAhEV,AAgEa,AAACoC,AAAMhB;;;AAhEpB,AAAA,AAAA,AAAA,AAAaF,AA6EFlB;;AA7EX,AAAA,AAAA,AA6EWA;AA7EX,AA6Ec,AAAAkB,AAAU5G,AAAU8G,AAAYvB;;;AA7E9C,AAAA,AAAA,AAAA,AAAaqB,AAyCFZ;;AAzCX,AAAA,AAAA,AAyCWA;AAzCX,AAyCkB,AAACsB,AAAOR;;;AAzC1B,AAAA,AAAA,AAAAnH,AAAaiH;;AAAb,AAAA,AAAA,AAAA,AAAaA,AAmFAlB;;AAnFb,AAAA,AAAA,AAmFaA;AAnFb,AAoFQ,AAACuC,AAAKlD,AAAQ,AAACmD,AAAK3E,AAAauD,AACjC,AAAAqB,AACA,AAAAE;AA/WkB,AA8WlB,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAA;AAAA,AAAA,AAAAC,AAAA,AAAqB,AAACrD,AAAQ/E;;AAA9BoI;;AACA,AAAA,AAAQ,AAACE,AAAKxB;AAAa,AAAAyB,AAAAF;AA/WT,AA+WS,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAA;AAAA,AAAA,AAAAC,AAAA,AAAgB,AAACzD,AAAQ,AAACuD,AAAKxB;;AAA/B0B;;AAA3BH;;;;AAtFR,AAAA,AAAA,AAAA,AAAazB,AAmGAnE;;AAnGb,AAAA,AAAA,AAmGaA;AAnGb,AAmGgB,AAAC+D,AAAO/D;;;AAnGxB,AAAA,AAAA,AAAA,AAAamE,AA2BH1D;;AA3BV,AAAA,AAAA,AA2BUA;AA3BV,AA2BgB,AAAA6C,AAAiCR;AAAjC,AAAA,AAAA,AAAA,AAAAQ,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAc7C,AAAKnB;AAAnB,AAAA,AAAAgE,AAAiCR;;AAAjCQ;;;;AA3BhB,AAAA,AAAA,AAAA,AAAaa,AAqBFf,AAAEJ;;AArBb,AAAA,AAAA,AAqBWI;AArBX,AAsBI,AAAK,AAACvG,AAAE,AAACwG,AAAKD,AAAG,AAACC,AAAKL,AAClB,AAACnG,AAAEU,AAAU,AAACY,AAAW6E,AACzB,AAACnG,AAAEwH,AAAY,AAAC7F,AAAUwE;;;AAxBnC,AAAA,AAAA,AAAA,AAAamB,AA4CA1D,AAAKqE;;AA5ClB,AAAA,AAAA,AA4CarE;AA5Cb,AA6CI,AAAMsE,AAAM,AAACC,AAASX,AAAYS;AAAlC,AACE,AAAI,AAAYC,AAAMV;AACpB5D;;AACA,AAAA0D,AAAA,AAAU5G,AAAUwH;;;;AAhD5B,AAAA,AAAA,AAAA,AAAaZ,AAsCJZ;;AAtCT,AAAA,AAAA,AAsCSA;AAtCT,AAsCgB,AAACqB,AAAKP;;;AAtCtB,AAAA,AAAA,AAAAnH,AAAaiH;;AAAb,AAAA,AAAA,AAAA,AAAaA,AAOElB;;AAPf,AAAA,AAAA,AAOeA;AAPf,AAOkB1F;;;AAPlB,AAAA,AAAA,AAAA,AAAa4G,AAQClB;;AARd,AAAA,AAAA,AAQcA;AARd,AAQiBoB;;;AARjB,AAAA,AAAA,AAAA,AAAaF,AASOrF,AAAKoE;;AATzB,AAAA,AAAA,AASoBpE;AATpB,AAUI,AAAI,AAACjC,AAAEqG,AAAc3F;AACnBuB;;AACA,AAAAqF,AAAA,AAAUjB,AAAcmB;;;;AAZ9B,AAAA,AAAA,AAAA,AAAaF,AAaSlB,AAAElE;;AAbxB,AAAA,AAAA,AAasBkE;AAbtB,AAcI,AAAAkB,AAAA,AAAU5G,AACA,AAAC+G,AAAK,AAACC,AAAMF,AACP,AAACG,AAAI,AAACC,AAAQ1E,AAAiBhB,AAC/BsF;;;AAjBpB,AAAA,AAAA,AAAA,AAAaF,AAyDE1D,AAAKgD;;AAzDpB,AAAA,AAAA,AAyDehD;AAzDf,AA0DI,AAAM0E,AAAgB,AAACC,AAAWf,AAAYZ;AAA9C,AACE,AAAI,AAAYY,AAAYc;AAC1B1E;;AACA,AAAA0D,AAAU5G,AAAU4H,AAAgBrC;;;;AA7D5C,AAAA,AAAA,AAAA,AAAaqB,AA8BH1D,AAAK2C;;AA9Bf,AAAA,AAAA,AA8BU3C;AA9BV,AA+BI,AAAMiE,AAAM,AAACC,AAAMN,AAAYjB;AAA/B,AACE,AAAI,AAAYiB,AAAYK;AAC1BjE;;AACA,AAAA0D,AAAA,AAAU5G,AAAUmH;;;;AAlC5B,AAAA,AAAA,AAAA,AAAaP;;AAAbH,AAuEkBsB;;AAvElB,AAAA,AAAAtB,AAAA;AAAA,AAAA,AAAAA,AAuEYT;AAvEZ,AAwEI,AAAC2B,AAAQb,AAAYiB;;AAxEzBtB,AAyEkBsB,AAAEL;;AAzEpB,AAAA,AAAAjB,AAAA;AAAA,AAAA,AAAAA,AAyEYT;AAzEZ,AA0EI,AAAC2B,AAAQb,AAAYiB,AAAEL;;AA1E3BjB,AAyEkBsB,AAAEL;;;AAzEpBjB,AAyEkBsB;;AAzElBtB,AAyEkBsB,AAAEL;;;;;;;;;;AAzEpB,AAAA,AAAA,AAAA,AAAAjB,AAAAC,AAAaE;;AAAb,AAAA,AAAAH,AAAA;AAAA,AAAA,AAAA,AAAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAAE,AAAAD;;;AAAA,AAAA,AAAA,AAAA,AAAaE,AAuEKmB;;AAvElB,AAAA,AAAA,AAuEY/B;AAvEZ,AAwEI,AAAC2B,AAAQb,AAAYiB;;;AAxEzB,AAAA,AAAA,AAAA,AAAanB,AAyEKmB,AAAEL;;AAzEpB,AAAA,AAAA,AAyEY1B;AAzEZ,AA0EI,AAAC2B,AAAQb,AAAYiB,AAAEL;;;AA1E3B,AAAA,AAAA,AAAad;AAAb,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAAaA;;AAAb,AAAA,AAAA,AAAaA;;AAAb,AAAA,AAAA,AAAA5B,AAAAC,AAAAC,AAAa0B;AAAb,AAAA,AAAArH,AAAA0F,AAAA;;;AAAA;;;AAAA,AAAa4B,AAAS7G,AAAU8G,AAAsBvB;AAAtD,AAAA,AAAAqB,AAAsB5G,AAAU8G,AAAsBvB;;;AAAzCqB,AAuGb,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAjH,AAAa+I;;AAAb,AAAA,AAAA,AAAA,AAAaA,AAwFH1C,AAAMmD;;AAxFhB,AAAA,AAAA,AAwFUnD;AAxFV,AAwFmB,AAACwD,AAAMZ,AAAYO;;;AAxFtC,AAAA,AAAA,AAAA,AAAaT;;AAAb,AAAA,AAAA,AAGaxF;AAHb,AAII,AAACsC,AAAQtC;;;AAJb,AAAA,AAAA,AAAA,AAAawF,AAKEjD;;AALf,AAAA,AAAA,AAKUlE;AALV,AAMI,AAAQA,AAAKkE;;;AANjB,AAAA,AAAA,AAAA,AAAaiD;;AAOKjG;;AAPlB,AAAA,AAAA,AAOYuD;AAPZ,AAQI,AAAA,AAAC6C,AAASD,AAAYnG;;AACRA,AAAEqG;;AATpB,AAAA,AAAA,AASY9C;AATZ,AAUI,AAAC6C,AAASD,AAAYnG,AAAEqG;;AADVrG,AAAEqG;;;AAAFrG;;AAAAA,AAAEqG;;;;;;;;;;AATpB,AAAA,AAAA,AAAA,AAAaJ;;AAWSjG;;AAXtB,AAAA,AAAA,AAWgBuD;AAXhB,AAYI,AAAC+C,AAAaH,AAAYnG,AAAE,AAACiC,AAAMkE;;AACjBnG,AAAEqG;;AAbxB,AAAA,AAAA,AAagB9C;AAbhB,AAcI,AAAC+C,AAAaH,AAAYnG,AAAEqG;;AADVrG,AAAEqG;;;AAAFrG;;AAAAA,AAAEqG;;;;;;;;;;AAbxB,AAAA,AAAA,AAAA,AAAaJ,AA4ED1C,AAAM+B;;AA5ElB,AAAA,AAAA,AA4EY/B;AA5EZ,AA4EqB,AAAA,AAAC2B,AAAQiB,AAAYb;;;AA5E1C,AAAA,AAAA,AAAA,AAAaW,AA6ED1C,AAAM+B,AAAEL;;AA7EpB,AAAA,AAAA,AA6EY1B;AA7EZ,AA6E+B,AAAC2B,AAAQiB,AAAYb,AAAEL;;;AA7EtD,AAAA,AAAA,AAAA,AAAagB,AAsEJ1C,AAAMmD;;AAtEf,AAAA,AAAA,AAsESnD;AAtET,AAuEI,AAACoD,AAAKR,AAAYO;;;AAvEtB,AAAA,AAAA,AAAA,AAAaT,AAwEJ1C,AAAMmD,AAAEzB;;AAxEjB,AAAA,AAAA,AAwES1B;AAxET,AAyEI,AAACoD,AAAKR,AAAYO,AAAEzB;;;AAzExB,AAAA,AAAA,AAAA,AAAagB,AA2GEzC,AAAG9G,AAAOC;;AA3GzB,AAAA,AAAA,AA2Ge6G;AA3Gf,AA2G+B,AAAClG,AAAkBC,AAAU4I,AAAYzJ,AAAOC;;;AA3G/E,AAAA,AAAA,AAAA,AAAasJ,AA2FAxF,AAAKiG,AAAEM;;AA3FpB,AAAA,AAAA,AA2FavG;AA3Fb,AA4FI,AAAMmG,AAAQ,AAACK,AAASd,AAAYO,AAAEM;AAAtC,AACE,AAAI,AAAYJ,AAAQT;AACtB1F;;AACA,AAAAwF,AAAA,AAAU1I,AAAUqJ;;;;AA/F5B,AAAA,AAAA,AAAA,AAAaX,AAwGCiB;;AAxGd,AAAA,AAAA,AAwGcA;AAxGd,AAwGqB,AAAC3B,AAAUY;;;AAxGhC,AAAA,AAAA,AAAA,AAAaF,AAyCH1C;;AAzCV,AAAA,AAAA,AAyCUA;AAzCV,AAyCiB,AAAC8B,AAAMc;;;AAzCxB,AAAA,AAAA,AAAA,AAAaF,AA+BFhD;;AA/BX,AAAA,AAAA,AA+BWA;AA/BX,AA+Bc,AAAAgD,AAAU1I,AAAU4I,AAAY/G;;;AA/B9C,AAAA,AAAA,AAAA,AAAa6G,AAmEF1C;;AAnEX,AAAA,AAAA,AAmEWA;AAnEX,AAmEkB,AAACsB,AAAOsB;;;AAnE1B,AAAA,AAAA,AAAA,AAAaF,AA4CH1C;;AA5CV,AAAA,AAAA,AA4CUA;AA5CV,AA4CiB,AAACiD,AAAKL;;;AA5CvB,AAAA,AAAA,AAAA,AAAaF,AA6CJ1C;;AA7CT,AAAA,AAAA,AA6CSA;AA7CT,AA6CgB,AAAA0C,AAAA,AAAU1I,AAAU,AAACkJ,AAAIN;;;AA7CzC,AAAA,AAAA,AAAAjJ,AAAa+I;;AAAb,AAAA,AAAA,AAAA,AAAaA,AAiHAkB;;AAjHb,AAAA,AAAA,AAiHaA;AAjHb,AAkHQ,AAAC3B,AAAKlD,AAAQ6D,AACd,AAAAiB,AACA,AAAAE;AApfkB,AAmflB,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAA;AAAA,AAAA,AAAAC,AAAA,AAAqB,AAAC/E,AAAQ/E;;AAA9B8J;;AACA,AAAA,AAAQ,AAACxB,AAAKM;AACN,AAAAmB,AAAA,AAACC,AAAa,AAACjF,AAAQ,AAACuD,AAAKM;;AADrCmB;;;;AApHR,AAAA,AAAA,AAAA,AAAarB,AAuHAjG;;AAvHb,AAAA,AAAA,AAuHaA;AAvHb,AAuHgB,AAAC+D,AAAO/D;;;AAvHxB,AAAA,AAAA,AAAA,AAAaiG,AA6DHxF;;AA7DV,AAAA,AAAA,AA6DUA;AA7DV,AA6DgB,AAAA6C,AAAiCR;AAAjC,AAAA,AAAA,AAAA,AAAAQ,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAc7C,AAAKb;AAAnB,AAAA,AAAA0D,AAAiCR;;AAAjCQ;;;;AA7DhB,AAAA,AAAA,AAAA,AAAa2C,AAsDFxF,AAAKuC;;AAtDhB,AAAA,AAAA,AAsDWvC;AAtDX,AAuDI,AAAK,AAAC5D,AAAE,AAACwG,AAAK5C,AAAM,AAAC4C,AAAKL,AACrB,AAACnG,AAAEU,AAAU,AAACY,AAAW6E,AACzB,AAACnG,AAAEsJ,AAAY,AAAC3H,AAAUwE;;;AAzDnC,AAAA,AAAA,AAAA,AAAaiD,AAgFFxF,AAAK6E,AAAER;;AAhFlB,AAAA,AAAA,AAgFWrE;AAhFX,AAiFI,AAAMmG,AAAQ,AAACC,AAAOV,AAAYb,AAAER;AAApC,AACE,AAAI,AAAY8B,AAAQT;AACtB1F;;AACA,AAAAwF,AAAA,AAAU1I,AAAUqJ;;;;AApF5B,AAAA,AAAA,AAAA,AAAaX,AAqFM1C,AAAM+B;;AArFzB,AAAA,AAAA,AAqFmB/B;AArFnB,AAqF4B,AAACuD,AAAeX,AAAYb;;;AArFxD,AAAA,AAAA,AAAA,AAAaW,AAgEJ1C;;AAhET,AAAA,AAAA,AAgESA;AAhET,AAgEgB,AAACqB,AAAKuB;;;AAhEtB,AAAA,AAAA,AAAAjJ,AAAa+I;;AAAb,AAAA,AAAA,AAAA,AAAaA,AAiBEhD;;AAjBf,AAAA,AAAA,AAiBeA;AAjBf,AAiBkB1F;;;AAjBlB,AAAA,AAAA,AAAA,AAAa0I,AAkBChD;;AAlBd,AAAA,AAAA,AAkBcA;AAlBd,AAkBiBkD;;;AAlBjB,AAAA,AAAA,AAAA,AAAaF,AAmBOnH,AAAKoE;;AAnBzB,AAAA,AAAA,AAmBoBpE;AAnBpB,AAoBI,AAAI,AAACjC,AAAEqG,AAAc3F;AACnBuB;;AACA,AAAAmH,AAAA,AAAU/C,AAAciD;;;;AAtB9B,AAAA,AAAA,AAAA,AAAaF,AAuBShD,AAAElE;;AAvBxB,AAAA,AAAA,AAuBsBkE;AAvBtB,AAwBI,AAAAgD,AAAA,AAAU1I,AACA,AAAC+G,AAAK,AAACC,AAAM4B,AACP,AAAC3B,AAAI,AAACC,AAAQ1E,AAAiBhB,AAC/BoH;;;AA3BpB,AAAA,AAAA,AAAA,AAAaF,AAkCExF,AAAKgD;;AAlCpB,AAAA,AAAA,AAkCehD;AAlCf,AAmCI,AAAM8F,AAAa,AAACnB,AAAWe,AAAY1C;AAA3C,AACE,AAAI,AAAY0C,AAAYI;AAC1B9F;;AACA,AAAAwF,AAAU1I,AAAUgJ,AAAazD;;;;AAtCzC,AAAA,AAAA,AAAA,AAAamD,AAgDH1C,AAAMH;;AAhDhB,AAAA,AAAA,AAgDUG;AAhDV,AAiDI,AAAA0C,AAAA,AAAU1I,AAAU,AAACoH,AAAMwB,AAAY/C;;;AAjD3C,AAAA,AAAA,AAAA,AAAa6C;;AAAbjC,AAkGkBsB;;AAlGlB,AAAA,AAAAtB,AAAA;AAAA,AAAA,AAAAA,AAkGYT;AAlGZ,AAmGI,AAACoD,AAAKR,AAAYb;;AAnGtBtB,AAoGkBsB,AAAEL;;AApGpB,AAAA,AAAAjB,AAAA;AAAA,AAAA,AAAAA,AAoGYT;AApGZ,AAqGI,AAACoD,AAAKR,AAAYb,AAAEL;;AArGxBjB,AAoGkBsB,AAAEL;;;AApGpBjB,AAoGkBsB;;AApGlBtB,AAoGkBsB,AAAEL;;;;;;;;;;AApGpB,AAAA,AAAA,AAAA,AAAAjB,AAAAgC,AAAaC;;AAAb,AAAA,AAAAjC,AAAA;AAAA,AAAA,AAAA,AAAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAAE,AAAA8B;;;AAAA,AAAA,AAAA,AAAA,AAAaC,AAkGKX;;AAlGlB,AAAA,AAAA,AAkGY/B;AAlGZ,AAmGI,AAACoD,AAAKR,AAAYb;;;AAnGtB,AAAA,AAAA,AAAA,AAAaW,AAoGKX,AAAEL;;AApGpB,AAAA,AAAA,AAoGY1B;AApGZ,AAqGI,AAACoD,AAAKR,AAAYb,AAAEL;;;AArGxB,AAAA,AAAA,AAAagB;AAAb,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAAaA;;AAAb,AAAA,AAAA,AAAaA;;AAAb,AAAA,AAAA,AAAA1D,AAAAC,AAAAC,AAAawD;AAAb,AAAA,AAAAnJ,AAAA0F,AAAA;;;AAAA;;;AAAA,AAAa0D,AAAS3I,AAAU4I,AAAsBrD;AAAtD,AAAA,AAAAmD,AAAsB1I,AAAU4I,AAAsBrD;;;AAAzCmD,AAgIb,AAAA,AAAMuB,AAAgBxI,AAAGgB;AAAzB,AACE,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA9C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA+C,AAAA,AAAA,AAAAA,AAAYpB,AAAAA,AAAQmB,AAAAA,AAAAA,AAAAA,AAAAA;AACtB,AAACpB,AAAgBoB,AAAEhB;;AACnB,AAAO,AAAA,AAAA,AAAA,AAAA,AAACyI,AAAkDzH,AAAMhB;;;AACpE,AAAA,AAAA,AAAA0I,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAAUhJ,AAAKoJ;AAArB,AAA2B,AAAAjE,AAAA,AAAUnF,AAAG,AAACqJ,AAAID;;;AAA7C,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAA7I,AAAA4I;AAAAA,AAAA,AAAArH,AAAAqH;AAAA,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAAD,AAAAD;;;AAAA,AACA,AAAA,AAAA,AAAAP,AAAMY;AAAN,AAAA,AAAAX,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAW,AAAA,AAAA,AAAA,AAAAR;;;AAAA,AAAA,AAAA,AAAA,AAAMQ,AAAUtJ,AAAKoJ;AAArB,AAA2B,AAAAnC,AAAA,AAAUjH,AAAG,AAACyJ,AAAIL;;;AAA7C,AAAA,AAAA,AAAME;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAnJ,AAAAkJ;AAAAA,AAAA,AAAA3H,AAAA2H;AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAAA,AAAAK,AAAAD;;;AAAA,AACA,AAAA,AAAMG,AAAU1I;AAAhB,AAAmB,AAAA0C,AAAA,AAAA,AAAA,AAAqB1C","names":["bfuncs.data/operations","bfuncs.data/infix-operator-strs","bfuncs.data/prefix-operator-strs","bfuncs.data/mathematica-operator-strs","bfuncs.data/pr-writer-mma","obj","writer","opts","G__67027","cljs.core._EQ_","cljs.core/-write","cljs.core/pr-writer","p__67028","map__67029","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","bfuncs.data/bool-op-pr-writer","operation","operands","mathematica","readably","cljs.core/pr-sequential-writer","o__27513__auto__","k__27514__auto__","cljs.core/contains?","cljs.core/name","bfuncs$data$IBoolOp$_operation$dyn","x__4428__auto__","m__4429__auto__","bfuncs.data/-operation","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","bfuncs$data$IBoolOp$_operands$dyn","bfuncs.data/-operands","bfuncs$data$IBoolOp$_replace_operands$dyn","bfuncs.data/-replace-operands","bfuncs$data$IBoolOp$_with_operation$dyn","bfuncs.data/-with-operation","bfuncs.data/IBoolOp","this","smap","op","bfuncs.data/hash-bool-unary","bun","cljs.core/hash-combine","cljs.core/hash","cljs.core/first","bfuncs.data/hash-bool-set","bset","temp__5733__auto__","s","cljs.core/seq","cljs.core/hash-unordered-coll","bfuncs.data/hash-bool-vec","bvec","cljs.core/hash-ordered-coll","bfuncs.data/replace-operands","x","cljs.core/native-satisfies?","bfuncs.data/operation","bfuncs.data/operands","bfuncs.data/precedence","G__67064","cljs.core/Keyword","bfuncs.data/scrape-top","cmp","coll","cljs.core/empty?","top","cljs.core/next","xs__27556__auto__","bfuncs.data/compare-bobj","y","ox","oy","f67115","p1__67074#","G__67116","G__67117","v__27657__auto__","G__67119","G__67120","G__67125","G__67126","e67146","cljs.core/compare","js/Object","e","cljs.core/boolean?","cljs.core/array?","cljs.core/count","tx","ty","cljs.core.disj","bfuncs.data/clj->js'","cljs.core/clj->js","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","bfuncs.data/BoolUnary","bfuncs.data/->BoolUnary","meta","operand","__hash","cljs.core/pr-str*","other","_","new-operation","replaced","o","cljs.core/type","h__4238__auto__","_coll","_o","new-meta","obj67180","obj67181","G__67179","obj67184","obj67185","cljs.core.pr_str","self__","args67214","cljs.core/aclone","bfuncs.data/BoolSet","bfuncs.data/->BoolSet","operand-set","cljs.core.into","cljs.core/empty","cljs.core.map","cljs.core.partial","conjd","cljs.core/-conj","cljs.core/-seq","cljs.core/-count","v","disjd","cljs.core/-disjoin","not-found","cljs.core/-lookup","terms-with-meta","cljs.core/-with-meta","cljs.core/-meta","k","cljs.core/-iterator","bfuncs.utils/mapa","cljs.core.sort","obj67216","obj67217","G__67215","cljs.core/meta","obj67220","obj67221","args67227","bfuncs.data/BoolVec","bfuncs.data/->BoolVec","operand-vec","cljs.core._indexOf","start","cljs.core._lastIndexOf","new-operands","cljs.core/peek","cljs.core/pop","n","cljs.core/-nth","assoc'd","cljs.core/-assoc","cljs.core/-contains-key?","cljs.core/-find","val","cljs.core/-assoc-n","_this","_x","obj67229","obj67230","G__67228","cljs.core.assoc_BANG_","bfuncs.data/with-operation","cljs.core.ex_info","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","bfuncs.data/bool-set","seq67234","G__67235","self__4723__auto__","keys","cljs.core/set","bfuncs.data/bool-vec","seq67236","G__67237","cljs.core/vec","bfuncs.data/bool-not"],"sourcesContent":["(ns bfuncs.data\r\n  (:require\r\n   [bfuncs.utils :refer [mapa map-into-array let-case if-first unless-zero bool-casep get' assoc-non-enumerable!]]\r\n   [clojure.set :as set]\r\n   [applied-science.js-interop :as j]))\r\n\r\n(def operations\r\n  {:TRUE {:dual :FALSE}\r\n   :FALSE {:dual :TRUE}\r\n   :NOT {:dual :NOT}\r\n   :OR {:assoc true\r\n        :comm true\r\n        :dist #{:XNOR :AND :CON :IMP}\r\n        :dual :AND},\r\n   :NOR {:assoc false\r\n         :comm true\r\n         :dist #{}\r\n         :dual :NAND},\r\n   :AND {:assoc true\r\n         :comm true\r\n         :dist #{:XOR :OR :NIMP :NCON}\r\n         :dual :OR},\r\n   :NAND {:assoc false\r\n          :comm true\r\n          :dist #{}\r\n          :dual :NOR}\r\n   :XOR {:assoc true\r\n         :comm true\r\n         :dist #{}\r\n         :dual :XNOR}\r\n   :XNOR {:assoc true\r\n          :comm true\r\n          :dist #{}\r\n          :dual :XOR}\r\n   :IMP {:assoc false\r\n         :comm false\r\n         :dist #{:XNOR :AND :CON :OR}\r\n         :dual :NCON}\r\n   :NIMP {:assoc false\r\n          :comm false\r\n          :dist #{}\r\n          :dual :CON}\r\n   :CON {:assoc false\r\n         :comm false\r\n         :dist #{}\r\n         :dual :NIMP}\r\n   :NCON {:assoc false\r\n          :comm false\r\n          :dist #{:AND :XOR :OR :NIMP}\r\n          :dual :IMP}})\r\n\r\n(def infix-operator-strs\r\n  {:OR \" || \",\r\n   :NOR \" !|| \",\r\n   :AND \" && \",\r\n   :NAND \" !&& \"\r\n   :XOR \" <+> \"\r\n   :XNOR \" <*> \"\r\n   :EQ \" <=> \"\r\n   :IMP \" ==> \"\r\n   :NIMP \" !==> \"\r\n   :CON \" <== \"\r\n   :NCON \" !<== \"})\r\n\r\n(def prefix-operator-strs\r\n  {:NOT \"!\"\r\n   :OR \"||\",\r\n   :NOR \"!||\",\r\n   :AND \"&&\",\r\n   :NAND \"!&&\"\r\n   :XOR \"<+>\"\r\n   :XNOR \"<*>\"\r\n   :EQ \"<=>\"\r\n   :IMP \"==>\"\r\n   :NIMP \"!==>\"\r\n   :CON \"<==\"\r\n   :NCON \"!<==\"})\r\n\r\n(def mathematica-operator-strs\r\n  {:NOT \"Not\"\r\n   :OR \"Or\",\r\n   :NOR \"Nor\",\r\n   :AND \"And\",\r\n   :NAND \"Nand\"\r\n   :XOR \"Xor\"\r\n   :XNOR \"Xnor\"\r\n   :IMP \"Implies\"\r\n   :EQ \"Equivalent\"\r\n   :NIMP \"(Not@*Implies)\"\r\n   :CON \"ReverseApplied[Implies]\"\r\n   :NCON \"(Not@*ReverseApplied[Implies])\"})\r\n\r\n(defn- pr-writer-mma [obj writer opts]\r\n  (case obj\r\n    true (-write writer \"True\")\r\n    false (-write writer \"False\")\r\n    (pr-writer obj writer opts)))\r\n\r\n(defn- bool-op-pr-writer [operation operands writer {:keys [mathematica readably] :as opts}]\r\n  (pr-sequential-writer writer\r\n                        (if mathematica pr-writer-mma pr-writer)\r\n                        (cond\r\n                          mathematica (str (get' mathematica-operator-strs operation (name operation))\r\n                                           \"[\")\r\n                          readably (str \"(\"\r\n                                        (get' prefix-operator-strs operation (name operation))\r\n                                        \" \")\r\n                          :else \"(\")\r\n                        (cond\r\n                          mathematica \", \"\r\n                          readably \" \"\r\n                          :else (get' infix-operator-strs operation (str \" ~\" (name operation) \"~ \")))\r\n                        (cond\r\n                          mathematica \"]\"\r\n                          :else \")\")\r\n                        opts operands))\r\n\r\n(defprotocol IBoolOp\r\n  (-operation [this])\r\n  (-operands [this])\r\n  (-replace-operands [this smap])\r\n  (-with-operation [this op]))\r\n\r\n(defn- hash-bool-unary [bun]\r\n  (hash-combine\r\n   (hash (-operation bun))\r\n   (hash (first bun))))\r\n\r\n(defn- hash-bool-set [bset]\r\n  (if-let [s (seq bset)]\r\n    (hash-combine\r\n     (hash (-operation bset))\r\n     (hash-unordered-coll s))\r\n    0))\r\n\r\n(defn- hash-bool-vec [bvec]\r\n  (if-let [s (seq bvec)]\r\n    (hash-combine\r\n     (hash (-operation bvec))\r\n     (hash-ordered-coll s))\r\n    0))\r\n\r\n(defn- replace-operands [smap x]\r\n  (if (satisfies? IBoolOp x)\r\n    (-replace-operands x smap)\r\n    (get smap x x)))\r\n\r\n(defn operation\r\n  \"Returns (-op x) if x satisfies IBoolOp, nil otherwise.\"\r\n  [x] (when (satisfies? IBoolOp x) (-operation x)))\r\n\r\n(defn operands [x]\r\n  (when (satisfies? IBoolOp x) (-operands x)))\r\n\r\n(defn precedence [op]\r\n  (case op\r\n    (:IMP :NIMP) 1\r\n    (:CON :NCON) 2\r\n    :EQ 3\r\n    (:OR :NOR) 4\r\n    (:XOR :XNOR) 5\r\n    (:AND :NAND) 6\r\n    :NOT 7\r\n    nil))\r\n\r\n(defn- scrape-top [cmp coll]\r\n  (if (empty? coll)\r\n    nil\r\n    (loop [top (first coll)\r\n           coll (next coll)]\r\n      (if-first [x coll]\r\n        (recur (if (pos? (cmp top x)) x top)\r\n               (next coll))\r\n        top))))\r\n\r\n(defn compare-bobj [x y]\r\n  (if (= x y)\r\n    0\r\n    (let [ox (operation x), oy (operation y)]\r\n      (bool-casep #(= :NOT %) [ox oy]\r\n        [true true] (compare-bobj (first x) (first y))\r\n        [true false] (unless-zero (compare-bobj (first x) y) 1)\r\n        [false true] (unless-zero (compare-bobj x (first y)) -1)\r\n        [false false]\r\n        (bool-casep nil? [ox oy]\r\n          [true true] (try (compare x y)\r\n                           (catch js/Object e\r\n                             (cond\r\n                               (boolean? x) -1\r\n                               (boolean? y) 1\r\n                               (string? x) -1\r\n                               (string? y) 1\r\n                               (number? x) -1\r\n                               (number? y) 1\r\n                               (array? x) -1\r\n                               (array? y) 1\r\n                               :else 0)))\r\n          [true false] -1\r\n          [false true] 1\r\n          [false false]\r\n          (unless-zero (compare (precedence ox) (precedence oy))\r\n            (unless-zero (compare (count x) (count y))\r\n              (loop [x x, y y]\r\n                (bool-casep empty? [x y]\r\n                  [true true] 0\r\n                  [true false] -1\r\n                  [false true] 1\r\n                  (let [tx (scrape-top compare-bobj x)\r\n                        ty (scrape-top compare-bobj y)]\r\n                    (unless-zero (compare-bobj tx ty)\r\n                      (recur (disj x tx) (disj y ty)))))))))))))\r\n\r\n\r\n(defn- clj->js' [x]\r\n  (if (not (satisfies? IBoolOp x))\r\n    #js[\"var\" (clj->js x)]\r\n    (clj->js x)))\r\n\r\n(deftype ^js BoolUnary [meta operation operand ^:mutable __hash]\r\n  Object\r\n  (toString [this] (pr-str* this))\r\n  (equiv [this other]\r\n    (-equiv this other))\r\n\r\n  IBoolOp\r\n  (-operation [_] :NOT)\r\n  (-operands [_] [operand])\r\n  (-with-operation [this new-operation]\r\n    (if (= operation new-operation)\r\n      this\r\n      (BoolUnary. meta new-operation operand nil)))\r\n  (-replace-operands [this smap]\r\n    (let [replaced (replace-operands smap operand)]\r\n      (if (identical? operand replaced)\r\n        this\r\n        (BoolUnary. meta operation replaced nil))))\r\n\r\n  IEquiv\r\n  (-equiv [o other]\r\n    (and (= (type o) (type other))\r\n         (= operand (first other))))\r\n\r\n  IHash\r\n  (-hash [coll] (caching-hash coll hash-bool-unary __hash))\r\n\r\n  ISeq\r\n  (-first [_] operand)\r\n  (-rest [_] ())\r\n\r\n  ISeqable\r\n  (-seq [_coll] [operand])\r\n\r\n  INext\r\n  (-next [_] nil)\r\n\r\n  ICounted\r\n  (-count [_] 1)\r\n\r\n  IPrintWithWriter\r\n  (-pr-writer [_o writer opts]\r\n    (if (:readably opts)\r\n      (do (-write writer \"(! \")\r\n          (pr-writer operand writer opts)\r\n          (-write writer \")\"))\r\n      (do (-write writer \"!\")\r\n          (pr-writer operand writer opts))))\r\n\r\n\r\n  IWithMeta\r\n  (-with-meta [o new-meta]\r\n    (if (identical? meta new-meta)\r\n      o\r\n      (BoolUnary. new-meta operation operand __hash)))\r\n\r\n  IMeta\r\n  (-meta [_] meta)\r\n\r\n  IEncodeJS\r\n  (-clj->js [_]\r\n    (-> #js[(clj->js operand)]\r\n        (j/assoc! :operation (clj->js operation))\r\n        (cond-> meta (j/assoc! :meta (clj->js meta))))\r\n\r\n   #_(if (some? meta)\r\n       (assoc-non-enumerable! #js[(clj->js operand)]\r\n         :operation (name operation)\r\n         :meta (clj->js meta))\r\n       (assoc-non-enumerable! #js[(clj->js operand)]\r\n         :operation (name operation))))\r\n  #_(-clj->js [_] (clj->js' operand)\r\n              #js[(name operation) (clj->js' operand)])\r\n  (-key->js [x] (pr-str x))\r\n  )\r\n\r\n(deftype ^js BoolSet [operation operand-set ^:mutable __hash]\r\n\r\n  Object\r\n  (toString [this] (pr-str* this))\r\n  (equiv [this other] (-equiv this other))\r\n\r\n  IBoolOp\r\n  (-operation [_] operation)\r\n  (-operands [_] operand-set)\r\n  (-with-operation [this new-operation]\r\n    (if (= new-operation operation)\r\n      this\r\n      (BoolSet. new-operation operand-set nil)))\r\n  (-replace-operands [_ smap]\r\n    (BoolSet. operation\r\n              (into (empty operand-set)\r\n                    (map (partial replace-operands smap))\r\n                    operand-set)\r\n              nil))\r\n\r\n  IEquiv\r\n  (-equiv [o other]\r\n    (and (= (type o) (type other))\r\n         (= operation (-operation other))\r\n         (= operand-set (-operands other))))\r\n\r\n  IHash\r\n  (-hash [coll] (caching-hash coll hash-bool-set __hash))\r\n\r\n  ICollection\r\n  (-conj [coll o]\r\n    (let [conjd (-conj operand-set o)]\r\n      (if (identical? operand-set conjd)\r\n        coll\r\n        (BoolSet. operation conjd nil))))\r\n\r\n  ISequential\r\n  ISeqable\r\n  (-seq [_coll] (-seq operand-set))\r\n\r\n  ICounted\r\n  (-count [_coll] (-count operand-set))\r\n\r\n  ISet\r\n  (-disjoin [coll v]\r\n    (let [disjd (-disjoin operand-set v)]\r\n      (if (identical? disjd operand-set)\r\n        coll\r\n        (BoolSet. operation disjd nil))))\r\n\r\n  ILookup\r\n  (-lookup [coll v]\r\n    (-lookup coll v nil))\r\n  (-lookup [_coll v not-found]\r\n    (-lookup operand-set v not-found))\r\n\r\n  IWithMeta\r\n  (-with-meta [coll new-meta]\r\n    (let [terms-with-meta (-with-meta operand-set new-meta)]\r\n      (if (identical? operand-set terms-with-meta)\r\n        coll\r\n        (BoolSet. operation terms-with-meta __hash))))\r\n\r\n  IMeta\r\n  (-meta [_] (-meta operand-set))\r\n\r\n  IPrintWithWriter\r\n  (-pr-writer [_o writer opts]\r\n    (bool-op-pr-writer operation operand-set writer opts))\r\n\r\n  IFn\r\n  (-invoke [_coll k]\r\n    (-lookup operand-set k))\r\n  (-invoke [_coll k not-found]\r\n    (-lookup operand-set k not-found))\r\n\r\n  ICloneable\r\n  (-clone [_] (BoolSet. operation operand-set __hash))\r\n\r\n  IIterable\r\n  (-iterator [_] (-iterator operand-set))\r\n\r\n  IEncodeJS\r\n  (-clj->js [_]\r\n    (-> (mapa clj->js (sort compare-bobj operand-set))\r\n        (j/assoc! :operation (clj->js operation))\r\n        (cond-> (meta operand-set) (j/assoc! :meta (clj->js (meta operand-set))))))\r\n\r\n  #_(-clj->js [_]\r\n              (map-into-array clj->js'\r\n                              #js[(name operation)]\r\n                              (sort compare-bobj operand-set)))\r\n  #_(-clj->js [_]\r\n              (if-some [m (meta operand-set)]\r\n                (assoc-non-enumerable! (mapa clj->js (sort compare-bobj operand-set))\r\n                  :operation (name operation)\r\n                  :meta (clj->js m))\r\n                (assoc-non-enumerable! (mapa clj->js (sort compare-bobj operand-set))\r\n                  :operation (name operation))))\r\n  (-key->js [x] (pr-str x)))\r\n\r\n\r\n\r\n(deftype ^js BoolVec [operation operand-vec ^:mutable __hash]\r\n\r\n  Object\r\n  (toString [coll]\r\n    (pr-str* coll))\r\n  (equiv [this other]\r\n    (-equiv this other))\r\n  (indexOf [_coll x]\r\n    (-indexOf operand-vec x 0))\r\n  (indexOf [_coll x start]\r\n    (-indexOf operand-vec x start))\r\n  (lastIndexOf [_coll x]\r\n    (-lastIndexOf operand-vec x (count operand-vec)))\r\n  (lastIndexOf [_coll x start]\r\n    (-lastIndexOf operand-vec x start))\r\n\r\n  IBoolOp\r\n  (-operation [_] operation)\r\n  (-operands [_] operand-vec)\r\n  (-with-operation [this new-operation]\r\n    (if (= new-operation operation)\r\n      this\r\n      (BoolVec. new-operation operand-vec nil)))\r\n  (-replace-operands [_ smap]\r\n    (BoolVec. operation\r\n              (into (empty operand-vec)\r\n                    (map (partial replace-operands smap))\r\n                    operand-vec)\r\n              nil))\r\n\r\n  ICloneable\r\n  (-clone [_] (BoolVec. operation operand-vec hash))\r\n\r\n  IWithMeta\r\n  (-with-meta [coll new-meta]\r\n    (let [new-operands (-with-meta operand-vec new-meta)]\r\n      (if (identical? operand-vec new-operands)\r\n        coll\r\n        (BoolVec. operation new-operands __hash))))\r\n\r\n  IMeta\r\n  (-meta [_coll] (-meta operand-vec))\r\n\r\n  IStack\r\n  (-peek [_coll] (peek operand-vec))\r\n  (-pop [_coll] (BoolVec. operation (pop operand-vec) nil))\r\n\r\n  ICollection\r\n  (-conj [_coll o]\r\n    (BoolVec. operation (-conj operand-vec o) nil))\r\n\r\n  ISequential\r\n\r\n  IEquiv\r\n  (-equiv [coll other]\r\n    (and (= (type coll) (type other))\r\n         (= operation (-operation other))\r\n         (= operand-vec (-operands other))))\r\n\r\n\r\n  IHash\r\n  (-hash [coll] (caching-hash coll hash-bool-vec __hash))\r\n\r\n  ISeqable\r\n  (-seq [_coll] (-seq operand-vec))\r\n\r\n  ICounted\r\n  (-count [_coll] (-count operand-vec))\r\n\r\n  IIndexed\r\n  (-nth [_coll n]\r\n    (-nth operand-vec n))\r\n  (-nth [_coll n not-found]\r\n    (-nth operand-vec n not-found))\r\n\r\n  ILookup\r\n  (-lookup [_coll k] (-lookup operand-vec k nil))\r\n  (-lookup [_coll k not-found] (-lookup operand-vec k not-found))\r\n\r\n  IAssociative\r\n  (-assoc [coll k v]\r\n    (let [assoc'd (-assoc operand-vec k v)]\r\n      (if (identical? assoc'd operand-vec)\r\n        coll\r\n        (BoolVec. operation assoc'd nil))))\r\n  (-contains-key? [_coll k] (-contains-key? operand-vec k))\r\n\r\n  IFind\r\n  (-find [_coll n] (-find operand-vec n))\r\n\r\n  IVector\r\n  (-assoc-n [coll n val]\r\n    (let [assoc'd (-assoc-n operand-vec n val)]\r\n      (if (identical? assoc'd operand-vec)\r\n        coll\r\n        (BoolVec. operation assoc'd nil))))\r\n\r\n  IFn\r\n  (-invoke [_coll k]\r\n    (-nth operand-vec k))\r\n  (-invoke [_coll k not-found]\r\n    (-nth operand-vec k not-found))\r\n\r\n  IIterable\r\n  (-iterator [_this] (-iterator operand-vec))\r\n\r\n  IPrintWithWriter\r\n  (-pr-writer [_o writer opts] (bool-op-pr-writer operation operand-vec writer opts))\r\n\r\n  IEncodeJS\r\n  #_(-clj->js [_] (map-into-array clj->js'\r\n                                  #js[(name operation)]\r\n                                  operand-vec))\r\n  (-clj->js [_x]\r\n    (-> (mapa clj->js operand-vec)\r\n        (j/assoc! :operation (clj->js operation))\r\n        (cond-> (meta operand-vec)\r\n                (assoc! :meta (clj->js (meta operand-vec)))))\r\n   )\r\n  (-key->js [x] (pr-str x))\r\n  #_(-clj->js [_x]\r\n              (if-some [m (meta operand-vec)]\r\n                (assoc-non-enumerable! (mapa clj->js operand-vec)\r\n                  :operation (name operation)\r\n                  :meta (clj->js m))\r\n                (assoc-non-enumerable! (mapa clj->js operand-vec)\r\n                  :operation (name operation)))))\r\n\r\n(defn with-operation [op x]\r\n  (if (satisfies? IBoolOp x)\r\n    (-with-operation x op)\r\n    (throw (ex-info \"Cannot set operation on non IBoolOp\" {:x x :op op}))))\r\n(defn bool-set [op & keys] (BoolSet. op (set keys) nil))\r\n(defn bool-vec [op & keys] (BoolVec. op (vec keys) nil))\r\n(defn bool-not [x] (BoolUnary. nil :NOT x nil))\r\n"]}