{"version":3,"sources":["bfuncs/app.cljs"],"mappings":";;;;AAsCA,AAAA,AAAeA;AACf,AAAeC,AAAe,AAACC,AAAsBF;AACrD,AAAA,AAAAG,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAuB,AAAA,AAACC;;AACjC,AAAA,AAAAJ,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAiB,AAAA,AAAA,AAAA,AAACF;;AAC3B,AAAA,AAAAJ,AAAAC,AAAAM;AAAA;AAAA,AAAA,AAASC,AAAmB,AAAA,AAACJ;;AAC7B,AAAA,AAAAJ,AAAAC,AAAAQ;AAAA;AAAA,AAAA,AAASC,AAAkB,AAAA,AAACN;;AAC5B,AAAA,AAAAJ,AAAAC,AAAAU;AAAA;AAAA,AAAA,AAASC,AAAqB,AAAA,AAACR;;AAC/B,AAAA,AAAAJ,AAAAC,AAAAY;AAAA;AAAA,AAAA,AAASC,AAAe,AAAA,AAACV;;AACzB,AAAA,AAAAJ,AAAAC,AAAAc;AAAA;AAAA,AAAA,AAASC,AAAc,AAAA,AAACZ;;AACxB,AAAA,AAAAJ,AAAAC,AAAAgB;AAAA;AAAA,AAAA,AAASC,AAAc,AAAA,AAACd;;AACxB,AAAA,AAAAJ,AAAAC,AAAAkB;AAAA;AAAA,AAAA,AAASC,AAAK,AAAA,AAAChB;;AAEf,AAAA,AAAMiB,AACHC;AADH,AAEE,AAAA,AAACC,AAAMD,AACAE,AACO,AAAA,AAAAC,AAACC,AAAe,AAAA,AAAA,AAAAD,AAASH,AAAQhB;;AAEjD,AAAA,AAAAN,AAAAC,AAAA0B;AAAA;AAAA,AAAA,AAASC,AAAiB,AAAA,AAACxB;;AAC3B,AAAA,AAAAJ,AAAAC,AAAA4B;AAAA;AAAA,AAAA,AAASC,AAAqB,AAAA,AAAC1B;;AAE/B,AAAA,AAAAJ,AAAAC,AAAA8B;AAAA;AAAA,AAAA,AAASC,AAAa,AAAA,AAAC5B;;AAEvB,AAAA,AAAA6B,AAAOM;AAAP,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA4BZ;AAA5B,AAAAgB,AAAAJ,AAAA,AAAkCM;AAAlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC,AAAmB,AAAAC,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AACa,AAAAD,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AACb,AAAA,AAAA,AAAAlB,AAASH,AACTkB,AAKI,AAAKI;AAAL,AACE,AAAA,AAACrB,AAAMD,AAAME,AAAa,AAACqB,AAAYD;;AACvC,AAACvB,AAAkBC;AAX/C;;AAgBA,AAAA,AAAAtB,AAAAC,AAAA6C;AAAA;AAAA,AAAA,AAASC,AAAmB,AAAA,AAAC3C;;AAE7B,AAAA,AAAA4C,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAd,AAAA,AAAAc,AAAA,AAAA,AAAA,AAAA,AAAAb,AAAAC,AAAAY,AAAAA;AAAA,AAAAX,AAAAW,AAAA,AAA6BE;AAA7B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC,AAAa,AAAAV,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AACZU,AAAqB,AAAAC,AAAA,AAAA7B,AAAAkB;AAAA,AAAA,AAAAD,AAAA,AAAAJ,AAAAgB,AAAA,AAAA,AAAAhB,AAAAgB,AAAA;AAFzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA7B,AAKK8B,AACAC,AAAmB,AAAAd,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AAElBnC,AACF,AAAMkD,AAAE,AAAA,AAAAjC,AAACkC,AAAOjD;AAAhB+C,AAAA,AAAAhC,AACmCK;AADnC2B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAArB,AAAAC,AAAAoB,AAAAA;AAAA,AAAAnB,AAAAmB,AAAA,AACcG;AADd,AAAAtB,AAAAmB,AAAA,AACoBI;AADpB,AAAA,AAAA,AAGG,AAAA,AAAA,AAAMD,AACHE,AAAG,AAAAC,AAAQH;AAARI,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAC,AAAAD;AAJT,AAAA,AAAA,AAAA,AAAA,AAGG,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMF,AACAI,AAAoB,AAAAvB,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AACCkB,AAE1BN,AACD,AAAAW,AAAA,AAAAzC,AAA6BG;AAA7B,AAAA,AAAA,AAAAsC,AAAA;AAAA;;AAAA,AAAAA,AAAYC;AAAZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACMC,AAAeD,AACIT,AAEA,AAAAhB,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AACE,AAAA,AAAIe,AACJ,AAAA,AAAIA;;;;AA1BrC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AA4BK8B,AACAc,AAAyB7D,AAGxB8D,AAC+BtD,AAC/BsD,AAC+BpD,AAChC,AAAAqD,AAAA,AAAA9C,AAAeL;AAAf,AAAA,AAAA,AAAAmD,AAAA;AAAA;;AAAA,AAAAA,AAAUC;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AACEF,AAC8B,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAQD;;;;AAE7C,AAAA,AAAOE,AAAoBC,AAAMC;AAAjC,AACE,AAAMD;AAAN,AACE,AAAAE,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAAC;AAAAJ,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAAK,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAC,AAAAN,AAAA,AAAkBpF;;AAAlB,AAAA,AAAAqF,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAO,AAAA,AAAAP,AAAA;AAAAO,AAAA,AAAAP,AAAA;AAAAQ,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAC,AAAAR;AAAAS,AAAAR;AAAAI,AAAU6D;AAAVxD,AAAAL;AAAA1B,AAAA0B;AAAAzB,AAAA0B;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAF;AAAAG,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAC,AAAAF,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAG;;;AAAA,AAAA,AAAA,AAAAC,AAAAT,AAAA,AAAAU,AAAA,AAAAC,AAAAR;AAAAS,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAN,AAAAK,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAJ;;;AAAA,AAAA,AAAAtC,AAAUuF;AAAVtF,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAA4C;;AAAA,AAAA,AAAAL,AAAA,AAAAM,AAAAZ;AAAAa,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAV,AAAAS,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAR;;AAAA;AAAA,AAAA,AAAAU,AAAA,AAAAf;;AAAA,AAAAgB,AAAApB,AAAA,AAAAqB,AAAAjB;AAAAkB,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAf,AAAAc,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAb;;;;;AAAA;;;;AAAAe,AAAA,AAAA1B,AAAAD,AAAA,AAAAE;AAAA0B,AAAA,AAAA5B,AAAA;AAAA6B,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA9C;AAAA+C,AAAA,AAC8B5C,AAAKD;AADnC8C,AAAA,AAAAhD,AAAA,AAAA,AAAA,AAAA8C,AAAAC,AAAA;AAAAE,AAAA,AAAArC;AAAAsC,AAAA,AAAAF,AAAAC,AAAA;AAAAE,AAAA,AAAAC,AAAAP,AAAAK;AAAAG,AAAA,AAAAC,AAAAH;AAAAI,AAAA,AAAAX,AAAA5B,AAAAqC;AAAA5C,AAAA,AAAA+C,AAAA/C;AAAA,AAAA,AAAA+C,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAAb;;AAAA,AAAAa,AAAA,AAAAxC;;AAAAwC;;AAAA,AAAA,AAAAzC,AAAAN,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAM,AAAA,AAAAP,AAAA;AAAAgD,AAAA,AAAAhD,AAAA;AAAAiD,AAAA,AAAAD,AAEGqB,AAAOvI;AAFVoH,AAAA,AAAApB,AAAAvB,AAAkB3F;AAAlBoF,AAAA,AAAAmD,AAAAnD;AAAA,AAAA,AAAAmD,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAAC,AAAApD,AAAAiD;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAArD;;AAAA,AAAA,AAAAuD,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAzD,AAAAC;AAAA,AAAA,AAAA,AAAAyD,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAA5D;AAAA,AAAA,AAAA4D,AAAA,AAAAF;;AAAAE;AAAA,AAAA,AAAAC,AAAA,AAAA7D,AAAA;AAAA,AAAA8D,AAAA9D;AAAA,AAAA,AAAA8D,AAAA,AAAA,AAAAC,AAAA,AAAA/D,AAAA;;AAAA8D;AAAA,AAAAJ;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAvD;;;;AAAAuD;;;;;AAAAvD;;;;;AAAAA;;;;;;;;;AAAAgE,AAAA,AAAAC,AAAA,AAAAnE;AAAA,AAAA,AAAAmE,AAAAC,AAAA,AAAAvE;;AAAAsE;;AAAA,AAAA,AAAAE,AAAAH;;;AAAArE;AAGA,AAAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAuE;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA5E,AAAA;AAAA6E,AAAA,AAAArE;AAAAkE,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAApE,AAAAgE,AAAA,AAAkB1J;;AAAlB,AAAA,AAAA2J,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAnE,AAAA8D;AAAA7D,AAAA8D;AAAAE,AAAUP;AAAVU,AAAAH;AAAA9F,AAAA8F;AAAA7F,AAAA8F;AAAA,AAAA,AAAA/D;AAAA,AAAA,AAAAC,AAAA,AAAAiE,AAAAlE;AAAAmE,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA/D,AAAA8D,AAAAC;;AAAA,AAAAF,AAAAC;;AAAA7D;;;AAAA,AAAA,AAAA,AAAAC,AAAAT,AAAA,AAAAU,AAAA,AAAA6D,AAAApE;AAAAqE,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAlE,AAAAiE,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAhE;;;AAAA,AAAA,AAAAtC,AAAUuF;AAAVtF,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAA4C;;AAAA,AAAA,AAAAL,AAAA,AAAAiE,AAAAvE;AAAAwE,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAArE,AAAAoE,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAnE;;AAAA;AAAA,AAAA,AAAAU,AAAA,AAAAf;;AAAA,AAAAgB,AAAApB,AAAA,AAAA8E,AAAA1E;AAAA2E,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAxE,AAAAuE,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAtE;;;;;AAAA;;;;AAAAwE,AAAA,AAAAf,AAAAD,AAAA,AAAAE;AAAAe,AAAA,AAAAjB,AAAA;AAAAkB,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAAvG;AAAAwG,AAAA,AAC8BrG,AAAKD;AADnCuG,AAAA,AAAAzG,AAAA,AAAA,AAAA,AAAAuG,AAAAC,AAAA;AAAAE,AAAA,AAAAxB;AAAAyB,AAAA,AAAAF,AAAAC,AAAA;AAAAE,AAAA,AAAAxD,AAAAkD,AAAAK;AAAAE,AAAA,AAAAvD,AAAAsD;AAAAE,AAAA,AAAAT,AAAAjB,AAAAyB;AAAA9B,AAAA,AAAAgC,AAAAhC;AAAA,AAAA,AAAAgC,AAAA,AAAAX;;AAAA,AAAAW,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA3B;;AAAA2B;;AAAA,AAAA,AAAAhG,AAAAgE,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAiC,AAAA,AAAAjC,AAAA;AAAAkC,AAAA,AAAAD,AAEGlC,AAAOrI;AAFVyK,AAAA,AAAA3E,AAAA6C,AAAkB/J;AAAlB0J,AAAA,AAAAoC,AAAApC;AAAA,AAAA,AAAAoC,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAAtD,AAAAkB,AAAAkC;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAArD;;AAAA,AAAAqD,AAAA,AAAA;;AAAAA;;AAAArC;;AAAA,AAAA,AAAAf,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAzD,AAAAuE;AAAA,AAAA,AAAA,AAAAb,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAkD;AAAA,AAAA,AAAAC,AAAAvC;AAAA,AAAA,AAAAuC,AAAA,AAAAnD;;AAAAmD;AAAA,AAAA,AAAAhD,AAAA,AAAAS,AAAA;AAAA,AAAAwC,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAA,AAAA/C,AAAA,AAAAO,AAAA;;AAAAwC;AAAA,AAAApD;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAe;;;;AAAAf;;;;;AAAAe;;;;;AAAAA;;;;;;;;;AAAAN,AAAA,AAAA+C,AAAA,AAAAjH;AAAA,AAAA,AAAAiH,AAAA7C,AAAA,AAAAvE;;AAAAoH;;AAAA,AAAA,AAAA5C,AAAAH;;;AAAArE;;AAJF;;;AAQF,AAAA,AAAAqH,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhK,AAAA,AAAAgK,AAAA,AAAA,AAAA,AAAA,AAAA/J,AAAAC,AAAA8J,AAAAA;AAAA,AAAA7J,AAAA6J,AAAA,AAA+BE;AAA/B,AAAA/J,AAAA6J,AAAA,AAAoCvH;AAApC,AAAAtC,AAAA6J,AAAA,AAAyCG;AAAzC,AAAAhK,AAAA6J,AAAA,AAA8CI;AAA9C,AACE,AAAAC,AAAMH;AAANG,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAGE,AAAMG,AAAM,AAAChJ,AAAMiB;AAAnB,AACE,AAAC2E,AAAO7I,AAAkBkE;;AAC1B,AAAC2E,AAAO/I,AAAmB8L;;AAC3B,AAAAzH,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA2H;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD;AAAAE,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAH;AAAAI,AAAA,AAAA/K,AAAA8K;AAAAE,AAAA,AAAAH,AAAAE;AAAAN,AAAAA;AAAA,AAAA,AAAA,AAAAO;AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAT;AAAA,AAAA,AAAAS,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAR,AAAA;AAAA,AAAAS,AAAA,AAAAxI,AAAA;AAAAyI,AAAA,AAAAjI;AAAAsH,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAAhI,AAAAoH,AAAA,AAAkB9M;;AAAlB,AAAA,AAAA+M,AAAA;AAAA,AAAAY,AAAA,AAAAb,AAAA;AAAAc,AAAA,AAAAD,AAKK/I,AAAyBE;AAL9BgI,AAAAA;AAAA,AAAA,AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAd,AAAA;AAAA,AAAAe,AAAA,AAAAhB,AAAA;AAAAiB,AAAA,AAAAjB,AAAA;AAAAiB,AAAA,AAAAjB,AAAA;AAAAgB,AAAA,AAAAtL,AAAAuL,AAAA;AAAAC,AAAA,AAAAxL,AAAAuL,AAAA;AAAAjB,AAAA,AAAAmB,AAAAnB;AAAA,AAAA,AAAAmB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA,AAAAH;AAAA,AAAAI,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAApB,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAsB,AAAA,AAAA9L,AAAAC,AAAAyK;AAAAF,AAAAA;AAAA,AAAA,AAAA,AAAAuB,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAtB,AAAA;AAAA,AAAAY,AAAA,AAAAb,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAwB,AAAA,AAAAxB,AAAA;AAAAyB,AAAA,AAAA,AASkD1B;AATlD2B,AAAA,AAAAb,AAAAY,AASqBkH,AAAmB5I;AATxC4B,AAAA,AAAAD,AAAA,AAAA,AAUqBkH;AAVrB1I,AAAA,AAAAyB,AAOShF,AAAOzH;AAPhB0M,AAAA,AAAA1B,AAAA;AAAA2B,AAAA,AAAAC,AAAAF;AAAA5B,AAAA,AAAA+B,AAAA/B;AAAA,AAAA,AAAA+B,AAAA,AAAA7B;;AAAA,AAAA6B,AAAA,AAAAP;;AAAAO;;AAAA,AAAA,AAAA,AAAAF;AAAA,AAAAG,AAAAhC;AAAA,AAAA,AAAAgC,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAjC;AAAA,AAAA,AAAAiC,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAhC,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAkC,AAAAlC;AAAA,AAAA,AAAAkC,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAjC,AAAA;AAAA,AAAAY,AAAA,AAAAb,AAAA;AAAAa,AAAA,AAAAb,AAAA;AAAAmC,AAAA,AAAA,AAEGxF,AAAOzI;AAFVkO,AAAA,AAAAvB,AAGGlE,AAAO3H;AAHVgL,AAAA,AAAAqC,AAAArC;AAAA,AAAA,AAAAqC,AAAA,AAAAxB;;AAAA,AAAAwB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA,AAAAxB;AAAA,AAAAyB,AAAAtC;AAAA,AAAA,AAAAsC,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAvC;AAAA,AAAA,AAAAuC,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAtC,AAAA;AAAA,AAAAuC,AAAA,AAAAxC,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAyC,AAAAzC;AAAA,AAAA,AAAAyC,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAxC,AAAA;AAAA,AAAAyC,AAAA,AAAA1C,AAAA;AAAAU,AAAA,AAAAV,AAAA;AAAAW,AAAA,AAAAX,AAAA;AAAA0C,AAAA,AAAA1C,AAAA;AAAA2C,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAA5J,AAAA0H;AAAAzH,AAAA0H;AAAA+B,AAAUhG;AAAVmG,AAAAH;AAAAvL,AAAAuL;AAAAtL,AAAAuL;AAAA,AAAA,AAAAxJ;AAAA,AAAA,AAAAC,AAAA,AAAA0J,AAAA3J;AAAA4J,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAxJ,AAAAuJ,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAtJ;;;AAAA,AAAA,AAAA,AAAAC,AAAAT,AAAA,AAAAU,AAAA,AAAAsJ,AAAA7J;AAAA8J,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA3J,AAAA0J,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAzJ;;;AAAA,AAAA,AAAAtC,AAAUuF;AAAVtF,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAA4C;;AAAA,AAAA,AAAAL,AAAA,AAAA0J,AAAAhK;AAAAiK,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA9J,AAAA6J,AAAAC;;AAAA,AAAAF,AAAAC;;AAAA5J;;AAAA;AAAA,AAAA,AAAAU,AAAA,AAAAf;;AAAA,AAAAgB,AAAApB,AAAA,AAAAuK,AAAAnK;AAAAoK,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAjK,AAAAgK,AAAAC;;AAAA,AAAAF,AAAAC;;AAAA/J;;;;;AAAA;;;;AAAAiK,AAAA,AAAAf,AAAAD,AAAA,AAAAE;AAAAe,AAAA,AAAAjB,AAAA;AAAAkB,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAAhM;AAAAiM,AAAA,AACkC0E,AAAaxQ,AAAK0H;AADpDqE,AAAA,AAAAD,AAC0D/D;AAD1DiE,AAAA,AAAAnM,AAAA,AAAA,AAAA,AAAAgM,AAAAE,AAAA;AAAAE,AAAA,AAAAtD;AAAAuD,AAAA,AAAAF,AAAAC,AAAA;AAAAE,AAAA,AAAAlJ,AAAA2I,AAAAM;AAAAE,AAAA,AAAAjJ,AAAAgJ;AAAAE,AAAA,AAAAV,AAAAjB,AAAA0B;AAAApE,AAAA,AAAAsE,AAAAtE;AAAA,AAAA,AAAAsE,AAAA,AAAA5B;;AAAA,AAAA4B,AAAA,AAAAZ;;AAAA,AAAAY,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA1L,AAAAoH,AAAA,AAAAU;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAuE,AAAAvE;AAAA,AAAA,AAAAuE,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAtE,AAAA;AAAA,AAAAuE,AAAA,AAAAxE,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAwE;AAAA,AAAAC,AAAAzE;AAAA,AAAA,AAAAyE,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA1E;AAAA,AAAA,AAAA0E,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAzE,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAA2E,AAAA3E;AAAA,AAAA,AAAA2E,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA1E,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA4E,AAAA5E;AAAA,AAAA,AAAA4E,AAAA,AAAA1E;;AAAA,AAAA0E,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA3E,AAAA;AAAA,AAAAY,AAAA,AAAAb,AAAA;AAAAkB,AAAA,AAAAlB,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAA0C,AAAA,AAAA1C,AAAA;AAAAiB,AAAA,AAAAjB,AAAA;AAAAU,AAAA,AAAAV,AAAA;AAAAW,AAAA,AAAAX,AAAA;AAAA6E,AAAA,AAAA3M,AAAA;AAAA4M,AAAA,AAAA9L,AAAA0H;AAAAzH,AAAA0H;AAAA+B,AAAUhG;AAAVmE,AACU9I;AADVgN,AAAA9D;AAAAD,AAMgByH;AANhBvH,AAMgCwH;AANhCzQ,AAAA4M;AAAA,AAAA;AAAA,AAAA,AAAAzM,AAAA,AAAAC,AAAA,AAAA2M;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAhN,AAAA;AAAAiN,AAAA,AAAAzM;AAAAsM,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAAxM,AAAAoM,AAAA,AAYwB9R;;AAZxB,AAAA,AAAA+R,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAvM,AAAAkM;AAAAjM,AAAAkM;AAAAE,AAYgB3I;AAZhB8I,AAAAH;AAAAlO,AAAAkO;AAAAjO,AAAAkO;AAAA,AAAA,AAAAnM;AAAA,AAAA,AAAAC,AAAA,AAAAqM,AAAAtM;AAAAuM,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAnM,AAAAkM,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAjM;;;AAAA,AAAA,AAAA,AAAAC,AAAAT,AAAA,AAAAU,AAAA,AAAAiM,AAAAxM;AAAAyM,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAtM,AAAAqM,AAAAC;;AAAA,AAAAF,AAAAC;;AAAApM;;;AAAA,AAAA,AAAAtC,AAYgBuF;AAZhBtF,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAA4C;;AAAA,AAAA,AAAAL,AAAA,AAAAqM,AAAA3M;AAAA4M,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAzM,AAAAwM,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAvM;;AAAA;AAAA,AAAA,AAAAU,AAAA,AAAAf;;AAAA,AAAAgB,AAAApB,AAAA,AAAAkN,AAAA9M;AAAA+M,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA5M,AAAA2M,AAAAC;;AAAA,AAAAF,AAAAC;;AAAA1M;;;;;AAAA;;;;AAAA4M,AAAA,AAAAf,AAAAD,AAAA,AAAAE;AAAAe,AAAA,AAAAjB,AAAA;AAAAkB,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA3O;AAAA4O,AAAA,AAa0CzO,AAAK0Q;AAb/ChC,AAAA,AAAA7O,AAAA,AAAA,AAAA,AAAA2O,AAAAC,AAAA;AAAAE,AAAA,AAAAxB;AAAAyB,AAAA,AAAAF,AAAAC,AAAA;AAAAE,AAAA,AAAA5L,AAAAsL,AAAAK;AAAAE,AAAA,AAAA3L,AAAA0L;AAAAE,AAAA,AAAAT,AAAAjB,AAAAyB;AAAA9B,AAAA,AAAAgC,AAAAhC;AAAA,AAAA,AAAAgC,AAAA,AAAA3B;;AAAA,AAAA2B,AAAA,AAAAX;;AAAA,AAAAW,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAApO,AAAAoM,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAiC,AAAA,AAAAjC,AAAA;AAAAkC,AAAA,AAAA,AAAAD,AAcsB4B;AAdtB1B,AAAA,AAAAD,AAcSvK,AAAOnI;AAdhB4S,AAAA,AAAAhN,AAAAiL,AAYwBnS;AAZxB8R,AAAA,AAAAqC,AAAArC;AAAA,AAAA,AAAAqC,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA3L,AAAAsJ,AAAAmC;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA1L;;AAAA,AAAA0L,AAAA,AAAA;;AAAAA;;AAAAtC;;AAAA,AAAA,AAAAnJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAzD,AAAA2M;AAAA,AAAA,AAAA,AAAAjJ,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAuL;AAAA,AAAA,AAAAC,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAAxL;;AAAAwL;AAAA,AAAA,AAAArL,AAAA,AAAA6I,AAAA;AAAA,AAAAyC,AAAAzC;AAAA,AAAA,AAAAyC,AAAA,AAAA,AAAApL,AAAA,AAAA2I,AAAA;;AAAAyC;AAAA,AAAAzL;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAmJ;;;;AAAAnJ;;;;;AAAAmJ;;;;;AAAAA;;;;;;;;;AAAA1I,AAAA,AAAAoL,AAAA,AAAAtP;AAAA,AAAA,AAAAsP,AAAAlL,AAAA,AAAAvE;;AAAAyP;;AAAA,AAAA,AAAAjL,AAAAH;;;AAAAqL,AAAA,AAAAxP,AAAA2M;AAAA9E,AAAA,AAAA4H,AAAA5H;AAAA,AAAA,AAAA4H,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAC,AAAA7H;AAAA,AAAA,AAAA6H,AAAA,AAAAhD;;AAAA,AAAAgD,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA5H,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAA8H,AAAA9H;AAAA,AAAA,AAAA8H,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA7H,AAAA;AAAA,AAAAyC,AAAA,AAAA1C,AAAA;AAAA+H,AAAA,AAAA/H,AAAA;AAAAgI,AAAA,AAAA5N,AAAAsI,AAAkBxP;AAAlB8M,AAAA,AAAAiI,AAAAjI;AAAA,AAAA,AAAAiI,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAAvM,AAAAsE,AAAA+H;;AAAA,AAAA,AAAA9H,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAkI,AAAAlI;AAAA,AAAA,AAAAkI,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAvM;;AAAA,AAAAuM,AAAA,AAAA;;AAAAA;;AAAAnI;;AAAA,AAAA,AAAAnE,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAzD,AAAA2H;AAAA,AAAA,AAAA,AAAAjE,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAoM;AAAA,AAAA,AAAAC,AAAArI;AAAA,AAAA,AAAAqI,AAAA,AAAArM;;AAAAqM;AAAA,AAAA,AAAAlM,AAAA,AAAA6D,AAAA;AAAA,AAAAsI,AAAAtI;AAAA,AAAA,AAAAsI,AAAA,AAAA,AAAAjM,AAAA,AAAA2D,AAAA;;AAAAsI;AAAA,AAAAtM;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAmE;;;;AAAAnE;;;;;AAAAmE;;;;;AAAAA;;;;;;;;;AAAA1D,AAAA,AAAAiM,AAAA,AAAAnQ;AAAA,AAAA,AAAAmQ,AAAA/L,AAAA,AAAAvE;;AAAAsQ;;AAAA,AAAA,AAAA9L,AAAAH;;;AAAArE;;;AANJ;AAuBE,AAAM6Q,AAAWnJ,AACA,AAACoJ,AAAUC,AAAIC,AACf,AAAA,AACA,AAACC,AACD,AAACC;AACZnR,AAAK,AAAA,AAAAoR,AAACC;AAAD,AAAO,AAAA,AAAAD;AAAc,AAACE,AAAMR;AALvC,AAME,AAAA7Q,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAkR;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAE,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAxR,AAAA;AAAAyR,AAAA,AAAAjR;AAAA6Q,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAAK,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAAhR,AAAA2Q,AAAA,AAAkBrW;;AAAlB,AAAA,AAAAsW,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAAD;AAAAE,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAH;AAAAI,AAAA,AAAA1U,AAAAyU;AAAAE,AAAA,AAAAH,AAAAE;AAAAV,AAAAA;AAAA,AAAA,AAAA,AAAAW;AAAA,AAAAC,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAb;AAAA,AAAA,AAAAa,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAAe,AAAA,AAAAf,AAAA;AAAAgB,AAAA,AAAAnQ,AAAAiQ,AAAkBnX;AAAlBqW,AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA9O,AAAA6N,AAAAe;;AAAA,AAAA,AAAAd,AAAA;AAAA,AAAAiB,AAAA,AAAAlB,AAAA;AAAAmB,AAAA,AAAAnB,AAAA;AAAAc,AAAA,AAAAd,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAJ,AAAA;AAAAoB,AAAA,AAAApB,AAAA;AAAAqB,AAAA,AAAArB,AAAA;AAAAsB,AAAA,AAAA3S,AAAA;AAAA4S,AAAA,AAAA9R,AAAA0Q;AAAAzQ,AAAA0Q;AAAAU,AAAU3N;AAAViO,AACU5S;AADVgT,AAAAL;AAAAD,AAMgBhC;AANhBmC,AAMgClC;AANhCzQ,AAAA4S;AAAA,AAAA;AAAA,AAAA,AAAAzS,AAAA,AAAAC,AAAA,AAAA2S;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAhT,AAAA;AAAAiT,AAAA,AAAAzS;AAAAsS,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAAxS,AAAAoS,AAAA,AAYwB9X;;AAZxB,AAAA,AAAA+X,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAvS,AAAAkS;AAAAjS,AAAAkS;AAAAE,AAYgB3O;AAZhB8O,AAAAH;AAAAlU,AAAAkU;AAAAjU,AAAAkU;AAAA,AAAA,AAAAnS;AAAA,AAAA,AAAAC,AAAA,AAAAqS,AAAAtS;AAAAuS,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAnS,AAAAkS,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAjS;;;AAAA,AAAA,AAAA,AAAAC,AAAAT,AAAA,AAAAU,AAAA,AAAAiS,AAAAxS;AAAAyS,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAtS,AAAAqS,AAAAC;;AAAA,AAAAF,AAAAC;;AAAApS;;;AAAA,AAAA,AAAAtC,AAYgBuF;AAZhBtF,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAA4C;;AAAA,AAAA,AAAAL,AAAA,AAAAqS,AAAA3S;AAAA4S,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAzS,AAAAwS,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAvS;;AAAA;AAAA,AAAA,AAAAU,AAAA,AAAAf;;AAAA,AAAAgB,AAAApB,AAAA,AAAAkT,AAAA9S;AAAA+S,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA5S,AAAA2S,AAAAC;;AAAA,AAAAF,AAAAC;;AAAA1S;;;;;AAAA;;;;AAAA4S,AAAA,AAAAf,AAAAD,AAAA,AAAAE;AAAAe,AAAA,AAAAjB,AAAA;AAAAkB,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA3U;AAAA4U,AAAA,AAa0CzU,AAAK0Q;AAb/CgE,AAAA,AAAA7U,AAAA,AAAA,AAAA,AAAA2U,AAAAC,AAAA;AAAAE,AAAA,AAAAxB;AAAAyB,AAAA,AAAAF,AAAAC,AAAA;AAAAE,AAAA,AAAA5R,AAAAsR,AAAAK;AAAAE,AAAA,AAAA3R,AAAA0R;AAAAE,AAAA,AAAAT,AAAAjB,AAAAyB;AAAA9B,AAAA,AAAAgC,AAAAhC;AAAA,AAAA,AAAAgC,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA3B;;AAAA,AAAA2B,AAAA,AAAAX;;AAAAW;;AAAA,AAAA,AAAApU,AAAAoS,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAiC,AAAA,AAAAjC,AAAA;AAAAkC,AAAA,AAAA,AAAAD,AAcsBpE;AAdtBsE,AAAA,AAAAD,AAcSvQ,AAAOnI;AAdhB4Y,AAAA,AAAAhT,AAAAiR,AAYwBnY;AAZxB8X,AAAA,AAAAqC,AAAArC;AAAA,AAAA,AAAAqC,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA3R,AAAAsP,AAAAmC;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA1R;;AAAA,AAAA0R,AAAA,AAAA;;AAAAA;;AAAAtC;;AAAA,AAAA,AAAAnP,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAzD,AAAA2S;AAAA,AAAA,AAAA,AAAAjP,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAuR;AAAA,AAAA,AAAAC,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAAxR;;AAAAwR;AAAA,AAAA,AAAArR,AAAA,AAAA6O,AAAA;AAAA,AAAAyC,AAAAzC;AAAA,AAAA,AAAAyC,AAAA,AAAA,AAAApR,AAAA,AAAA2O,AAAA;;AAAAyC;AAAA,AAAAzR;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAmP;;;;AAAAnP;;;;;AAAAmP;;;;;AAAAA;;;;;;;;;AAAA1O,AAAA,AAAAoR,AAAA,AAAAtV;AAAA,AAAA,AAAAsV,AAAAlR,AAAA,AAAAvE;;AAAAyV;;AAAA,AAAA,AAAAjR,AAAAH;;;AAAAqR,AAAA,AAAAxV,AAAA2S;AAAAvB,AAAA,AAAAqE,AAAArE;AAAA,AAAA,AAAAqE,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAC,AAAAtE;AAAA,AAAA,AAAAsE,AAAA,AAAAhD;;AAAA,AAAAgD,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAArE,AAAA;AAAA,AAAAsE,AAAA,AAAAvE,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAuE;AAAA,AAAAC,AAAAxE;AAAA,AAAA,AAAAwE,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAzE;AAAA,AAAA,AAAAyE,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAxE,AAAA;AAAA,AAAAmB,AAAA,AAAApB,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAoB,AAAA,AAAApB,AAAA;AAAA0E,AAAA,AAAA,AAEGtR,AAAOzI;AAFVga,AAAA,AAAAvD,AAGGhO,AAAO3H;AAHVmZ,AAAA,AAIGxR,AAAO7I,AAAkBkE;AAJ5BoW,AAAA,AAAAzD,AAKG7S,AAAyBE;AAL5BqW,AAAA,AAAA,AASkDvF;AATlDwF,AAAA,AAAA3D,AAAA0D,AASqB1F,AAAmBG;AATxCyF,AAAA,AAAAD,AAAA,AAAA,AAUqB1F;AAVrBiB,AAAA,AAAA0E,AAOS5R,AAAOzH;AAPhBsZ,AAAA,AAAA3E,AAAA;AAAA4E,AAAA,AAAA3M,AAAA0M;AAAAjF,AAAA,AAAAmF,AAAAnF;AAAA,AAAA,AAAAmF,AAAA,AAAAT;;AAAA,AAAAS,AAAA,AAAAP;;AAAA,AAAAO,AAAA,AAAAN;;AAAA,AAAAM,AAAA,AAAA/D;;AAAA,AAAA+D,AAAA,AAAAR;;AAAA,AAAAQ,AAAA,AAAA7E;;AAAA6E;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAApF;AAAA,AAAA,AAAAoF,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAArF;AAAA,AAAA,AAAAqF,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAApF,AAAA;AAAA,AAAAiB,AAAA,AAAAlB,AAAA;AAAAmB,AAAA,AAAAnB,AAAA;AAAAmB,AAAA,AAAAnB,AAAA;AAAAkB,AAAA,AAAA/U,AAAAgV,AAAA;AAAAE,AAAA,AAAAlV,AAAAgV,AAAA;AAAAnB,AAAA,AAAAsF,AAAAtF;AAAA,AAAA,AAAAsF,AAAA,AAAApE;;AAAA,AAAAoE,AAAA,AAAAnE;;AAAA,AAAAmE,AAAA,AAAAjE;;AAAAiE;;AAAA,AAAA,AAAA,AAAApE;AAAA,AAAAqE,AAAAvF;AAAA,AAAA,AAAAuF,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAxF;AAAA,AAAA,AAAAwF,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAvF,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAJ,AAAA;AAAAc,AAAA,AAAAd,AAAA;AAAAyF,AAAA,AAAA3E,AAAA;AAAA4E,AAAA,AAAAjW,AAAA0Q;AAAAzQ,AAAA0Q;AAAAU,AAAU3N;AAAVwS,AAAA7E;AAAAlT,AAAAkT;AAAAjT,AAAA4X;AAAA,AAAA,AAAA7V;AAAA,AAAA,AAAAC,AAAA,AAAA+V,AAAAhW;AAAAiW,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA7V,AAAA4V,AAAAC;;AAAA,AAAAF,AAAAC;;AAAA3V;;;AAAA,AAAA,AAAA,AAAAC,AAAAT,AAAA,AAAAU,AAAA,AAAA2V,AAAAlW;AAAAmW,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAhW,AAAA+V,AAAAC;;AAAA,AAAAF,AAAAC;;AAAA9V;;;AAAA,AAAA,AAAAtC,AAAUuF;AAAVtF,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAA4C;;AAAA,AAAA,AAAAL,AAAA,AAAA+V,AAAArW;AAAAsW,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAnW,AAAAkW,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAjW;;AAAA;AAAA,AAAA,AAAAU,AAAA,AAAAf;;AAAA,AAAAgB,AAAApB,AAAA,AAAA4W,AAAAxW;AAAAyW,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAtW,AAAAqW,AAAAC;;AAAA,AAAAF,AAAAC;;AAAApW;;;;;AAAA;;;;AAAAsW,AAAA,AAAAf,AAAA3E,AAAA,AAAA4E;AAAAe,AAAA,AAAA3F,AAAA;AAAA4F,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAArY;AAAAsY,AAAA,AACiCxQ,AAAMmJ;AADvCsH,AAAA,AAAAvY,AAAA,AAAA,AAAA,AAAAqY,AAAAC,AAAA;AAAAE,AAAA,AAAA1G;AAAA2G,AAAA,AAAAF,AAAAC,AAAA;AAAAE,AAAA,AAAAtV,AAAAgV,AAAAK;AAAAE,AAAA,AAAArV,AAAAoV;AAAAE,AAAA,AAAAT,AAAA3F,AAAAmG;AAAAjH,AAAA,AAAAmH,AAAAnH;AAAA,AAAA,AAAAmH,AAAA,AAAArG;;AAAA,AAAAqG,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAAX;;AAAAW;;AAAA,AAAA,AAAA9X,AAAA2Q,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAoH,AAAApH;AAAA,AAAA,AAAAoH,AAAA,AAAA9G;;AAAA,AAAA8G,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAnH,AAAA;AAAA,AAAAoH,AAAA,AAAArH,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAsH,AAAAtH;AAAA,AAAA,AAAAsH,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAArH,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAuH,AAAAvH;AAAA,AAAA,AAAAuH,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAtH,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAwH,AAAAxH;AAAA,AAAA,AAAAwH,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAvH,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAyH,AAAA,AAAAxb,AAAAC,AAAAoU;AAAAN,AAAAA;AAAA,AAAA,AAAA,AAAA0H,AAAA1H;AAAA,AAAA,AAAA0H,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAzH,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAA2H,AAAA3H;AAAA,AAAA,AAAA2H,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAvV;;AAAA,AAAAuV,AAAA,AAAA;;AAAAA;;AAAA5H;;AAAA,AAAA,AAAA1N,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAzD,AAAAkR;AAAA,AAAA,AAAA,AAAAxN,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAoV;AAAA,AAAA,AAAAC,AAAA9H;AAAA,AAAA,AAAA8H,AAAA,AAAArV;;AAAAqV;AAAA,AAAA,AAAAlV,AAAA,AAAAoN,AAAA;AAAA,AAAA+H,AAAA/H;AAAA,AAAA,AAAA+H,AAAA,AAAA,AAAAjV,AAAA,AAAAkN,AAAA;;AAAA+H;AAAA,AAAAtV;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA0N;;;;AAAA1N;;;;;AAAA0N;;;;;AAAAA;;;;;;;;;AAAAjN,AAAA,AAAAiV,AAAA,AAAAnZ;AAAA,AAAA,AAAAmZ,AAAA/U,AAAA,AAAAvE;;AAAAsZ;;AAAA,AAAA,AAAA9U,AAAAH;;;AAAArE;;;;AA7BJ,AAAA,AAAA6H,AAAA,AAAA,AAAAF;;;;AA6CF,AAAA,AAAA4R,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlc,AAAA,AAAAkc,AAAA,AAAA,AAAA,AAAA,AAAAjc,AAAAC,AAAAgc,AAAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACgB,AAAA3b,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AACZ4b,AACgB,AAAA7b,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AAEf6b,AAAgB,AAAA9b,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AACfY,AAEmB,AAAAb,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AAEnB8b;AAVN,AAY8B,AAACC,AAAQve;AAZvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAsB,AAAA,AAAA,AAa0B,AAAAiB,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AACnBgc,AACHC,AAAyBze;AAf7B,AAgBiC,AAAA,AAACoJ,AAAOpJ;AAhBzC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiBkB,AAAAuC,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA,AACbkc,AAECC,AAAwB1S;AApB9B,AAqB8B,AAAC2S,AAAWve,AACAE,AACAoB,AACAF,AACAhB,AACAI,AACAE,AACAE;AA5B1C,AAAA;AAAA,AA+B+B,AAAA,AAAA,AAAC4d,AAAAA,AAAAA;AA/BhC,AAAA,AAAA,AAiDK,AAAA,AAAAvd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAOX,AACJoC,AA8BJ+b,AAAiB,AAAAvc,AAAA,AAAAJ,AAAA,AAAAb,AAAAkB,AAAA;;AAIrB,AAAA,AAAMuc;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAEIC,AACAC,AAAeC,AACd,AAAC,AAACC,AAAYC,AAAWjB","names":["bfuncs.app/num-workers","bfuncs.app/worker-channel","bfuncs.worker-fns/create-worker-channel","js/bfuncs","js/bfuncs.app","js/bfuncs.app.!typesetting-menu-open","bfuncs.app/!typesetting-menu-open","reagent.core.atom","js/bfuncs.app.!term-parse-opts","bfuncs.app/!term-parse-opts","js/bfuncs.app.!parsed-expression","bfuncs.app/!parsed-expression","js/bfuncs.app.!parsed-variables","bfuncs.app/!parsed-variables","js/bfuncs.app.!minimal-expressions","bfuncs.app/!minimal-expressions","js/bfuncs.app.!results-ready","bfuncs.app/!results-ready","js/bfuncs.app.!minimal-sops","bfuncs.app/!minimal-sops","js/bfuncs.app.!minimal-poss","bfuncs.app/!minimal-poss","js/bfuncs.app.!anf","bfuncs.app/!anf","bfuncs.app/reparse-minterms!","state","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/deref","bfuncs.parsing.parse_minterms","js/bfuncs.app.!function-values","bfuncs.app/!function-values","js/bfuncs.app.!function-properties","bfuncs.app/!function-properties","js/bfuncs.app.!target-form","bfuncs.app/!target-form","p__69036","map__69037","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","bfuncs.app/terms-field","label","reagent-material-ui.core.text-field/text-field","reagent.core.class_names","bfuncs.style/!vclasses","e","bfuncs.utils/event-value","js/bfuncs.app.!spoof-expressions","bfuncs.app/!spoof-expressions","p__69039","map__69040","bfuncs.app/results-card","title","reagent-material-ui.core.card/card","reagent-material-ui.core.card-content/card-content","classes69042","reagent-material-ui.core.typography/typography","bfuncs.typesetting/expression","map__69043","n","cljs.core/count","index","term-counts","bfuncs.typesetting/$$","obj__27297__auto__","f__27298__auto__","js/module$bfuncs$FunctionSummary.RadialChart","temp__5739__auto__","function-values","js/module$bfuncs$TruthTable.default","bfuncs.tables/expressions-table","bfuncs.tables/expressions-table-rows","temp__5737__auto__","anf","cljs.core/PersistentVector","bfuncs.app/minimize-and-stuff","fvals","vars","c__26934__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__26935__auto__","switch__26849__auto__","state_69071","state_val_69072","inst_69047","inst_69048","cljs.core/random-uuid","statearr-69074","cljs.core.async.impl.ioc-helpers/take!","inst_69050","inst_69052","inst_69053","out-port__30025__auto__","task-id__30026__auto__","G__69051","event__30028__auto__","data__30029__auto__","obj69075","k69076","obj69077","applied-science.js-interop.impl/in?*","js/undefined","cljs.core._EQ_","cljs.core/uuid","obj69080","k69081","obj69082","handle-message__30027__auto__","obj69083","k69084","obj69085","cljs.core.ex_info","cljs.core.async.put_BANG_","obj69089","k69090","obj69091","inst_69054","inst_69055","inst_69057","inst_69058","inst_69059","inst_69060","inst_69061","inst_69062","inst_69063","cljs.core/PersistentHashMap","inst_69064","cljs.core/clj->js","inst_69065","statearr-69093","inst_69067","inst_69068","inst_69069","statearr-69094","cljs.core.async.impl.ioc-helpers/return-chan","statearr-69095","state-machine__26850__auto__","ret-value__26851__auto__","result__26852__auto__","cljs.core/keyword-identical?","ex__26853__auto__","e69096","statearr-69097","cljs.core/seq","statearr-69098","cljs.core/first","state__26936__auto__","statearr-69099","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","_worker","cljs.core/reset!","state_69123","state_val_69124","inst_69100","inst_69101","statearr-69125","inst_69103","inst_69105","inst_69106","G__69104","obj69126","k69127","obj69128","obj69129","k69130","obj69131","obj69132","k69133","obj69134","obj69135","k69136","obj69137","inst_69107","inst_69108","inst_69109","inst_69110","inst_69111","inst_69112","inst_69113","inst_69114","inst_69115","inst_69116","inst_69117","statearr-69138","inst_69119","inst_69120","inst_69121","statearr-69139","statearr-69140","e69141","statearr-69142","statearr-69143","statearr-69144","p__69146","map__69147","bfuncs.app/handle-success!","type","tree","terms","G__69149","cljs.core/Keyword","js/Error","nvars","state_69241","state_val_69242","inst_69182","inst_69187","inst_69188","inst_69189","inst_69190","inst_69191","statearr-69243","statearr-69244","inst_69150","inst_69151","statearr-69245","inst_69170","inst_69174","statearr-69246","inst_69204","inst_69203","inst_69205","statearr-69247","statearr-69248","statearr-69249","inst_69200","statearr-69250","inst_69177","inst_69179","inst_69180","inst_69181","inst_69184","inst_69185","cljs.core/not","statearr-69251","statearr-69252","statearr-69253","statearr-69254","inst_69171","inst_69172","statearr-69255","statearr-69256","statearr-69257","inst_69195","statearr-69258","inst_69153","inst_69155","inst_69156","G__69154","obj69259","k69260","obj69261","obj69262","k69263","obj69264","obj69265","k69266","obj69267","obj69268","k69269","obj69270","inst_69157","inst_69158","inst_69159","inst_69160","inst_69161","inst_69162","inst_69163","inst_69164","inst_69165","inst_69166","inst_69167","inst_69168","statearr-69271","statearr-69272","inst_69198","statearr-69273","statearr-69274","statearr-69275","statearr-69276","inst_69233","inst_69234","map__69178","state_69231","state_val_69232","inst_69207","inst_69208","statearr-69277","inst_69210","inst_69212","inst_69213","G__69211","obj69278","k69279","obj69280","obj69281","k69282","obj69283","obj69284","k69285","obj69286","obj69287","k69288","obj69289","inst_69214","inst_69215","inst_69216","inst_69217","inst_69218","inst_69219","inst_69220","inst_69221","inst_69222","inst_69223","inst_69224","statearr-69290","inst_69226","inst_69227","inst_69228","inst_69229","statearr-69291","statearr-69292","e69293","statearr-69294","statearr-69295","statearr-69296","inst_69235","statearr-69297","statearr-69298","statearr-69299","inst_69238","inst_69239","statearr-69300","statearr-69301","statearr-69302","e69303","statearr-69304","statearr-69305","statearr-69306","bfuncs.parsing/->js-fn-strs","fully-specified","digit-string","js/module$bfuncs$jsUtils.functionProperties","cljs.core.js__GT_clj","bfuncs.utils.echod","arity","cljs.core.transduce","cljs.core/cat","cljs.core/max","Math/log2","Math/ceil","p1__69145#","cljs.core.mapv","cljs.core.range","state_69394","state_val_69395","statearr-69396","inst_69307","inst_69308","statearr-69397","inst_69335","inst_69340","inst_69341","inst_69342","inst_69343","inst_69344","statearr-69398","statearr-69399","inst_69310","inst_69391","inst_69392","statearr-69400","inst_69357","inst_69356","inst_69326","inst_69358","inst_69386","inst_69387","map__69331","state_69384","state_val_69385","inst_69360","inst_69361","statearr-69401","inst_69363","inst_69365","inst_69366","G__69364","obj69402","k69403","obj69404","obj69405","k69406","obj69407","obj69408","k69409","obj69410","obj69411","k69412","obj69413","inst_69367","inst_69368","inst_69369","inst_69370","inst_69371","inst_69372","inst_69373","inst_69374","inst_69375","inst_69376","inst_69377","statearr-69414","inst_69379","inst_69380","inst_69381","inst_69382","statearr-69415","statearr-69416","e69417","statearr-69418","statearr-69419","statearr-69420","inst_69388","statearr-69421","statearr-69422","inst_69351","statearr-69423","statearr-69424","inst_69327","inst_69328","inst_69329","inst_69330","inst_69332","inst_69333","inst_69334","inst_69337","inst_69338","statearr-69425","statearr-69426","statearr-69427","statearr-69428","statearr-69429","statearr-69430","inst_69312","inst_69313","G__69311","obj69431","k69432","obj69433","obj69434","k69435","obj69436","obj69437","k69438","obj69439","obj69440","k69441","obj69442","inst_69314","inst_69315","inst_69316","inst_69317","inst_69318","inst_69319","inst_69320","inst_69321","inst_69322","inst_69323","inst_69324","statearr-69443","statearr-69444","inst_69348","statearr-69445","statearr-69446","statearr-69447","inst_69353","statearr-69448","statearr-69449","statearr-69450","e69451","statearr-69452","statearr-69453","statearr-69454","p__69456","map__69457","bfuncs.app/main","reagent-material-ui.core.app-bar/app-bar","reagent-material-ui.core.toolbar/toolbar","reagent-material-ui.core.icon-button/icon-button","bfuncs.utils.toggle_BANG_","reagent-material-ui.icons.tune-outlined/tune-outlined","bfuncs.typesetting/typesetting-menu","reagent-material-ui.core.container/container","bfuncs.input/input-card","bfuncs.utils.reset_nil_BANG_","bfuncs.utils/dbg","bfuncs.globals/notifier","bfuncs.app/app","reagent-material-ui.core.css-baseline/css-baseline","reagent-material-ui.styles/theme-provider","bfuncs.style/theme","bfuncs.style/with-styles","bfuncs.style/app-style"],"sourcesContent":["(ns bfuncs.app\r\n  (:refer-clojure :exclude [bytes byte-array byte-array?])\r\n  (:require\r\n   [applied-science.js-interop :as j]\r\n   [reagent.core :as r]\r\n   [fipp.clojure :as fipp]\r\n   [cljs.core.async :refer [>! <!] :refer-macros [go]]\r\n   [bfuncs.algebra :refer [! || && <*> <+>]]\r\n   [bfuncs.input :refer [expression-input input-card]]\r\n   [bfuncs.globals :refer [notifier notify!]]\r\n   [bfuncs.parsing :refer [parse-minterms variables bexpr->bobj ->js-fn ->js-fn-strs]]\r\n   [bfuncs.steps-card :refer [steps-card]]\r\n   [bfuncs.style :refer [app-style theme with-styles classes]]\r\n   [bfuncs.tables :refer [expressions-table expressions-table-rows]]\r\n   [bfuncs.typesetting :refer [typesetting-menu expression $ $$ operator-calibration format-latex-var]]\r\n   [bfuncs.transitions :refer [switch-transition]]\r\n   [bfuncs.utils :refer [event-value event-checked reset-nil! toggle! dbg echod\r\n                         for' fori' echol go-reset! log maximum]]\r\n   [bfuncs.worker-fns :refer [create-worker-channel] :refer-macros [go-task]]\r\n   ;region [mui components]\r\n   [reagent-material-ui.core.app-bar :refer [app-bar]]\r\n   [reagent-material-ui.core.button :refer [button]]\r\n   [reagent-material-ui.core.button-group :refer [button-group]]\r\n   [reagent-material-ui.core.card :refer [card]]\r\n   [reagent-material-ui.core.card-content :refer [card-content]]\r\n   [reagent-material-ui.core.container :refer [container]]\r\n   [reagent-material-ui.core.css-baseline :refer [css-baseline]]\r\n   [reagent-material-ui.core.icon-button :refer [icon-button]]\r\n   [reagent-material-ui.core.switch-component :refer [switch]]\r\n   [reagent-material-ui.core.text-field :refer [text-field]]\r\n   [reagent-material-ui.core.toolbar :refer [toolbar]]\r\n   [reagent-material-ui.core.typography :refer [typography]]\r\n   [reagent-material-ui.icons.tune-outlined :refer [tune-outlined]]\r\n   [reagent-material-ui.styles :refer [theme-provider]] ;endregion\r\n   [\"/bfuncs/TruthTable\" :default TruthTable]\r\n   [\"/bfuncs/FunctionSummary\" :refer [RadialChart]]\r\n   [\"/bfuncs/jsUtils\" :refer [functionBytes, bytesToBigInt, functionProperties]]))\r\n\r\n(def ^:private num-workers 1)\r\n(def ^:private worker-channel (create-worker-channel num-workers))\r\n(defonce !typesetting-menu-open (r/atom false))\r\n(defonce !term-parse-opts (r/atom {:binary false}))\r\n(defonce !parsed-expression (r/atom nil))\r\n(defonce !parsed-variables (r/atom nil))\r\n(defonce !minimal-expressions (r/atom nil))\r\n(defonce !results-ready (r/atom false))\r\n(defonce !minimal-sops (r/atom nil))\r\n(defonce !minimal-poss (r/atom nil))\r\n(defonce !anf (r/atom nil))\r\n\r\n(defn reparse-minterms!\r\n  [state]\r\n  (swap! state\r\n         assoc\r\n         :parse (parse-minterms (:value @state) @!term-parse-opts)))\r\n\r\n(defonce !function-values (r/atom nil))\r\n(defonce !function-properties (r/atom nil))\r\n\r\n(defonce !target-form (r/atom :SOP))\r\n\r\n(defn- terms-field [{:keys [state label]}] #_terms-field\r\n  [text-field {:class (classes :text-field)\r\n               :InputProps {:class (classes :text-field-input)}\r\n               :value (:value @state)\r\n               :label label\r\n               :variant \"outlined\"\r\n               :multiline true\r\n               :rows 1\r\n               :rows-max 15\r\n               :on-change (fn [e]\r\n                            (swap! state assoc :value (event-value e))\r\n                            (reparse-minterms! state))\r\n               :auto-complete \"off\"\r\n               :auto-correct \"off\"\r\n               :spell-check \"false\"}])\r\n\r\n(defonce !spoof-expressions (r/atom nil))\r\n\r\n(defn- results-card [{:keys [title]}]\r\n  [card {:class (classes :card)}\r\n   [card-content {:class (classes :card-content :vertical-grid)}\r\n    #_[typography {:variant \"h2\"}\r\n     title]\r\n    [typography {:variant \"h5\"} \"Function\"]\r\n    [expression {:class (classes :typeset-expression)\r\n                 :expandable true}\r\n     @!parsed-expression]\r\n    (let [n (count @!parsed-variables)\r\n          {:keys [index term-counts]} @!function-properties]\r\n      [:<>\r\n       (when index\r\n         [$$ (j/call index :toLocaleString)])\r\n       (when term-counts\r\n         [:> RadialChart {:class (classes :radial-chart)\r\n                          :counts term-counts}])\r\n\r\n       [typography {:variant \"h5\"} \"Truth Table\"]\r\n       (when-some [function-values @!function-values]\r\n         [:> TruthTable {:f function-values\r\n                         :arity n\r\n                         :fullySpecified true\r\n                         :class (classes :truth-table)\r\n                         :size (cond\r\n                                 (<= n 5) \"large\"\r\n                                 (<= n 6) \"medium\"\r\n                                 :else \"small\")}])])\r\n    [typography {:variant \"h5\"} \"Minimal Forms\"]\r\n    [expressions-table {:key @!parsed-expression}\r\n     #_[expressions-table-rows {:label \"Bum of Pawducts\"\r\n                                :data @!spoof-expressions}]\r\n     [expressions-table-rows {:label \"Sum of Products\"\r\n                              :data @!minimal-sops}]\r\n     [expressions-table-rows {:label \"Product of Sums\"\r\n                              :data @!minimal-poss}]\r\n     (if-some [anf @!anf]\r\n      [expressions-table-rows {:label \"Zhegalkin Polynomial\"\r\n                               :data (vector anf)}])]]])\r\n\r\n(defn- minimize-and-stuff [fvals vars]\r\n  (when fvals\r\n    (go-task [_worker worker-channel\r\n              min-sops (:min-sops vars fvals)]\r\n      (reset! !minimal-sops min-sops))\r\n    (go-task [_worker worker-channel\r\n              min-poss (:min-poss vars fvals)]\r\n      (reset! !minimal-poss min-poss))))\r\n\r\n(defn handle-success! [{:keys [type vars tree terms]}]\r\n  (case type\r\n\r\n    :expression\r\n    (let [nvars (count vars)]\r\n      (reset! !parsed-variables vars)\r\n      (reset! !parsed-expression tree)\r\n      (go-task [_worker worker-channel\r\n                fvals (:function-bytes (->js-fn-strs vars tree) nvars)]\r\n        (reset! !results-ready true)\r\n        (reset! !function-values fvals)\r\n        (when fvals\r\n          (minimize-and-stuff fvals vars))\r\n        (let [{:keys [fully-specified digit-string]}\r\n              (reset! !function-properties\r\n                      (-> fvals\r\n                          (functionProperties nvars (<= nvars 5))\r\n                          (js->clj :keywordize-keys true)))]\r\n          (when fully-specified\r\n            (go-task [_worker worker-channel\r\n                      zp (:zhegalkin-polynomial vars digit-string)]\r\n              (reset! !anf (echod :anf zp)))))))\r\n\r\n    :minterms\r\n    (let [arity (->> terms\r\n                     (transduce cat max)\r\n                     (inc)\r\n                     (Math/log2)\r\n                     (Math/ceil))\r\n          vars (mapv #(str \"x_\" % ) (range arity))]\r\n      (go-task [_worker worker-channel\r\n                fvals (:minterms-bytes terms arity)]\r\n        (reset! !results-ready true)\r\n        (reset! !function-values fvals)\r\n        (reset! !parsed-variables vars)\r\n        (minimize-and-stuff fvals vars)\r\n        (let [{:keys [fully-specified digit-string]}\r\n              (reset! !function-properties\r\n                      (-> fvals\r\n                          (functionProperties arity (<= arity 5))\r\n                          (js->clj :keywordize-keys true)))]\r\n          (when fully-specified\r\n            (go-task [_worker worker-channel\r\n                      zp (:zhegalkin-polynomial vars digit-string)]\r\n              (reset! !anf (echod :anf zp)))))))))\r\n\r\n(defn- main [{}]\r\n  [:div {:class (classes :root)}\r\n   [app-bar {:color \"default\"\r\n             :class (classes :app-bar)\r\n             :position \"relative\"}\r\n    [toolbar {:class (classes :toolbar)}\r\n     [typography {:variant \"h4\"\r\n                  :no-wrap true\r\n                  :class (classes :title)}\r\n      \"Boolean Function Explorer\"]\r\n     [icon-button {:edge \"end\"\r\n                   :color \"inherit\"\r\n                   :on-click #(toggle! !typesetting-menu-open)\r\n                   :class (classes :typesetting-menu-button)}\r\n      [tune-outlined]]]]\r\n   [typesetting-menu {:open @!typesetting-menu-open\r\n                      :on-close #(reset! !typesetting-menu-open false)}]\r\n   [:main {:class (classes :main)}\r\n    [container {:max-width \"md\",\r\n                :class \"main-container\"}\r\n     [input-card {:on-success handle-success!\r\n                  :on-submit #(reset-nil! !parsed-expression\r\n                                          !parsed-variables\r\n                                          !function-properties\r\n                                          !function-values\r\n                                          !minimal-expressions\r\n                                          !minimal-sops\r\n                                          !minimal-poss\r\n                                          !anf\r\n                                          ;!results-ready\r\n                                          )\r\n                  :on-failure #(dbg \"on failure\")}]\r\n     #_(when @!results-ready\r\n         [button-group\r\n          [button {:on-click #(reset! !spoof-expressions nil)}\r\n           \"none\"]\r\n          [button {:on-click #(reset! !spoof-expressions [(|| (&& \"a\" \"b\" \"c\") (&& \"d\" \"e\" \"f\"))])}\r\n           \"one\"]\r\n          [button {:on-click #(reset! !spoof-expressions [(|| (&& \"a\" \"b\" \"c\") (&& \"d\" \"e\" \"f\"))\r\n                                                          (|| (&& \"a\" \"b\" \"c\") (&& \"d\" \"e\" \"f\"))\r\n                                                          (|| (&& \"a\" \"b\" \"c\") (&& \"d\" \"e\" \"f\"))])}\r\n           \"three\"]\r\n          [button {:on-click #(reset! !spoof-expressions (repeat 11 (|| (&& \"a\" \"b\" \"c\") (&& \"d\" \"e\" \"f\"))))}\r\n           \"many\"]]\r\n         )\r\n\r\n\r\n\r\n\r\n     (when @!results-ready\r\n       [results-card {:title \"Results\"\r\n                      ;:key (str (random-uuid))\r\n                      }])\r\n\r\n     #_[:textarea {:style {:width \"100%\"\r\n                           :height 400}\r\n                   :read-only true\r\n                   :value (with-out-str (fipp/pprint (echol :parsedexpr @!parsed-expression)))}\r\n\r\n        ]\r\n\r\n     #_(when @!results-ready\r\n         [:<>\r\n          [:div\r\n            ()\r\n           [typography @!target-form]\r\n           [switch {:checked (= @!target-form :POS)\r\n                    :on-change #(reset! !target-form (if (event-checked %) :POS :SOP))}]]\r\n          [steps-card {:title \"Steppies\"\r\n                       :expr @!parsed-expression\r\n                       :!vars !parsed-variables\r\n                       :target-form @!target-form}]])\r\n\r\n\r\n     ;      [operator-calibration]\r\n\r\n     #_(for' [base (keys ts-data/bases)]\r\n         [calibrate {:key base\r\n                     :data (str \"\\\\\" (name base))}])\r\n     ]]\r\n   [notifier {:class (classes :notification)}]\r\n   ]\r\n  )\r\n\r\n(defn app []\r\n  [:<>\r\n   [css-baseline]\r\n   [theme-provider theme\r\n    [((with-styles app-style) main)]]])\r\n"]}