{"version":3,"sources":["bfuncs/steps_card.cljs"],"mappings":"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","names":["bfuncs.steps-card/get-outer","form-type","G__68686","cljs.core/Keyword","bfuncs.algebra/&&","bfuncs.algebra/||","cljs.core.ex_info","bfuncs.steps-card/get-inner","G__68687","var_args","G__68690","bfuncs.steps-card/selection-data","js/Error","imp","bfuncs.steps_card.selection_data","cljs.core.get","cljs.core/meta","step","bfuncs.utils/count-when","cljs.core/true?","G__68698","bfuncs.steps-card/section-title","title","bfuncs.steps_card.section_title","variant","reagent-material-ui.core.grid/grid","reagent-material-ui.core.typography/typography","n","bfuncs.steps-card/data->js","data","!sel","map__68708","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","primes","terms","covers","essentials","remaining","cljs.core/vec","all-terms-covered?","cljs.core.atom","terms-covered","cljs.core.doall","cljs.core/seq","iter__27573__auto__","s__68711","i__68712","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__68715","size__27572__auto__","cljs.core/count","b__68714","cljs.core/chunk-buffer","j__68713","cljs.core.nth","cljs.core/chunk-append","p1__68705#","cljs.core/chunk-cons","cljs.core/chunk","iter__68710","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","term","cljs.core/contains?","cljs.core/reset!","cljs.core.swap_BANG_","bfuncs.utils/toggle-selection","bfuncs.utils/toggle-selection-key-down-fn","bfuncs.utils/toggle-selection-key-up-fn","cljs.core/deref","cljs.core/clj->js","iter__4529__auto__","s__68720","c__4527__auto__","size__4528__auto__","b__68722","i__68721","cljs.core/-nth","map__68723","p1__68706#","iter__68719","map__68731","prime","essential?","all-covered?","cljs.core.map","p__68725","map__68727","p__68733","map__68734","cov-set","covered","or__4126__auto__","cljs.core/not","cljs.core._EQ_","cljs.core/empty?","bfuncs.steps-card/vars->js","vars","s__68737","i__68738","c__68741","b__68740","j__68739","iter__68736","var","reagent.core.as_element","bfuncs.typesetting/$","bfuncs.typesetting.__GT_latex","bfuncs.steps-card/reset-vars!","!vars","new-vars","p__68743","map__68745","bfuncs.steps-card/variables-dnd","class","nvars","equals-sign","js/module$bfuncs$VariablesDragDrop.default","reagent.core.class_names","s__68748","b__68750","i__68749","iter__68747","cljs.core.range","bfuncs.typesetting.format_var","reagent.core.partial","bfuncs.steps-card/term-chip","format-term","p1__68751#","selection","reagent.core/cursor","cljs.core/int?","bfuncs.minimization/implicant?","bfuncs.minimization/covered-terms","reagent-material-ui.core.button-base/button-base","desc-fn","bfuncs.style/!vclasses","bfuncs.steps-card/prime-chip","format-prime","map__68772","vec__68773","p1__68766#","prime-index","prime-terms","_","sel-imp","sel-terms","sel","bfuncs.minimization.decode_selection","sel-prime-index","cov-status","clojure.set/subset?","cljs.core/chunk-first","s__68853","s__68931","s__68989","p__68804","map__68805","bfuncs.steps-card/coverage-table","katex-options","table-props","legend-labels","data-map","bfuncs.typesetting.katex_options","map__68809","sel-term","js/module$bfuncs$CoverageTable.default","cljs.core.merge","reagent.core.track","cljs.core/hash","p__68832","map__68833","bfuncs.steps-card/prime-implicants-grid","map__68845","target-form","term-length","format-vars","last?","cljs.core.partial","cljs.core/=","colon-equals","->bobj","bfuncs.minimization/imp->bobj-fn","i__68854","c__68857","b__68856","j__68855","iter__68852","p__68865","map__68866","bfuncs.steps-card/essentials-table","map__68868","s__68876","b__68878","i__68877","vec__68885","iter__68875","vec__68900","ess","eidxs","s__68890","b__68892","i__68891","iter__68889","s__68906","b__68908","i__68907","iter__68905","ix","G__68910","bfuncs.steps-card/verbalize-coll","coll","G__68911","clojure.string.join","cljs.core/butlast","cljs.core/last","tag","cljs.core/vector?","cljs.core/second","bfuncs.steps_card.verbalize_coll","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","bfuncs.steps-card/step-summary","seq68912","self__4724__auto__","children","cljs.core.into","bfuncs.steps-card/step-icon","number","p__68913","map__68914","bfuncs.steps-card/step","result","default-open","last","label","content","with-let68916","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__27840__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init68917","res__27841__auto__","!open","reagent.core.atom","toggle","e","obj__27297__auto__","f__27298__auto__","bfuncs.utils.toggle_BANG_","open","content?","bfuncs.utils/pass","reagent-material-ui.core.icon-button/icon-button","reagent-material-ui.icons.expand-more-outlined/expand-more-outlined","reagent-material-ui.core.collapse/collapse","bfuncs.steps-card/target-form-link","G__68921","p1__68919#","p1__68920#","reagent-material-ui.core.link/link","bfuncs.steps-card/choose-ex-term","cljs.core/rand-int","t","cljs.core/bit-count","p__68924","map__68925","bfuncs.steps-card/implications-grid","map__68927","dec-nrem","iff","classes68929","i__68932","c__68935","b__68934","j__68933","vec__68936","iter__68930","vec__68939","j","cov","bfuncs.typesetting/format-covered-var","bfuncs.typesetting/expression","bfuncs.typesetting/format-prime-var","p__68942","map__68943","bfuncs.steps-card/terms-section","alt","alt-text","map__68945","expr","indexed-expr","nterms","num-vars","format-num-var","outer","inner","normal-expr","G__68948","G__68949","G__68950","fexpr__68947","bfuncs.algebra/->SOP","bfuncs.algebra/->POS","bfuncs.utils.echo","full-normal-expr","bfuncs.minimization/ints->bobj","ex-term","bfuncs.utils.str_join","bfuncs.typesetting/format-latex-var","bfuncs.algebra/!","bfuncs.minimization/int->bobj","s__68952","b__68954","i__68953","iter__68951","p__68955","map__68956","bfuncs.steps-card/prime-implicants-section","map__68958","nprimes","bfuncs.glossary/gloss","bfuncs.reduction-steps/reduction-steps-section","p__68960","map__68961","bfuncs.steps-card/coverage-table-section","map__68963","term-type","prime-type","bfuncs.typesetting/$$","bfuncs.utils.maximum","bfuncs.utils/int-digits","p__68965","map__68966","bfuncs.steps-card/petricks-method-section","map__68968","vec__68969","varp","cljs.core/apply","cljs.core/vals","espanded","remaining-terms","cljs.core/get","cljs.core/keys","rem-idx","rem-cov","cljs.core.sort","nrem-cov","rem-term","rem-term-formatted","G__68973","G__68974","G__68975","s__68977","b__68979","i__68978","iter__68976","c","G__68980","G__68981","G__68983","G__68985","G__68987","cljs.core.interpose","i__68990","c__68993","b__68992","j__68991","iter__68988","p__68994","map__68995","bfuncs.steps-card/steps-card","with-let68997","init68998","!data","map__68999","bfuncs.minimization/minimization-steps","G__69001","bfuncs.typesetting/format-minterm","bfuncs.typesetting/format-maxterm","G__69002","bfuncs.typesetting/format-prime-implicant","bfuncs.typesetting/format-prime-implicate","G__69003","a","b","G__69004","reagent-material-ui.core.card/card","classes69005","obj69008","obj69006","k69007","obj69010","applied-science.js-interop.impl/in?*","js/undefined","k69009","obj69011","parent__27304__auto__","f__27305__auto__","cljs.core/assoc","goog.string/createUniqueString","reagent-material-ui.core.card-content/card-content"],"sourcesContent":["(ns bfuncs.steps-card\r\n  (:require\r\n   [\"/bfuncs/CoverageTable\" :default CoverageTable]\r\n   [\"/bfuncs/VariablesDragDrop\" :default VariablesDragDrop]\r\n   [applied-science.js-interop :as j]\r\n   [bfuncs.algebra :refer [|| && ! ->SOP ->POS &&* ||* *cancellation-rules*]]\r\n   [bfuncs.minimization :as bmin :refer [covered-terms minimization-steps quine-mccluskey-meta\r\n                                         implicant? covers? int->imp imp->bobj strict-term->int\r\n                                         consistent? imp->bobj-fn index-bobj minterms maxterms\r\n                                         ints->bobj int->bobj decode-selection]]\r\n   [bfuncs.style :refer [classes]]\r\n   [bfuncs.parsing :refer [bexpr->bobj]]\r\n   [bfuncs.typesetting-data :refer [default-macros]]\r\n   [bfuncs.reduction-steps :refer [reduction-steps-section]]\r\n   [bfuncs.typesetting :refer [expression $ $$ ->latex format-latex-var katex-options\r\n                               format-minterm format-maxterm\r\n                               format-prime-implicant format-prime-implicate\r\n                               format-var format-covered-var format-prime-var]]\r\n   [bfuncs.glossary :refer [gloss]]\r\n   [bfuncs.utils :refer [echo map-vals map-assoc\r\n                         map-reduce event-value event-checked str-join\r\n                         pass for' fori fori' conj-when log\r\n                         fn-> let-case exec timed-fn get-meta\r\n                         if-first count-when positions toggle-class\r\n                         singleton? maximal-by applied mp add-keys condf rrange\r\n                         maximum int-digits toggle-selection toggle!\r\n                         toggle-selection-key-up-fn toggle-selection-key-down-fn\r\n                         ]]\r\n   [cljs.core.async :refer [<! >! put! chan timeout] :refer-macros [go]]\r\n   [clojure.set :refer [subset?]]\r\n   [clojure.string :as str]\r\n   [goog.string :as gstr]\r\n   [reagent-material-ui.core.accordion :refer [accordion]]\r\n   [reagent-material-ui.core.accordion-actions :refer [accordion-actions]]\r\n   [reagent-material-ui.core.accordion-details :refer [accordion-details]]\r\n   [reagent-material-ui.core.accordion-summary :refer [accordion-summary]]\r\n   [reagent-material-ui.core.app-bar :refer [app-bar]]\r\n   [reagent-material-ui.core.avatar :refer [avatar]]\r\n   [reagent-material-ui.core.button :refer [button]]\r\n   [reagent-material-ui.core.button-base :refer [button-base]]\r\n   [reagent-material-ui.core.card :refer [card]]\r\n   [reagent-material-ui.core.card-content :refer [card-content]]\r\n   [reagent-material-ui.core.card-header :refer [card-header]]\r\n   [reagent-material-ui.core.chip :refer [chip]]\r\n   [reagent-material-ui.core.click-away-listener :refer [click-away-listener]]\r\n   [reagent-material-ui.core.collapse :refer [collapse]]\r\n   [reagent-material-ui.core.divider :refer [divider]]\r\n   [reagent-material-ui.core.grid :refer [grid]]\r\n   [reagent-material-ui.core.icon-button :refer [icon-button]]\r\n   [reagent-material-ui.core.link :refer [link]]\r\n   ;[reagent-material-ui.core.step-icon :refer [step-icon]]\r\n   [reagent-material-ui.core.svg-icon :refer [svg-icon]]\r\n   [reagent-material-ui.core.table :refer [table]]\r\n   [reagent-material-ui.core.table-head :refer [table-head]]\r\n   [reagent-material-ui.core.table-body :refer [table-body]]\r\n   [reagent-material-ui.core.table-container :refer [table-container]]\r\n   [reagent-material-ui.core.table-cell :refer [table-cell]]\r\n   [reagent-material-ui.core.table-row :refer [table-row]]\r\n   [reagent-material-ui.core.tooltip :refer [tooltip]]\r\n   [reagent-material-ui.core.typography :refer [typography]]\r\n   [reagent-material-ui.icons.expand-more-outlined :refer [expand-more-outlined]]\r\n   [reagent.core :as r :refer-macros [with-let]]))\r\n\r\n(defn- get-outer [form-type]\r\n  (case form-type\r\n    (:POS :max) &&\r\n    (:SOP :min) ||\r\n    (throw (ex-info (str \"Unrecognized form type: \" form-type) {}))))\r\n\r\n(defn- get-inner [form-type]\r\n  (case form-type\r\n    (:POS :max) ||\r\n    (:SOP :min) &&\r\n    (throw (ex-info (str \"Unrecognized form type: \" form-type) {}))))\r\n\r\n(defn- selection-data\r\n  ([imp] (selection-data imp (get-meta imp :step)))\r\n  ([imp step] [step (count-when true? imp) imp]))\r\n\r\n(defn- section-title\r\n  ([title] (section-title title \"h5\"))\r\n  ([title variant]\r\n   [grid {:item true, :xs 12}\r\n    [typography {:variant variant\r\n                 :class \"section-title\"}\r\n     title]])\r\n  ([title variant n]\r\n   [grid {:item true, :xs 12\r\n          :container true\r\n          :direction \"row\"\r\n          :spacing 2\r\n          :align-items \"center\"}\r\n    [grid {:item true}\r\n     [typography {:variant variant\r\n                  :class \"section-title\"}\r\n      title]]\r\n    [grid {:item true}\r\n     [typography {:variant \"subtitle1\"\r\n                  :color \"textSecondary\"\r\n                  :class \"section-count\"}\r\n      (str \"(\" n \")\")]]]))\r\n\r\n(defn- data->js [data !sel]\r\n  (let [{:keys [primes terms covers essentials remaining]} data\r\n        covers (vec covers)\r\n        all-terms-covered? (atom true)\r\n        terms-covered (fori' [i :index, term terms]\r\n                        {:term term\r\n                         :index i\r\n                         :covered (if (contains? remaining i)\r\n                                    (reset! all-terms-covered? false)\r\n                                    true)\r\n                         :coveredBy (get covers i)\r\n                         :onClick #(swap! !sel toggle-selection % term 0)\r\n                         :onKeyDown (toggle-selection-key-down-fn !sel term 0)\r\n                         :onKeyUp (toggle-selection-key-up-fn !sel term 0)})]\r\n    (clj->js\r\n     {:terms terms-covered\r\n      :rows (for' [prime primes\r\n                   :let [{i :prime-index\r\n                          step :step} (meta prime)\r\n                         essential? (contains? essentials i)\r\n                         all-covered? (atom true)]]\r\n              {:index i\r\n               :prime prime\r\n               :essential essential?\r\n               :onClick #(swap! !sel toggle-selection % prime step)\r\n               :onKeyDown (toggle-selection-key-down-fn !sel prime step)\r\n               :onKeyUp (toggle-selection-key-up-fn !sel prime step)\r\n               :cols (doall\r\n                      (map (fn [cov-set {:keys [term covered]}]\r\n                             {:term term\r\n                              :dot (and (contains? cov-set i)\r\n                                        (or covered (not (reset! all-covered? false))))\r\n                              :covered covered})\r\n                           covers\r\n                           terms-covered))\r\n               :allCovered (and (not essential?) @all-covered?)})\r\n      :allPrimesEssential\r\n      (= (count primes) (count essentials))\r\n      :noPrimesEssential\r\n      (empty? essentials)\r\n      :allTermsCovered\r\n      @all-terms-covered?})))\r\n\r\n\r\n\r\n(defn- vars->js [vars]\r\n  (clj->js (fori' [i :index\r\n                   var vars]\r\n             {:name var\r\n              :element (r/as-element [$ {:class \"var\"\r\n                                         :aria-label var}\r\n                                      (->latex var)])\r\n              :index i})))\r\n\r\n(defn- reset-vars! [!vars new-vars]\r\n  (reset! !vars (vec new-vars)))\r\n\r\n(defn- variables-dnd [{:keys [!vars class]}]\r\n  (let [vars @!vars\r\n        nvars (count vars)\r\n        equals-sign (r/as-element [$ \"\\\\colonequals\"])]\r\n    [:> VariablesDragDrop\r\n     {:key vars\r\n      :class (r/class-names class)\r\n      :variables (vars->js vars)\r\n      :rowHeaders (clj->js (for' [i (range nvars)]\r\n                             (r/as-element [$ (format-var i nvars)])))\r\n      :equalsSign equals-sign\r\n      :onChangeCommitted (r/partial reset-vars! !vars)}]))\r\n\r\n(defn term-chip\r\n  \"type should be one of #{\\\"minterm\\\" \\\"maxterm\\\"}\"\r\n  [term format-term !sel]\r\n  (let [selection @(r/cursor !sel [:selection])\r\n        class (cond\r\n                (and (int? selection)\r\n                     (= selection term)) \"selected\"\r\n                (and (implicant? selection)\r\n                     (contains? (covered-terms selection) term)) \"covered\"\r\n                :else nil)]\r\n    [button-base {:disable-ripple true\r\n                  :aria-label (let [desc-fn (get-meta format-term :desc-fn)]\r\n                                      (when desc-fn (desc-fn term)))\r\n                  :class (classes :math-chip \"term-chip clicky\" class)\r\n                  :title (when (= class \"covered\") \"Covered by selection\")\r\n                  :on-click #(swap! !sel toggle-selection % term 0)}\r\n     [$ (format-term term)]]))\r\n\r\n(defn- prime-chip [prime format-prime !sel]\r\n  (let [{:keys [prime-index step]} (meta prime)\r\n        prime-terms (covered-terms prime)\r\n        selection @(r/cursor !sel [:selection])\r\n        [_ _ sel-imp sel-terms :as sel] (decode-selection selection)\r\n        sel-prime-index (get-meta sel-imp :prime-index)\r\n        cov-status (when sel (cond (= prime-index sel-prime-index) \"selected\"\r\n                                   (subset? sel-terms prime-terms) \"covered\"))]\r\n    [button-base {:class (classes :math-chip \"clicky\" cov-status)\r\n                  :disable-ripple true\r\n                  :aria-label (let [desc-fn (get-meta format-prime :desc-fn)]\r\n                                      (when desc-fn (desc-fn prime-index)))\r\n                  :title (when (= cov-status \"covered\") \"Covers selection\")\r\n                  :on-click #(swap! !sel toggle-selection % prime step)\r\n                  :tab-index 0}\r\n     [$ (format-prime prime-index)]]))\r\n\r\n(defn coverage-table [{:keys [katex-options table-props legend-labels data-map]\r\n                       :or {katex-options (katex-options)}}]\r\n  (let [{:keys [data !sel format-term format-prime]} data-map\r\n        sel @(r/cursor !sel [:selection])\r\n        sel-prime-index (get-meta sel :prime-index)\r\n        sel-term (when (int? sel) sel)]\r\n    [:> CoverageTable\r\n     (merge\r\n      {:key @(r/track hash data)\r\n       :class (classes :coverage-table)\r\n       :data @(r/track data->js data !sel)\r\n       :primeType (get data :prime-type)\r\n       :termType (get data :term-type)\r\n       :selectedPrime (or sel-prime-index nil)\r\n       :selectedTerm (when-not sel-prime-index sel-term)\r\n       :formatColumnHeader format-term\r\n       :formatRowHeader format-prime\r\n       :katexOptions katex-options}\r\n      table-props)]))\r\n\r\n(defn prime-implicants-grid [{:keys [data format-prime !sel]}]\r\n  (let [{:keys [primes target-form term-length]} data\r\n        format-vars (format-var term-length)\r\n        last? (partial = (dec (count primes)))\r\n        colon-equals [$ \"\\\\colonequals\"]\r\n        ->bobj (imp->bobj-fn target-form (vec (range term-length)))]\r\n    [:div {:class (classes :aligned-environment)}\r\n     (fori' [i :index\r\n             prime primes]\r\n       [:<> {:key i}\r\n        [:div]\r\n        [prime-chip prime format-prime !sel]\r\n        colon-equals\r\n        [$ (->latex (->bobj prime) format-vars)\r\n         (if (last? i) \".\" \",\")]\r\n        [:div]])]))\r\n\r\n(defn- essentials-table [{:keys [data !sel format-term format-prime]}]\r\n  (let [{:keys [essentials primes terms]} data]\r\n    [:div {:class (classes :essentials-table)}\r\n     [:table>tbody\r\n      [:tr\r\n       [:td.head \"Prime\"]\r\n       [:td.head \"Uniquely Covers\"]]\r\n      (for' [[ess eidxs] essentials]\r\n        [:tr {:key ess}\r\n         [:td [prime-chip (get primes ess) format-prime !sel]]\r\n         [:td>div.terms-container\r\n          (for' [ix eidxs]\r\n            ^{:key ix} [term-chip (get terms ix) format-term !sel])]])]]))\r\n\r\n(defn- verbalize-coll\r\n  ([coll]\r\n   (case (count coll)\r\n     1 (first coll)\r\n     2 (str/join \" and \" coll)\r\n     (str (str/join \", \" (butlast coll)) \", and \" (last coll))))\r\n  ([tag coll]\r\n   (str (if (= (count coll) 1)\r\n          (if (vector? tag) (first tag) tag)\r\n          (if (vector? tag) (second tag) (str tag \"s\")))\r\n        \" \" (verbalize-coll coll))))\r\n\r\n(defn- step-summary [& children]\r\n  (into [typography {:variant \"subtitle1\"\r\n                     :color \"textSecondary\"}]\r\n        children))\r\n\r\n(defn- step-icon [number]\r\n  [:div {:class (classes :step-icon)\r\n         :aria-label (str \"step \" number)\r\n         }\r\n   number])\r\n\r\n(defn- step [{:keys [number result default-open last]\r\n              :or {default-open true}} label content]\r\n  (with-let [!open (r/atom true)\r\n             toggle (fn [e]\r\n                      (j/call e :stopPropagation)\r\n                      (toggle! !open))]\r\n    (let [open @!open\r\n          content? (some? content)]\r\n      [:div {:class (classes :step\r\n                             (when last \"last\")\r\n                             (when result \"result\")\r\n                             (if content?\r\n                               (r/class-names \"collapsable\"\r\n                                              (if open \"open\" \"closed\"))\r\n                               \"non-collapsable\"))}\r\n       [:div.icon-and-line\r\n        [step-icon (if result \"Result\" number)]\r\n        [:div.liney-box\r\n         [:svg.liney\r\n          [:line {:x1 \"50%\" :y1 0\r\n                  :x2 \"50%\" :y2 \"100%\"}]]]]\r\n       [:div.step-summary {:on-click (if content? toggle pass)}\r\n        label]\r\n       (when content?\r\n         [icon-button {:class \"step-opener\"\r\n                       :size \"small\"\r\n                       :edge \"end\"\r\n                       :aria-label (str \"expand step \" number)\r\n                       :on-click toggle}\r\n          [expand-more-outlined]])\r\n       (when content?\r\n         [collapse {:in open\r\n                    :class \"step-content\"}\r\n          content])])))\r\n\r\n(defn target-form-link [target-form]\r\n  (case target-form\r\n    :SOP [link {:target \"_blank\"\r\n                :on-click #(j/call % :stopPropagation)\r\n                :rel \"noreferrer\"\r\n                :href \"https://en.wikipedia.org/wiki/Disjunctive_normal_form\"}\r\n          \"disjunctive normal form\"]\r\n    :POS [link {:target \"_blank\"\r\n                :on-click #(j/call % :stopPropagation)\r\n                :rel \"noreferrer\"\r\n                :href \"https://en.wikipedia.org/wiki/Conjunctive_normal_form\"}\r\n          \"conjunctive normal form\"]))\r\n\r\n(defn- choose-ex-term [terms nvars]\r\n  (if (= 1 (count terms))\r\n    (first terms)\r\n    (let [i (rand-int (count terms))\r\n          t (nth terms i)]\r\n      (cond\r\n        (zero? t) (nth terms (inc i) t)\r\n        (= (bit-count t) nvars) (nth terms (dec i) t)\r\n        :else t))))\r\n\r\n(defn implications-grid [{:keys [data]}]\r\n  (let [{:keys [remaining terms]} data\r\n        dec-nrem (dec (count remaining))\r\n        iff [$ \"\\\\iff\"]]\r\n    [:div {:class (classes :implications-grid :aligned-environment)}\r\n     (fori' [j :index\r\n             [i cov] remaining\r\n             :let [term (terms i)]]\r\n       [:<> {:key i}\r\n        [:div]\r\n        [$ (format-covered-var i)]\r\n        iff\r\n        [expression {:var-fn format-prime-var\r\n                     :punct (if (< j dec-nrem) \",\" \".\")}\r\n         (apply || cov)]\r\n        [:div]])]))\r\n\r\n(defn terms-section [{:keys [!vars !sel data format-term alt alt-text]}]\r\n  (let [{:keys [terms vars expr indexed-expr target-form]} data\r\n        nvars (count vars)\r\n        nterms (count terms)\r\n        num-vars (range nvars)\r\n        format-num-var (format-var nvars)\r\n        outer (get-outer target-form)\r\n        inner (get-inner target-form)\r\n        normal-expr ((alt ->SOP ->POS) (echo :indexed indexed-expr) :simplify true)\r\n        full-normal-expr (ints->bobj num-vars outer inner terms)\r\n        ex-term (choose-ex-term terms nvars)]\r\n    [:<>\r\n     ;; Find terms\r\n     [typography {:component \"div\"}\r\n      \"Let \"\r\n      [$ (str-join \"F(\" \",\" \")=\" format-latex-var vars)]\r\n      [expression {:display true} expr]]\r\n\r\n     [typography {:variant \"h5\"}\r\n      (str \"Find \" (alt \"Minterms\" \"Maxterms\"))]\r\n     [:div {:class (classes :steps)}\r\n      [step {:number 1}\r\n       [step-summary \"Index each variable.\"]\r\n       [typography {:component \"div\"\r\n                    :class \"index-step-content\"}\r\n        \"Let \"\r\n        [variables-dnd (mp :class (classes :variables-dnd) !vars)]\r\n        [expression {:display true\r\n                     :pre (str-join \"F(\" \",\" \") = \" format-num-var (range nvars))\r\n                     :math-props {:indent \"1em\"}\r\n                     :var-fn format-num-var}\r\n         indexed-expr]]]\r\n      [step {:number 1.5}\r\n       [step-summary \"Expand to \" (target-form-link target-form) \".\"]\r\n       [expression {:var-fn format-num-var\r\n                    :display true\r\n                    :expandable true\r\n                    :pre (str-join \"{F(\" \",\" \")} =\" format-num-var (range nvars))}\r\n        normal-expr]]\r\n      [step {:number 2}\r\n       [step-summary \"Expand to full \" (target-form-link target-form) \".\"]\r\n       [expression {:var-fn format-num-var\r\n                    :display true\r\n                    :expandable true\r\n                    :pre (str-join \"{F(\" \",\" \")} =\" format-num-var (range nvars))}\r\n        full-normal-expr]]\r\n      [step {:number 3}\r\n       [step-summary \"Map each clause to its unique integer representation.\"]\r\n       [typography {:component \"div\"}\r\n        \"This is the binary integer with digits\" [$ \"b_{n-1}, \\\\dots, b_1, b_0\" \",\"]\r\n        \"where\" [$ \"b_i\"] \"is\" [$ (alt \"1\" \"0\")] \"if the clause contains\" [$ (format-num-var :i) \",\"]\r\n        \"and\" [$ (alt \"0\" \"1\")] \"if it contains\" [$ (->latex (! :i) format-num-var) \".\"]\r\n        \"For instance,\"\r\n        [:div.example-term\r\n         [$ (->latex (int->bobj num-vars inner ex-term) format-num-var)]\r\n         [:div.break-group\r\n          [$ {:class \"rel-op\"} \"\\\\mapsto\"]\r\n          [:span\r\n           (-> ex-term\r\n               (j/call :toString 2)\r\n               (j/call :padStart nvars \\0))\r\n           [:sub \"2\"]]]\r\n         [:div.break-group\r\n          [$ {:class \"rel-op\"} \"=\"]\r\n          [$ (format-term ex-term)]]]]]\r\n      [step {:number 4 :result true :last true}\r\n       [step-summary (alt-text \"Minterms\" \"Maxterms\") \" (\" nterms \")\"]\r\n       [:div {:class (classes :terms-table)}\r\n        (for' [term terms]\r\n          ^{:key term} [term-chip term format-term !sel])]\r\n       ]]\r\n     ]))\r\n\r\n(defn- prime-implicants-section [{:keys [data alt alt-text] :as data-map}]\r\n  (let [{:keys [primes target-form]} data\r\n        nprimes (count primes)]\r\n    [:<>\r\n     [typography {:variant \"h5\"}\r\n      \"Find Prime \" (alt \"Implicants\" \"Implicates\")]\r\n     [typography {:component \"div\"}\r\n      \"an\"\r\n      [gloss :implicant \"implicant\"]\r\n      \" implicant is\"\r\n      [gloss :implicate \"implicate\"]\r\n      \"coverage \"\r\n      [gloss :cover-sop \"covers\"]\r\n      \"or can have also\"\r\n      [gloss :cover-pos \"covers\"]\r\n      \"implicants.\"\r\n      ]\r\n     [reduction-steps-section data-map]\r\n     [typography {:component \"div\"}\r\n      [$ \"F\"] \"has\" [:span nprimes] \"prime\"\r\n      (if (= nprimes 1)\r\n        (alt-text \"implicant:\" \"implicate:\")\r\n        (alt-text \"implicants:\" \"implicates:\"))]\r\n     [prime-implicants-grid data-map]])\r\n  )\r\n\r\n(defn- coverage-table-section [{:keys [data format-prime format-term alt alt-text] :as data-map}]\r\n  (let [{:keys [terms target-form term-type prime-type essentials]} data]\r\n    [:<>\r\n     [typography {:component \"div\"}\r\n      \"We know that any minimal solution\"\r\n      [$ \"F^*\"] \"must be a\" (alt-text \"disjunction\" \"conjunction\")\r\n      \"of prime\" (alt-text \"implicants.\" \"implicates.\")\r\n      \"That is, for some subset of prime\" (alt-text \"implicants\" \"implicates\")\r\n      [$ (str \"\\\\P \\\\subseteq \\\\{\" (format-prime 1) \", \" (format-prime 2) \", \\\\dots \\\\}\") \",\"]\r\n      [$$ (str \"F^* = \" (alt \"\\\\bigvee\" \"\\\\bigwedge\") \"_{\" (format-prime) \"\\\\in \\\\P}\" (format-prime)) \".\"]\r\n      \"From this perspective, minimization involves determining\" [$ \"\\\\P\"] \"such that\"\r\n      ]\r\n     #_[typography {:component \"div\"}\r\n        [$ \"F^*\"] \"must be a \"\r\n        (alt-text \"dis\" \"con\") \"junction of prime implicants.\r\n         That is, for some subset of prime implicants\"\r\n        ]\r\n     [typography {:variant \"h5\"}\r\n      \"Create Coverage Table\"]\r\n     [coverage-table\r\n      (mp :table-props {:formatColumnHeader format-term\r\n                        :minColumnWidth (+ 32 (* (maximum int-digits terms) 7))}\r\n          data-map\r\n          )]\r\n     [typography {:component \"div\"}\r\n      \"TABLE EXPLANATION GOES HERE MAYBE?\"]\r\n\r\n     [typography {:component \"div\"}\r\n      \"A prime implicant is considered\"\r\n      [gloss :essential \"essential\"]\r\n      \"if it covers a\" (alt-text \"minterm\" \"maxterm\") \"that no others do.\"\r\n      (if (empty? essentials)\r\n        [:<>\r\n         \" In this case, no prime implicants are essential.\"]\r\n        [:<>\r\n         \"The following prime implicants are essential: \"\r\n         [essentials-table data-map]\r\n         ]\r\n        )\r\n      (if (empty? essentials)\r\n        \"Since there are no essential prime implicants in this case, \"\r\n        \"We remove all rows corresponding to essential primes,\r\n        columns corresponding to any terms those essential primes cover.\")]]))\r\n\r\n(defn- petricks-method-section [{:keys [data format-term format-prime alt-text] :as data-map}]\r\n  (let [{:keys [terms term-type target-form remaining essentials]} data\r\n        varp (apply && (map (applied ||) (vals remaining)))\r\n        espanded (->SOP varp)\r\n        remaining-terms (map (partial get terms) (keys remaining))\r\n        [rem-idx rem-cov] (first remaining)\r\n        rem-cov (sort rem-cov)\r\n        nrem-cov (count rem-cov)\r\n        rem-term (get terms rem-idx)\r\n        rem-term-formatted (format-term rem-term)]\r\n    [:<>\r\n     [typography {:variant \"h5\"} \"Petrick's Method\"]\r\n     [:div.steps\r\n      [step {:number 1}\r\n       [step-summary \"Remove essential prime implicants from the coverage table.\"]\r\n\r\n       [typography {:component \"div\"}\r\n        (if (empty? essentials)\r\n          \"Since there are no essential prime implicants in this case, \"\r\n          \"We remove all rows corresponding to essential primes,\r\n          columns corresponding to any terms those essential primes cover.\")]]\r\n      [step {:number 2}\r\n       [step-summary \"Derive new boolean variables from the remaining rows\r\n          and columns in the reduced coverage table.\"]\r\n       [typography\r\n        \"For each remaining prime implicant\" [$ (format-prime :i) \",\"]\r\n        \"let\" [$ \"\\\\pvar_{i}\"] \"be a boolean variable which is true when\"\r\n        [$ (str (format-prime :i) \" \\\\in \\\\P\") \".\"]\r\n        \"For each uncovered \" term-type [$ (format-term :i) \",\"]\r\n        \"let\" [$ \"\\\\cvar_{i}\"] \"be a boolean variable which is true when\"\r\n        [$ (format-term :i)] \"is covered by some element of\" [$ \"\\\\P\" \".\"]]]\r\n      [step {:number 3}\r\n       [step-summary\r\n        \"Define a function in terms of the variables \"\r\n        [$ \"\\\\pvar_1, \\\\pvar_2, \\\\dots\"]\r\n        \" that is true when all remaining terms are covered.\"]\r\n       [typography {:component \"div\"}\r\n        \"It's clear that\"\r\n        [expression {:class \"original\"\r\n                     :pre \"\\\\tag{1}\"\r\n                     :var-fn format-covered-var\r\n                     :display true\r\n                     :math-props {:options {:displayMode true}}}\r\n         (apply && remaining-terms)]\r\n        \"is satisfied when \" [$ \"F^*\"]\r\n        \"covers all remaining terms. Now, we can use the reduced coverage table to put this in terms of our\"\r\n        [$ \"\\\\pvar_i\" \".\"]\r\n        \"With essential rows hidden, it's easy to see that\"\r\n        (case nrem-cov\r\n          2 [:<>\r\n             [$ (format-prime (first rem-cov))]\r\n             \"and\"\r\n             [$ (format-prime (second rem-cov))]]\r\n          [:<>\r\n           (for' [c (butlast rem-cov)]\r\n             [$ {:key c} (format-prime c) \",\"])\r\n           \"and\"\r\n           [$ (format-prime (last rem-cov))]])\r\n        \"are the only prime implicants that cover\" [$ rem-term-formatted \".\"]\r\n        \"Thus,\"\r\n        [expression {:pre (str \"\\\\cvar_{\" rem-term \"} \\\\iff \")\r\n                     :var-fn format-prime-var\r\n                     :display false\r\n                     :punct \",\"}\r\n         (apply || rem-cov)]\r\n        \"since\" [$ \"F^*\"] \"covers\" [$ rem-term-formatted] \"if and only if\"\r\n        (case nrem-cov\r\n          1 [$ (str (format-prime (first rem-cov)) \"\\\\in \\\\P\") \".\"]\r\n          2 [:<>\r\n             [$ (str (format-prime (first rem-cov)) \"\\\\in \\\\P\")]\r\n             \"or\"\r\n             [$ (str (format-prime (second rem-cov)) \"\\\\in \\\\P\") \".\"]]\r\n          (interpose \"or\"\r\n                     (fori' [i :index, c rem-cov]\r\n                       [$ {:key c} (str (format-prime c) \"\\\\in \\\\P\") (if (< i (dec nrem-cov)) \",\" \".\")])))\r\n        \"Applying the same reasoning to each uncovered term gives the following set of relations:\"\r\n        [implications-grid data-map]\r\n\r\n        \"Substituting, we find\" [$ \"(1)\"] \"is equivalent to\"\r\n        [expression {:var-fn format-prime-var\r\n                     :display true\r\n                     :punct \".\"}\r\n         varp]]]\r\n      [step {:number 4}\r\n       [step-summary \"Expand to a sum of products and simplify.\"]\r\n       [typography {:component \"div\"}\r\n        \"Expanding to a sum of products,\"\r\n        [expression {:var-fn format-prime-var\r\n                     :display true}\r\n         espanded]]\r\n       ]\r\n      [step {:number 5, :last true}\r\n       [step-summary \"Choose minimal terms\"]\r\n       [typography \"go\"]]]\r\n     [typography\r\n      (when (seq essentials)\r\n        [:<>\r\n         \"After removing essential implicants and the columns they cover from the table, we are left with \"\r\n         (verbalize-coll \"column\" remaining-terms)\r\n         \". \"])]\r\n     ]\r\n    )\r\n  )\r\n\r\n(defn steps-card [{:keys [title expr !vars target-form]\r\n                   :or {title \"Steps\" target-form :SOP}}]\r\n  (with-let [!data (r/atom nil)]\r\n    (let [{:keys [target-form] :as data} (reset! !data (minimization-steps target-form @!vars expr))\r\n          !sel (r/atom {:selection nil, :page [0 1]})\r\n          format-term (case target-form\r\n                        :SOP format-minterm\r\n                        :POS format-maxterm)\r\n          format-prime (case target-form\r\n                         :SOP format-prime-implicant\r\n                         :POS format-prime-implicate)\r\n          alt (case target-form\r\n                :SOP (fn [a _] a)\r\n                :POS (fn [_ b] b))\r\n          alt-text (case target-form\r\n                     :SOP (fn [a _] [:span a])\r\n                     :POS (fn [_ b] [:span b]))\r\n          data-map (mp data !vars !sel format-term format-prime alt alt-text)]\r\n      [card {:class (classes :steps-card :vertical-grid)\r\n             :on-click (fn [e]\r\n                         (when (j/get-in e [:target :closest])\r\n                           (when-not (j/call-in e [:target :closest] \".clicky\")\r\n                             (swap! !sel assoc :selection nil))))\r\n             :data-ustr (gstr/createUniqueString)\r\n             :id \"steps-card\"}\r\n       ;[card-header {:class (:card-header classes)\r\n       ;              :title title}]\r\n       ;       [divider {:class (:divider classes)}]\r\n       [card-content {:class (classes :card-content)}\r\n        [typography {:variant \"h2\"}\r\n         title]\r\n        [terms-section data-map]\r\n        [prime-implicants-section data-map]\r\n        [coverage-table-section data-map]\r\n        [petricks-method-section data-map]\r\n        ]])))\r\n"]}