{"version":3,"sources":["bfuncs/typesetting.cljs"],"mappings":"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","names":["js/bfuncs","js/bfuncs.typesetting","js/bfuncs.typesetting.!g-formatters","bfuncs.typesetting/!g-formatters","reagent.core.atom","bfuncs.typesetting/tex-var-escape","string","_alt?","p1__67671#","clojure.string/replace","G__67674","bfuncs.typesetting/format-multi-char","alt?","clojure.string/blank?","vec__67679","cljs.core.nth","split","tail","clojure.string.split","fmt-split","G__67682","cljs.core/not","or__4126__auto__","cljs.core/char?","cljs.core/re-matches","bfuncs.utils/str-surround","and__4115__auto__","var_args","G__67684","bfuncs.typesetting/estimate-var-cost","js/Error","x","s","temp__27540__auto__","G__67685","len","uppers","cljs.core/count","cljs.core/re-seq","lowers","var-fn","temp__5737__auto__","v","cljs.core/ifn?","cf","cljs.core.get","cljs.core/meta","bfuncs.typesetting.estimate_var_cost","bfuncs.typesetting/format-latex-var","cljs.core/memoize","bfuncs.typesetting/estimate-subscript-cost","cljs.core/int?","G__67687","bfuncs.utils.int_digits","p1__67692#","bfuncs.typesetting/name-or","f","cljs.core/Keyword","cljs.core/name","bfuncs.typesetting/name-or-identity","bfuncs.typesetting/int-or-keyword?","cljs.core.some_fn","cljs.core/keyword?","G__67701","bfuncs.typesetting/subscript-formatter","p__67702","vec__67703","spec","bfuncs.typesetting.subscript_formatter","tf","base","desc","base-cost","pred","p1__67693#","p1__67694#","p1__67695#","cljs.core/with-meta","bfuncs.typesetting/format-prime-implicant","bfuncs.typesetting-data/bases","cljs.core/inc","bfuncs.typesetting/format-prime-implicate","bfuncs.typesetting/format-minterm","bfuncs.typesetting/format-maxterm","G__67711","bfuncs.typesetting/format-var","nvars","cljs.core.partial","cljs.core/-","i","bfuncs.typesetting/format-covered-var","bfuncs.typesetting/format-prime-var","bfuncs.typesetting/format-failure","failure","cljs.core/second","cljs.core/constantly","bfuncs.typesetting/breaking-infix","op","bfuncs.typesetting/->op-formatter","fixity","cost","bfuncs.typesetting/op-formatter","cljs.core/vector?","vec__67718","price","alt","G__67721","alt-op","p1__67713#","p2__67712#","clojure.string.join","p1__67714#","cljs.core/first","p1__67715#","vec__67722","vec__67725","l","r","sep","pl","pr","ps","p1__67716#","bfuncs.utils/str-join","p1__67717#","cljs.core.pr_str","bfuncs.typesetting/default-latex-formatters","cljs.core.assoc","p1__67728#","bfuncs.utils/map-vals","cljs.core.get_in","bfuncs.typesetting-data/operations","bfuncs.typesetting/default-text-formatters","p1__67730#","p1__67729#","bfuncs.typesetting/default-grouping-value","bfuncs.typesetting/default-grouping","bfuncs.typesetting-data/grouping","cljs.core/chunk-first","s__67964","s__68063","bfuncs.typesetting/if-paren","test","bfuncs.typesetting/paren-str","bfuncs.typesetting/with-var-fn","formatters","cljs.core.update","cljs.core/some-fn","bfuncs.typesetting/prepare-formatters","defaults","G__67731","cljs.core.merge","bfuncs.typesetting/prepare-grouping","grouping","prec","p1__67733#","p2__67732#","cljs.core.reduce","G__67734","cljs.core._EQ_","cljs.core/keys","bfuncs.typesetting/expression-formatter","map__67735","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","precedence","group?","parent-prec","child","vec__67739","operands","bfuncs.parsing.operation_operands","G__67742","G__67744","G__67745","fexpr__67743","child-prec","cljs.core.map","go","G__67748","G__67749","fexpr__67747","G__67751","G__67752","fexpr__67750","G__67754","bfuncs.typesetting/->plaintext","bfuncs.typesetting.__GT_plaintext","text-formatters","G__67760","bfuncs.typesetting/grouped-latex","latex-formatters","bfuncs.typesetting.grouped_latex","max-cost","map__67764","vec__67765","p","vec__67769","fmt","o","map__67775","vec__67776","init","marginal","vec__67780","c","items","gitems","cljs.core/transient","gidxs","temp__5733__auto__","vec__67789","g","cljs.core/next","cljs.core.conj_BANG_","G__67793","G__67794","cljs.core/persistent!","p1__67757#","p2__67758#","cljs.core.assoc_BANG_","result","groupable","G__67805","bfuncs.typesetting/->latex","bfuncs.typesetting.__GT_latex","!formatters","map__67812","cljs.core/deref","latex","bfuncs.typesetting/copy-button","value","reagent-material-ui.core.tooltip/tooltip","reagent-material-ui.core.icon-button/icon-button","bfuncs.globals/notify!","bfuncs.utils/clipboard-write!","reagent-material-ui.icons.file-copy-outlined/file-copy-outlined","bfuncs.typesetting/close-button","props","reagent-material-ui.icons.close-outlined/close-outlined","bfuncs.typesetting/katex-trust-handler","cljs.core/contains?","obj67826","k67827","obj67828","applied-science.js-interop.impl/in?*","js/undefined","bfuncs.typesetting/katex-strict-handler","error-code","_error-msg","_token","G__67834","bfuncs.typesetting/katex-macros","bfuncs.typesetting-data/default-macros","macros","obj__27297__auto__","f__27298__auto__","js/Object","cljs.core/clj->js","G__67842","bfuncs.typesetting/katex-options","bfuncs.typesetting.katex_macros","display","options","bfuncs.typesetting/katex-render","punct","string-to-render","element","js/module$node_modules$katex$dist$katex","bfuncs.typesetting.katex_options","bfuncs.typesetting/hanging-indent","indent","G__67855","bfuncs.typesetting/$","p__67856","map__67857","bfuncs.typesetting.$","a","b","class","component","opts","cljs.core.keyword","reagent.core.class_names","bfuncs.style/!vclasses","G__67861","bfuncs.typesetting/$$","p__67867","map__67868","bfuncs.typesetting.$$","arg1","arg2","p__67882","map__67883","bfuncs.typesetting/copy-panel","expr","map__67888","p1__67878#","text","latex-str","text-str","label-props","text-field-props","parent__27304__auto__","f__27305__auto__","reagent-material-ui.core.typography/typography","reagent-material-ui.core.text-field/text-field","bfuncs.typesetting/!open-expr-id","bfuncs.typesetting/handle-expression-click-fn","id","cljs.core.swap_BANG_","open-id","p__67904","map__67905","bfuncs.typesetting/expression-wrapper*","open","summary","details","reagent.core.merge_props","cljs.core.dissoc","reagent-material-ui.core.button-base/button-base","reagent-material-ui.core.hidden/hidden","reagent-material-ui.core.collapse/collapse","reagent-material-ui.core.swipeable-drawer/swipeable-drawer","bfuncs.utils/pass","cljs.core/reset!","bfuncs.typesetting/expression-wrapper","with-let67910","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__27840__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init67911","res__27841__auto__","cljs.core/random-uuid","p__67914","map__67915","bfuncs.typesetting/minterms-expression","minterms","unspecified","cljs.core/empty?","bfuncs.utils.str_join","bfuncs.utils.non_empties","cljs.core.sort","p__67923","map__67924","bfuncs.typesetting/maxterms-expression","maxterms","p__67936","map__67937","bfuncs.typesetting/expression","expandable","wrap","pre","post","math-props","wrapper-props","math-content","G__67946","bfuncs.typesetting/->label","p__67949","vec__67950","bfuncs.typesetting.__GT_label","_","alt-o","G__67953","vec__67955","bfuncs.typesetting/options-group","operation","group-key","formats","with-let67959","init67960","change","bfuncs.utils/assoc-in'","cljs.core.into","reagent-material-ui.lab.toggle-button-group/toggle-button-group","reagent.core/cursor","cljs.core.doall","cljs.core/seq","iter__27573__auto__","i__67965","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__67968","size__27572__auto__","b__67967","cljs.core/chunk-buffer","j__67966","map__67969","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__67963","cljs.core/chunk-rest","map__67973","cljs.core/cons","cljs.core/rest","name","reagent-material-ui.lab.toggle-button/toggle-button","G__67977","bfuncs.typesetting/toggle-set","p__67979","map__67980","bfuncs.typesetting.toggle_set","ops","more","title","!open","static?","tset","iter__4529__auto__","s__67985","c__4527__auto__","size__4528__auto__","b__67987","i__67986","cljs.core/-nth","map__67989","iter__67984","map__67991","key","cljs.core.conj","s__67998","b__68000","i__67999","map__68001","iter__67997","map__68005","reagent-material-ui.core.button/button","bfuncs.utils.toggle_BANG_","bfuncs.typesetting/grouping-marks","cljs.core/vec","cljs.core.map_indexed","G__68008","reagent.core.as_element","bfuncs.typesetting/preview-box","!operators-open","!relations-open","bfuncs.typesetting-data/demo-expression","bfuncs.typesetting-data/demo-expression-extra-operators","bfuncs.typesetting-data/demo-expression-extra-relations","p__68016","map__68017","bfuncs.typesetting/typesetting-menu","anchor","on-open","on-close","with-let68019","init68020","!demo-formatters","!tip-visible","!observer","cljs.core.atom","update-and-close","e","cancel-and-close","observer-chan","cljs.core.async.chan","root-ref","cljs.core.async.put_BANG_","js/IntersectionObserver","p__68023","vec__68024","entry","obj68036","k68037","obj68038","target-ref","target","c__26934__auto__","cljs.core.async.impl.dispatch/run","f__26935__auto__","switch__26849__auto__","state_68049","state_val_68050","cljs.core.async.impl.ioc-helpers/take!","inst_68040","inst_68045","inst_68046","inst_68047","statearr-68051","cljs.core.async.impl.ioc-helpers/return-chan","statearr-68053","state-machine__26850__auto__","ret-value__26851__auto__","result__26852__auto__","cljs.core/keyword-identical?","ex__26853__auto__","e68055","statearr-68056","statearr-68057","state__26936__auto__","statearr-68059","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","slider-value","reagent-material-ui.core.slider/slider","i__68064","c__68067","b__68066","j__68065","map__68068","iter__68062","map__68070","tip","p1__68014#","cljs.core/every?","G__68072","cljs.core/key","cljs.core/val","bfuncs.typesetting/measure","norm","px","obj68079","k68080","obj68081","rem","goog.dom/removeChildren","js/parseFloat","p__68082","vec__68083","bfuncs.typesetting/compute-cost","G__68086","vec__68088","bfuncs.utils.echo","cljs.core.mapv","bfuncs.typesetting/operator-calibration","sq","goog.dom/createElement","obj68092","k68093","obj68094","cljs.core.prn","m","op-key","cljs.core.update_in","format"],"sourcesContent":["(ns bfuncs.typesetting\r\n  (:require\r\n   [reagent.core :as r]\r\n   [clojure.string :as str]\r\n   [applied-science.js-interop :as j]\r\n   [goog.dom :as gdom]\r\n   [cljs.core.async :refer [put! <! >! chan] :refer-macros [go]]\r\n   [bfuncs.utils\r\n    :refer [assoc-in' echo map-vals clipboard-write! for' fori' log let-case get-meta\r\n            int-digits pass mp condo-> re-count toggle! str-surround str-join non-empties]]\r\n   [bfuncs.parsing :refer [operation-operands]]\r\n   [bfuncs.globals :refer [notify!]]\r\n   [bfuncs.style :refer [classes]]\r\n   [bfuncs.typesetting-data :as data]\r\n   ;region [mui componenets ...]\r\n   [reagent-material-ui.core.button :refer [button]]\r\n   [reagent-material-ui.core.icon-button :refer [icon-button]]\r\n   [reagent-material-ui.core.typography :refer [typography]]\r\n   [reagent-material-ui.core.button-base :refer [button-base]]\r\n   [reagent-material-ui.core.swipeable-drawer :refer [swipeable-drawer]]\r\n   [reagent-material-ui.core.hidden :refer [hidden]]\r\n   [reagent-material-ui.core.slider :refer [slider]]\r\n   [reagent-material-ui.lab.toggle-button :refer [toggle-button]]\r\n   [reagent-material-ui.lab.toggle-button-group :refer [toggle-button-group]]\r\n   [reagent-material-ui.icons.close-outlined :refer [close-outlined]]\r\n   [reagent-material-ui.icons.file-copy-outlined :refer [file-copy-outlined]]\r\n   [reagent-material-ui.core.tooltip :refer [tooltip]]\r\n   [reagent-material-ui.core.collapse :refer [collapse]]\r\n   [reagent-material-ui.core.text-field :refer [text-field]]\r\n   ;endregion\r\n   [\"katex\" :as katex]))\r\n\r\n\r\n(defonce !g-formatters (r/atom {}))\r\n\r\n(defn- tex-var-escape [string _alt?]\r\n  (str/replace\r\n   string\r\n   #\"[%${}_#&~^-]\"\r\n   #(case %\r\n      \"~\" \"{\\\\sim}\"\r\n      \"^\" \"{\\\\char94}\"\r\n      \"-\" \"\\\\text{--}\"\r\n      (str \"\\\\\" %))))\r\n\r\n(defn- format-multi-char [string alt?]\r\n  (if (str/blank? string)\r\n    \"{}\"\r\n    (let [[split tail] (str/split string #\"_\" 2)\r\n          fmt-split (cond->> (tex-var-escape split alt?)\r\n                      (not (or (char? split)\r\n                               (re-matches #\"\\d*\" split)))\r\n                      (str-surround \"\\\\mathit{\"\r\n                                    (if (and alt? (not tail))\r\n                                      \"\\\\,}\"\r\n                                      \"}\")))]\r\n      (if tail\r\n        (str \"{\" fmt-split \"_{\" (format-multi-char tail alt?) \"}}\")\r\n        fmt-split))))\r\n\r\n(defn- estimate-var-cost\r\n  ([x]\r\n   (let [s (str x)]\r\n     (let-case [len (count s)]\r\n       0 0\r\n       1 (if (re-matches #\"[A-Z]\" s)\r\n           (data/cost :uppercase)\r\n           (data/cost :lowercase))\r\n       (let [uppers (re-count #\"[A-Z]\" s)\r\n             lowers (re-count #\"[a-z]\" s)]\r\n         (+ (* (data/cost :uppercase-italic) uppers)\r\n            (* (data/cost :lowercase-italic) lowers)\r\n            (* (data/cost :digit-italic) (- len uppers lowers)))))))\r\n  ([x var-fn]\r\n   (if-some [v (when (ifn? var-fn) (var-fn x))]\r\n     (if-some [cf (get-meta var-fn :cost-fn)]\r\n       (cf x)\r\n       (estimate-var-cost v))\r\n     (estimate-var-cost x))))\r\n\r\n(def format-latex-var\r\n  (memoize\r\n   (fn [x alt?]\r\n     (let [s (str x)]\r\n       (if (char? s)\r\n         (tex-var-escape s alt?)\r\n         (format-multi-char s alt?)\r\n         #_(str \"\\\\mathit{\" (tex-var-escape s) \"}\"))))))\r\n\r\n(defn- estimate-subscript-cost [x]\r\n  (if (int? x)\r\n    (cond-> (* (int-digits x) (data/cost :digit-script))\r\n      (neg? x) (+ (data/cost :operator-script)))\r\n    (let [s (str x)]\r\n      (+ (* (re-count #\"[A-Z]\" s) (data/cost :uppercase-script))\r\n         (* (re-count #\"[a-z]\" s) (data/cost :lowercase-script))\r\n         (* (re-count #\"[-+]\" s) (data/cost :operator-script))\r\n         (* (re-count #\"\\d\" s) (data/cost :digit-script))))))\r\n\r\n(defn name-or [f] #(if (keyword? %) (name %) (f %)))\r\n\r\n(defn name-or-identity [x]\r\n  (if (keyword? x)\r\n    (name x)\r\n    x))\r\n\r\n(def int-or-keyword? (some-fn int? keyword?))\r\n\r\n(defn- subscript-formatter\r\n  ([spec] (subscript-formatter spec int-or-keyword? name-or-identity))\r\n  ([spec tf] (subscript-formatter spec int-or-keyword? tf))\r\n  ([[base desc base-cost] pred tf]\r\n   (with-meta\r\n    (fn\r\n      ([] (str base))\r\n      ([x] (when (pred x) (str base \"_{\" (tf x) \"}\"))))\r\n    {:cost-fn #(+ base-cost (estimate-subscript-cost (tf %)))\r\n     :text-fn #(when (pred %) (str base (tf %)))\r\n     :desc-fn #(when (pred %) (str desc \" \" (tf %)))})))\r\n\r\n\r\n(def format-prime-implicant\r\n  (subscript-formatter (data/bases :pimplicant) (name-or inc)))\r\n\r\n(def format-prime-implicate\r\n  (subscript-formatter (data/bases :pimplicate) (name-or inc)))\r\n\r\n(def format-minterm\r\n  (subscript-formatter (data/bases :minterm)))\r\n\r\n(def format-maxterm\r\n  (subscript-formatter (data/bases :maxterm)))\r\n\r\n(defn format-var\r\n  ([nvars]\r\n   (subscript-formatter (data/bases :var) (name-or (partial - (dec nvars)))))\r\n  ([i nvars]\r\n   (when (int-or-keyword? i)\r\n     (str \"\\\\var_{\" (if (keyword? i)\r\n                      (name i)\r\n                      (- nvars i 1)) \"}\"))))\r\n\r\n(def format-covered-var\r\n  (subscript-formatter (data/bases :cvar)))\r\n\r\n(def format-prime-var\r\n  (subscript-formatter (data/bases :pvar) (name-or inc)))\r\n\r\n;TODO escape\r\n(def ^:private format-failure\r\n  (with-meta (fn [failure]\r\n               (str \"{\\\\color{red} \" (second failure) \"}\"))\r\n             {:cost (constantly 100)}))\r\n\r\n(defn- breaking-infix [op]\r\n  (str \" \\\\allowbreak \" op \" \\\\nobreak \"))\r\n\r\n(defn- ->op-formatter [f fixity cost]\r\n  (with-meta f {:fixity fixity, :cost cost}))\r\n\r\n(defn- op-formatter [spec]\r\n  (cond\r\n    (vector? spec) (let [[fixity op price alt] spec]\r\n                     (case fixity\r\n                       :constant (->op-formatter (constantly op)\r\n                                                 fixity [price 0])\r\n                       :infix (let [alt-op (or alt (breaking-infix op))]\r\n                                (->op-formatter #(str/join (if %2 alt-op op) %1)\r\n                                                fixity [0 price]))\r\n                       :prefix (->op-formatter #(str op (first %))\r\n                                               fixity [price 0])\r\n                       :postfix (->op-formatter #(str (first %) op)\r\n                                                fixity [price 0])\r\n                       :matchfix (let [[l r sep] op, [pl pr ps] price]\r\n                                   (->op-formatter (if sep\r\n                                                     (partial str-join l r sep)\r\n                                                     #(str l (str/join %) r))\r\n                                                   fixity [(+ pl pr) (or ps 0)]))))\r\n    (string? spec) (->op-formatter #(str/join spec %) :infix nil)\r\n    (ifn? spec) spec\r\n    :else (-> spec\r\n              pr-str\r\n              (str \" is not a function, string, or vector of the form [fixity ops price macros].\")\r\n              js/Error.\r\n              throw)))\r\n\r\n(def ^:private default-latex-formatters\r\n  (assoc (map-vals\r\n          #(-> % (get-in [:formats 0 :latex]) op-formatter)\r\n          data/operations)\r\n    :instaparse/failure format-failure\r\n    :var format-latex-var))\r\n\r\n(def ^:private default-text-formatters\r\n  (assoc (map-vals\r\n          #(-> % (get-in [:formats 0 :text]) op-formatter)\r\n          data/operations)\r\n    :instaparse/failure format-failure\r\n    :var #(str %)  #_\"only want 1 arg\"))\r\n\r\n(def ^:private default-grouping-value 2)\r\n\r\n(def ^:private default-grouping\r\n  (get-in data/grouping [default-grouping-value :spec]))\r\n\r\n(defn- if-paren\r\n  [test x] (if test (str \"(\" x \")\") x))\r\n\r\n(defn- paren-str [x] (str \"(\" x \")\"))\r\n\r\n#_(defn- matchfix-formatter? [formatter]\r\n    (boolean (some-> formatter (get-meta :spec) first (= :matchfix))))\r\n\r\n(defn- with-var-fn [formatters var-fn]\r\n  (if (some? var-fn)\r\n    (update formatters :var (partial some-fn var-fn))\r\n    formatters))\r\n\r\n(defn- prepare-formatters\r\n  [formatters defaults var-fn]\r\n  (cond-> (merge defaults formatters)\r\n    var-fn (update :var (partial some-fn var-fn))))\r\n\r\n\r\n(defn- prepare-grouping [grouping formatters]\r\n  \"Prevents matchfix formatters from being grouped by setting their precedence to ##NaN\"\r\n  (update grouping\r\n    :precedence\r\n    (fn [prec]\r\n      (reduce #(if (some-> %2 formatters meta :fixity (= :matchfix))\r\n                 (assoc %1 %2 ##NaN)\r\n                 %1)\r\n              prec (keys prec)))))\r\n\r\n(defn- expression-formatter\r\n  [formatters grouping alt]\r\n  (let [{:keys [precedence group?]} (prepare-grouping grouping formatters)]\r\n    (fn go [parent-prec child]\r\n      (let [[op operands] (operation-operands child true)]\r\n        (case op\r\n          (:var :TRUE :FALSE) ((formatters op) (first operands) alt)\r\n          (let [child-prec (precedence op)]\r\n            (condo-> (map (partial go child-prec) operands)\r\n              true ((formatters op) alt)\r\n              (group? parent-prec child-prec) paren-str)))))))\r\n\r\n(defn ->plaintext\r\n  ([x] (->plaintext x nil nil nil))\r\n  ([x text-formatters grouping var-fn]\r\n   (if (some? x)\r\n     ((expression-formatter (prepare-formatters text-formatters\r\n                                                default-text-formatters\r\n                                                (get-meta var-fn :text-fn))\r\n                            (merge default-grouping grouping)\r\n                            false)\r\n      ##-Inf x)\r\n     \"\")))\r\n\r\n(defn- grouped-latex\r\n  ([x latex-formatters grouping var-fn]\r\n   (grouped-latex x latex-formatters grouping var-fn 16))\r\n  ([x latex-formatters grouping var-fn max-cost]\r\n   (if-not (some? x)\r\n     \"\"\r\n     (let [formatters (prepare-formatters latex-formatters\r\n                                          default-latex-formatters\r\n                                          var-fn)\r\n           {:keys [precedence group?]} (prepare-grouping (merge default-grouping grouping)\r\n                                                         formatters)\r\n           p (fn p [parent-prec child]\r\n               (when (some? child)\r\n                 (let [[op operands] (operation-operands child true)\r\n                       fmt (formatters op)]\r\n                   (if (= op :var)\r\n                     (let [o (first operands)]\r\n                       [(fmt o true) (estimate-var-cost o var-fn) false])\r\n                     (let [child-prec (precedence op)\r\n                           {fixity :fixity\r\n                            [init marginal] :cost} (meta fmt)]\r\n                       (if (= fixity :constant)\r\n                         [(fmt) init false]\r\n                         (let [[r c] (loop [i 0\r\n                                            items operands\r\n                                            gitems (transient [])\r\n                                            gidxs (transient []) ; indices of groupable items\r\n                                            cost init]\r\n                                       (if-let [[r c g] (p child-prec (first items))]\r\n                                         (recur (inc i)\r\n                                                (next items)\r\n                                                (conj! gitems r)\r\n                                                (if (and g (<= c max-cost))\r\n                                                  (conj! gidxs i)\r\n                                                  gidxs)\r\n                                                (+ cost c marginal))\r\n                                         [(fmt (persistent!\r\n                                                (if (<= cost max-cost)\r\n                                                  gitems\r\n                                                  ;; when cost of this expression exceeds max-cost,\r\n                                                  ;; surround groupable sub-expressions\r\n                                                  (reduce #(assoc! %1 %2 (str \"{\" (gitems %2) \"}\"))\r\n                                                          gitems\r\n                                                          (persistent! gidxs))))\r\n                                               true)\r\n                                          cost]))]\r\n                           (if (group? parent-prec child-prec)\r\n                             [(paren-str r) (+ c (data/cost :parentheses)) true]\r\n                             [r c true]))))))))\r\n           [result cost groupable] (p ##-Inf x)]\r\n       (if (and groupable\r\n                (<= cost max-cost))\r\n         (str \"{\" result \"}\")\r\n         result)))))\r\n\r\n(defn ->latex\r\n  ([x] (->latex x nil nil nil true))\r\n  ([x var-fn] (->latex x !g-formatters var-fn 16))\r\n  ([x !formatters var-fn]\r\n   (->latex x !formatters var-fn 16))\r\n  ([x !formatters var-fn max-cost]\r\n   (let [{:keys [latex grouping]} @!formatters]\r\n     (->latex x latex grouping var-fn max-cost)))\r\n  ([x latex-formatters grouping var-fn max-cost]\r\n   (if-not (some? x)\r\n     \"\"\r\n     (if max-cost\r\n       (grouped-latex x latex-formatters grouping var-fn max-cost)\r\n       ((expression-formatter (prepare-formatters latex-formatters\r\n                                                  default-latex-formatters\r\n                                                  var-fn)\r\n                              (merge default-grouping grouping)\r\n                              false)\r\n        ##-Inf x)))))\r\n\r\n\r\n;; Components\r\n\r\n(defn copy-button [value]\r\n  [tooltip {:title \"Copy\"\r\n            :placement \"left\"}\r\n   [icon-button {:class \"copy-button\"\r\n                 :edge \"end\"\r\n                 :on-click #(notify! {:message (if (clipboard-write! value)\r\n                                                 \"Copied!\"\r\n                                                 \"Clipboard unavailable.\")\r\n                                      :auto-hide-duration\r\n                                      1000\r\n                                      :immediate true})\r\n                 :size \"small\"}\r\n    [file-copy-outlined]]])\r\n\r\n(defn- close-button [props]\r\n  [icon-button props\r\n   [close-outlined]])\r\n\r\n(defn- katex-trust-handler [x]\r\n  (contains?\r\n   #{\"\\\\htmlClass\" \"\\\\htmlStyle\"}\r\n   (j/get x :command)))\r\n\r\n(defn- katex-strict-handler\r\n  [error-code _error-msg _token]\r\n  (if (= error-code \"htmlExtension\")\r\n    \"ignore\"\r\n    \"warn\"))\r\n\r\n(defn- katex-macros\r\n  ([] data/default-macros)\r\n  ([macros] (if macros\r\n              (j/call js/Object :assign (clj->js macros) data/default-macros)\r\n              data/default-macros)))\r\n\r\n(defn katex-options\r\n  ([] #js {:displayMode false\r\n           :throwOnError false\r\n           :macros (katex-macros)\r\n           :trust katex-trust-handler\r\n           :strict katex-strict-handler\r\n           :maxExpand ##Inf})\r\n  ([display macros options]\r\n   (j/call js/Object :assign\r\n     #js {:displayMode display\r\n          :throwOnError false\r\n          :macros (katex-macros macros)\r\n          :trust katex-trust-handler\r\n          :strict katex-strict-handler\r\n          :maxExpand ##Inf}\r\n     options)))\r\n\r\n(defn- katex-render [latex punct display macros options]\r\n  (let [string-to-render (if punct\r\n                           (str latex \" \\\\htmlClass{punct}{\" punct \"}\")\r\n                           (str latex))]\r\n    (fn [element]\r\n      (when element\r\n        (j/call katex :render\r\n          string-to-render\r\n          element\r\n          (katex-options display macros options))))))\r\n\r\n(defn- hanging-indent [indent]\r\n  (when indent\r\n    {:padding-left indent\r\n     :text-indent (if (number? indent)\r\n                    (- indent)\r\n                    (str \"-\" indent))}))\r\n\r\n(defn $\r\n  ([latex] ($ nil latex nil))\r\n  ([a b] (if (string? a) ($ nil a b) ($ a b nil)))\r\n  ([{:keys [class macros options indent component] :as opts} latex punct]\r\n   [(or component (keyword opts) :span)\r\n    {:class (classes :math class)\r\n     :ref (katex-render latex punct false macros options)\r\n     :style (hanging-indent indent)}]))\r\n\r\n(defn $$\r\n  ([latex] ($$ nil latex nil))\r\n  ([arg1 arg2] (if (string? arg1) ($$ nil arg1 arg2) ($$ arg1 arg2 nil)))\r\n  ([{:keys [class macros options indent component] :as props} latex punct]\r\n   [(or component (keyword props) :div)\r\n    {:class (classes :math \"display\" class)\r\n     :ref (katex-render latex punct true macros options)\r\n     :style (hanging-indent indent)}]))\r\n\r\n(defn- copy-panel [{:keys [!formatters var-fn]\r\n                    :or {!formatters !g-formatters}}\r\n                   expr]\r\n  (let [{:keys [latex text grouping]} @!formatters\r\n        latex-str (->latex expr latex grouping var-fn false)\r\n        text-str (->plaintext expr text grouping var-fn)\r\n        label-props {:class \"label\"\r\n                     :component \"span\"\r\n                     :variant \"subtitle2\"}\r\n        text-field-props {:class \"copy-field\"\r\n                          :full-width true\r\n                          :multiline true\r\n                          :rows-max 3\r\n                          :variant \"outlined\"\r\n                          :InputProps {:read-only true\r\n                                       :on-focus #(j/call-in % [:target :select])\r\n                                       :class \"copy-field-input\"\r\n                                       :spell-check false}}]\r\n    [:div {:class (classes :copy-panel)}\r\n     [:div.row\r\n      [typography label-props\r\n       [:span \"Text\"]]\r\n      [text-field (assoc text-field-props\r\n                    :value text-str)]\r\n      [copy-button text-str]]\r\n     [:div.row\r\n      [typography label-props\r\n       [:span \"LaTeX\"]]\r\n      [text-field (assoc text-field-props\r\n                    :value latex-str)]\r\n      [copy-button latex-str]]]))\r\n\r\n(def !open-expr-id (r/atom nil))\r\n\r\n(defn- handle-expression-click-fn [id]\r\n  (fn []\r\n    (swap! !open-expr-id (fn [open-id] (when-not (= id open-id) id)))))\r\n\r\n(defn- expression-wrapper* [{:keys [component]\r\n                             :or {component :div}\r\n                             :as props}\r\n                            id open summary details]\r\n  [component (r/merge-props {:class (classes :expandable-expression (if open \"open\" \"closed\"))}\r\n                            (dissoc props :component))\r\n   [button-base {:on-click (handle-expression-click-fn id)\r\n                 :focus-ripple true\r\n                 :class \"summary\"}\r\n    summary]\r\n   [hidden {:xs-down true}\r\n    [collapse {:in open\r\n               :mountOnEnter true\r\n               :class (classes :fade-collapse \"details\")}\r\n     details]]\r\n   [hidden {:sm-up true}\r\n    [swipeable-drawer {:open open\r\n                       :class (classes :expression-drawer)\r\n                       :anchor \"bottom\"\r\n                       :disable-discovery true\r\n                       :disable-swipe-to-open true\r\n                       :on-open pass\r\n                       :on-close #(reset! !open-expr-id nil)}\r\n     [close-button {:on-click #(reset! !open-expr-id nil)\r\n                    :edge \"end\"\r\n                    :class \"close-button\"}]\r\n     summary\r\n     details\r\n     [typography {:class \"notification-space\"\r\n                  :variant \"body2\"}\r\n      \".\"]]]])\r\n\r\n(defn- expression-wrapper [props summary details]\r\n  (r/with-let [id (random-uuid)]\r\n    [expression-wrapper* props id (= id @!open-expr-id) summary details]))\r\n\r\n(defn minterms-expression [{:keys [minterms unspecified]}]\r\n  [$$ (if (and (empty? minterms) (empty? unspecified))\r\n        (->latex [:FALSE])\r\n        (str-join \"\\\\sum{\" \" + \" \"}\"\r\n                  (non-empties (when-not (empty? minterms)\r\n                                 (str-join \"m(\" \",\" \")\" (sort minterms)))\r\n                               (when-not (empty? unspecified)\r\n                                 (str-join \"d(\" \",\" \")\" (sort unspecified))))))])\r\n\r\n(defn maxterms-expression [{:keys [maxterms unspecified]}]\r\n  [$$ (if (and (empty? maxterms) (empty? unspecified))\r\n        (->latex [:TRUE])\r\n        (str-join \"\\\\prod{\" \" \\\\cdot \" \"}\"\r\n                  (non-empties (when-not (empty? maxterms)\r\n                                 (str-join \"M(\" \",\" \")\" (sort maxterms)))\r\n                               (when-not (empty? unspecified)\r\n                                 (str-join \"D(\" \",\" \")\" (sort unspecified))))))])\r\n\r\n(defn expression\r\n  [{:keys [display !formatters expandable wrap class var-fn\r\n           pre post math-props punct max-cost wrapper-props]\r\n    :or {wrap true, max-cost 16, !formatters !g-formatters}}\r\n   expr]\r\n  (when (some? expr)\r\n    (let [formatters @!formatters\r\n          latex (grouped-latex expr\r\n                               (get formatters :latex)\r\n                               (get formatters :grouping)\r\n                               var-fn\r\n                               max-cost)\r\n          math-content [(if (or expandable display) $$ $)\r\n                        math-props\r\n                        (str pre latex post)\r\n                        punct]]\r\n      (if-not expandable\r\n        [(if display :div :span) {:class (classes :expression class \"non-expandable\")}\r\n         math-content]\r\n        [expression-wrapper wrapper-props\r\n         math-content\r\n         [copy-panel (mp !formatters var-fn) expr]]))))\r\n\r\n(defn- ->label\r\n  ([spec] (->label spec \"a\" \"b\"))\r\n  ([spec a] (->label spec a \"b\"))\r\n  ([[fixity o _ alt-o] a b]\r\n   (let [op (or alt-o o)]\r\n     (case fixity\r\n       :constant (str op)\r\n       :infix (str a op b)\r\n       :prefix (str op a)\r\n       :postfix (str a op)\r\n       :matchfix (let [[l r s] op]\r\n                   (if s\r\n                     (str l a s b r)\r\n                     (str l a r)))))))\r\n\r\n(defn- options-group [operation group-key formats !formatters]\r\n  (r/with-let [change (fn [_ i]\r\n                        (when (some? i)\r\n                          (let [v (nth formats i)]\r\n                            (swap! !formatters\r\n                                   assoc-in'\r\n                                   [:latex group-key] (op-formatter (get v :latex))\r\n                                   [:text group-key] (op-formatter (get v :text))\r\n                                   [:choices group-key] i))))]\r\n    [:div.toggle-button-container\r\n     [typography {:class \"label\"\r\n                  :variant \"caption\"}\r\n      operation]\r\n     (into [toggle-button-group {:size \"small\"\r\n                                 :exclusive true\r\n                                 :aria-label operation\r\n                                 :value (or @(r/cursor !formatters [:choices group-key]) 0)\r\n                                 :on-change change}]\r\n           (fori' [i :index\r\n                   {:keys [name latex]} formats]\r\n             [toggle-button {:key name\r\n                             :value i\r\n                             :title name\r\n                             :aria-label name\r\n                             :class (classes :math-toggle)}\r\n              [$ (->label latex)]]))]))\r\n\r\n(defn- toggle-set\r\n  ([props !formatters] (toggle-set props !formatters nil))\r\n  ([{:keys [ops more title class]} !formatters !open]\r\n   (let [static? (or (empty? more) (nil? !open))\r\n         tset [:div {:class (classes \"toggle-set-wrapper\"\r\n                                     class\r\n                                     (if static? \"static\" \"expanding\"))}\r\n               (into [:div.toggle-set.primary]\r\n                     (for' [key ops\r\n                            :let [{:keys [operation formats]} (get data/operations key {})]]\r\n                       (when formats\r\n                         [options-group operation key formats !formatters])))]]\r\n     [:div.section\r\n      (when title\r\n        [typography {:class \"section-title\"\r\n                     :variant \"subtitle1\"}\r\n         title])\r\n      (if static?\r\n        tset\r\n        (let [open @!open]\r\n          (conj tset\r\n                [collapse {:class (classes :fade-collapse)\r\n                           :in open}\r\n                 (into [:div.toggle-set.secondary]\r\n                       (for' [key more\r\n                              :let [{:keys [operation formats]} (get data/operations key {})]]\r\n                         (when formats\r\n                           [options-group operation key formats !formatters])))]\r\n                [:div.more-button\r\n                 [button {:on-click #(toggle! !open)\r\n                          :size \"small\"}\r\n                  (if open \"Less\" \"More\")]])))])))\r\n\r\n(def ^:private grouping-marks\r\n  (vec (map-indexed (fn [i x]\r\n                      {:value i\r\n                       :label (some-> x (get :label) r/as-element)})\r\n                    data/grouping)))\r\n\r\n(defn- preview-box [props !formatters !operators-open !relations-open]\r\n  [:div.preview-box props\r\n   [typography {:variant \"caption\"\r\n                :class \"label\"}\r\n    \"Preview\"]\r\n   [:div.expression-container\r\n    [expression {:display true\r\n                 :class \"demo-expression\"\r\n                 :!formatters !formatters\r\n                 :wrap true\r\n                 :max-cost 15}\r\n     data/demo-expression]\r\n    [collapse {:class (classes :fade-collapse)\r\n               :in @!operators-open}\r\n     [expression {:display true\r\n                  :class \"demo-expression-extra-operators\"\r\n                  :!formatters !formatters\r\n                  :wrap true\r\n                  :max-cost 15}\r\n      data/demo-expression-extra-operators]]\r\n    [collapse {:class (classes :fade-collapse)\r\n               :in @!relations-open}\r\n     [expression {:display true\r\n                  :class \"demo-expression-extra-relations\"\r\n                  :!formatters !formatters\r\n                  :wrap true\r\n                  :max-cost 15}\r\n      data/demo-expression-extra-relations]]]])\r\n\r\n(defn typesetting-menu\r\n  [{:keys [anchor on-open on-close open]\r\n    :or {anchor \"right\"}}]\r\n  (r/with-let [!demo-formatters (r/atom @!g-formatters)\r\n               !tip-visible (r/atom false)\r\n               !observer (atom nil)\r\n               !operators-open (r/atom false)\r\n               !relations-open (r/atom false)\r\n               update-and-close (fn [e]\r\n                                  (reset! !g-formatters @!demo-formatters)\r\n                                  (on-close e))\r\n               cancel-and-close (fn [e]\r\n                                  (reset! !demo-formatters @!g-formatters)\r\n                                  (on-close e))\r\n               observer-chan (chan 1)\r\n               root-ref (fn [element]\r\n                          (when (and element (not @!observer))\r\n                            (put! observer-chan\r\n                                  (js/IntersectionObserver.\r\n                                   (fn [[entry]]\r\n                                     (j/call-in entry [:target :classList :toggle]\r\n                                       \"stuck\"\r\n                                       (not (j/get entry :isIntersecting))))\r\n                                   (j/obj :threshold 1.0\r\n                                          :root element)))))\r\n               target-ref (fn [target]\r\n                            (when (and target (not @!observer))\r\n                              (go (let [observer (<! observer-chan)]\r\n                                    (j/call observer :observe target)\r\n                                    (reset! !observer observer)))))]\r\n    [swipeable-drawer {:anchor anchor\r\n                       :open open\r\n                       :disable-discovery true\r\n                       :disable-swipe-to-open true\r\n                       :class (classes :typesetting-menu)\r\n                       :ModalProps {:keepMounted true}\r\n                       :on-open (fn [e]\r\n                                  (reset! !demo-formatters @!g-formatters)\r\n                                  (on-open e))\r\n                       :on-close update-and-close}\r\n     [:div.drawer-content {:ref root-ref}\r\n      [:div.title-and-close\r\n       [typography {:variant \"h4\"}\r\n        \"Typesetting\"]\r\n       [close-button {:on-click update-and-close\r\n                      :color \"inherit\"\r\n                      :edge \"end\"}]]\r\n      [preview-box {:ref target-ref} !demo-formatters !operators-open !relations-open]\r\n      [toggle-set {:title \"Logical Operators\"\r\n                   :class \"operators\"\r\n                   :ops [:NOT :AND :OR :XOR]\r\n                   :more [:NAND :NOR :XNOR]}\r\n       !demo-formatters !operators-open]\r\n      [toggle-set {:title \"Relational Operators\"\r\n                   :class \"relations\"\r\n                   :ops [:EQ :IMP]\r\n                   :more [:CON :NEQ :NIMP :NCON]}\r\n       !demo-formatters !relations-open]\r\n      [toggle-set {:title \"Constants\"\r\n                   :class \"constants\"\r\n                   :ops [:TRUE :FALSE]}\r\n       !demo-formatters]\r\n      [:div.section\r\n       [typography {:class \"section-title\"\r\n                    :variant \"subtitle1\"}\r\n        \"Grouping\"]\r\n       (let [slider-value (or @(r/cursor !demo-formatters\r\n                                         [:choices :grouping])\r\n                              default-grouping-value)]\r\n         [:div {:class (classes \"slider-container\" (when @!tip-visible \"tip-visible\"))}\r\n          [slider {:marks grouping-marks\r\n                   :min 0\r\n                   :max (dec (count data/grouping))\r\n                   :step nil\r\n                   :value slider-value\r\n                   :on-change (fn [_ i]\r\n                                (reset! !tip-visible true)\r\n                                (swap! !demo-formatters assoc-in'\r\n                                       [:grouping] (get-in data/grouping [i :spec])\r\n                                       [:choices :grouping] i))\r\n                   :on-change-committed #(reset! !tip-visible false)}]\r\n          [typography {:variant \"body1\"\r\n                       ;:color \"textSecondary\"\r\n                       :class \"tip-title\"}\r\n           \"Group with Parentheses:\"]\r\n          (into [typography {:variant \"body2\"\r\n                             :component \"ul\"\r\n                             :class \"tip\"}]\r\n                (fori' [i :index\r\n                        {tip :tip} data/grouping]\r\n                  [:li {:class (if (<= i slider-value) \"active\" \"inactive\")}\r\n                   tip]))])]\r\n      [:div.actions\r\n       [button {:class \"reset\"\r\n                :on-click #(reset! !demo-formatters {})\r\n                :disabled (every? #(case (key %)\r\n                                     :grouping (= (val %) default-grouping-value)\r\n                                     (zero? (val %)))\r\n                                  @(r/cursor !demo-formatters [:choices]))}\r\n        \"Reset\"]\r\n       [:div.right-actions\r\n        [button {:class \"cancel\"\r\n                 :on-click cancel-and-close}\r\n         \"Cancel\"]\r\n        [button {:class \"ok\"\r\n                 :color \"primary\"\r\n                 :variant \"outlined\"\r\n                 :on-click update-and-close}\r\n         \"Ok\"]]]]]))\r\n\r\n\r\n;region Measuring\r\n(defn measure [element norm latex]\r\n  (j/call katex :render\r\n    (str \"\\\\htmlClass{measure}{\" latex \"}\")\r\n    element\r\n    (katex-options true nil nil))\r\n  (let [px (-> element\r\n               (j/call :querySelector \".measure\")\r\n               (j/call :getClientRects)\r\n               first\r\n               (j/get :width))\r\n        rem (/ px norm)]\r\n    (gdom/removeChildren element)\r\n    (js/parseFloat (j/call rem :toPrecision 5))))\r\n\r\n(defn compute-cost\r\n  [element norm [fixity o _ alt-o :as spec]]\r\n  (let [a \"{}\"\r\n        op (or alt-o o)\r\n        latex (case fixity\r\n                :constant (str op)\r\n                :infix (str a op a)\r\n                :prefix (str op a)\r\n                :postfix (str a op)\r\n                :matchfix (let [[l r s] op]\r\n                            [(str l a r) (str a s a)]))]\r\n    (echo spec\r\n          (assoc spec\r\n            2 (if (string? latex)\r\n                (measure element norm latex)\r\n                (mapv (partial measure element norm) latex))))))\r\n\r\n(defn operator-calibration []\r\n  [:div {:class (classes :calibration)\r\n         :ref (fn [element]\r\n                (when element\r\n                  (let [sq (gdom/createElement \"div\")\r\n                        norm (do\r\n                               (j/call element :append sq)\r\n                               (j/call-in sq [:style :setProperty] \"width\" \"1rem\")\r\n                               (j/get (first (j/call sq :getClientRects)) :width))]\r\n                    (gdom/removeChildren element)\r\n                    (prn (reduce\r\n                          (fn [m op-key]\r\n                            (update-in m\r\n                              [op-key :formats]\r\n                              (fn [formats]\r\n                                (mapv (fn [format]\r\n                                        (update format :latex\r\n                                                       (partial compute-cost element norm)))\r\n                                      formats))))\r\n                          data/operations (keys data/operations))))))}])\r\n;endregion"]}