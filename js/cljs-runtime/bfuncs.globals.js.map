{"version":3,"sources":["bfuncs/globals.cljs"],"mappings":"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","names":["bfuncs.globals/notification-queue","cljs.core.into","cljs.core/PersistentQueue","cljs.core.atom","bfuncs.globals/immediate-next-notification","bfuncs.globals/current-notification","bfuncs.globals/notification-exiting","bfuncs.globals/notification-open","reagent.core.atom","bfuncs.globals/open-drawer-state","bfuncs.globals/handle-notification-close","_event","reason","cljs.core.not_EQ_","cljs.core/reset!","bfuncs.globals/handle-notification-exited","temp__5737__auto__","cljs.core/deref","nn","temp__5733__auto__","cljs.core/peek","cljs.core.swap_BANG_","cljs.core/pop","bfuncs.globals/notification-close-button","reagent.core.as_element","reagent-material-ui.core.icon-button/icon-button","reagent-material-ui.icons.close-outlined/close-outlined","p__67067","map__67068","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","bfuncs.globals/build-snackbar","message","auto-hide-duration","on-close","closeable","key","class","action","children","props","handle-close","event","reagent-material-ui.core.snackbar/snackbar","cljs.core.merge","cljs.core.dissoc","reagent.core.class_names","p__67075","map__67076","bfuncs.globals/notifier","current-props","cljs.core.update","cljs.core/vector","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","bfuncs.globals/notify!","seq67078","G__67079","cljs.core/first","cljs.core/next","self__4723__auto__","immediate","js/Date.now","open","exiting","or__4126__auto__","cljs.core/conj"],"sourcesContent":["(ns bfuncs.globals\r\n  (:require\r\n   [bfuncs.utils :refer [echo]]\r\n   [reagent-material-ui.core.icon-button :refer [icon-button]]\r\n   [reagent-material-ui.core.snackbar :refer [snackbar]]\r\n   [reagent-material-ui.icons.close-outlined :refer [close-outlined]]\r\n   [reagent.core :as r]))\r\n\r\n(def notification-queue (atom #queue []))\r\n(def immediate-next-notification (atom nil))\r\n(def current-notification (atom nil))\r\n(def notification-exiting (atom nil))\r\n(def notification-open (r/atom false))\r\n(def open-drawer-state (r/atom false))\r\n\r\n(defn- handle-notification-close\r\n  [_event reason]\r\n  (when (not= reason \"clickaway\")\r\n    (reset! notification-open false)))\r\n\r\n(defn- handle-notification-exited []\r\n  (reset! notification-exiting false)\r\n  (if-some [nn @immediate-next-notification]\r\n    (do\r\n      (reset! current-notification nn)\r\n      (reset! immediate-next-notification nil)\r\n      (reset! notification-open true))\r\n    (if-let [nn (peek @notification-queue)]\r\n      (do\r\n        (reset! current-notification nn)\r\n        (swap! notification-queue pop)\r\n        (reset! notification-open true))\r\n      (reset! current-notification nil))))\r\n\r\n(def ^:private notification-close-button\r\n  (r/as-element [icon-button {:aria-label \"close\"\r\n                              :color      \"inherit\"\r\n                              :class      \"close\"\r\n                              :on-click   #(reset! notification-open false)}\r\n                 [close-outlined]]))\r\n\r\n(defn- build-snackbar\r\n  [{:keys [message auto-hide-duration on-close closeable key class action children]\r\n    :or   {auto-hide-duration 2000\r\n           key                nil\r\n           closeable          false}\r\n    :as   props}]\r\n  (let [handle-close (if on-close\r\n                       (fn [event reason]\r\n                         (on-close event reason notification-open))\r\n                       handle-notification-close)]\r\n    (into [snackbar (merge (dissoc props :closeable :children)\r\n                           {:class              (r/class-names \"global-notification\" class)\r\n                            :open               @notification-open\r\n                            :key                key\r\n                            :message            message\r\n                            :action             (if closeable\r\n                                                  (if action\r\n                                                    (r/as-element [:<> action notification-close-button])\r\n                                                    notification-close-button)\r\n                                                  action)\r\n                            :auto-hide-duration auto-hide-duration\r\n                            :on-close           handle-close\r\n                            :on-exit            #(reset! notification-exiting true)\r\n                            :on-exited          handle-notification-exited})]\r\n          children)))\r\n\r\n\r\n\r\n(defn notifier\r\n  [{:keys [class]}]\r\n  (if-let [current-props @current-notification]\r\n    (build-snackbar (if class\r\n                      (update current-props :class vector class)\r\n                      current-props))\r\n    [snackbar {:key nil :open @notification-open :class class}]))\r\n\r\n(defn notify!\r\n  \"Send a notification through the notifier component.\r\n  The notification displays as [snackbar props children...].\r\n  The following special props can be included:\r\n  :immediate => if logical true, any open notifications are closed, and the given notification skips to\r\n  the front of the queue.\r\n  :closeable => whether the notification should include a close button\r\n  :on-close => defines on-close handler for snackbar component taking parameters [event reason open-atom].\r\n  The third argument is a reference to the atom controlling the open state of the notification.\r\n  :auto-hide-duration => same as snackbar, but defaults to 2000. nil to disable auto-hide. \"\r\n  [props & children]\r\n  (let [immediate (:immediate props false)\r\n        props (merge (dissoc props :immediate)\r\n                     {:key (js/Date.now)}\r\n                     (when children {:children children}))\r\n        open @notification-open\r\n        exiting @notification-exiting]\r\n    (if (or open exiting)\r\n      (if immediate\r\n        (do (reset! immediate-next-notification props)\r\n            (when open (reset! notification-open false)))\r\n        (swap! notification-queue conj props))\r\n      (do (reset! current-notification props)\r\n          (reset! notification-open true)))))"]}