{"version":3,"sources":["fipp/clojure.cljc"],"mappings":"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","names":["fipp.clojure/block","nodes","cljs.core.interpose","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","fipp.clojure/list-group","seq40493","self__4724__auto__","cljs.core/seq","fipp.clojure/maybe-a","pred","xs","x","cljs.core/first","cljs.core/rest","p__40496","vec__40497","cljs.core.nth","fipp.clojure/pretty-cond-clause","p","test","result","fipp.visit/visit","p__40503","vec__40504","seq__40505","first__40506","cljs.core/next","fipp.clojure/pretty-case","head","expr","more","clauses","cljs.core.partition","default","cljs.core/odd?","cljs.core/count","cljs.core/last","fipp.clojure.list_group","cljs.core.concat","p1__40502#","cljs.core.map","p__40508","vec__40511","seq__40512","first__40513","fipp.clojure/pretty-cond","p1__40507#","p__40515","vec__40516","seq__40517","first__40518","fipp.clojure/pretty-condp","p1__40514#","p__40522","vec__40523","seq__40524","first__40525","fipp.clojure/pretty-arrow","stmts","p1__40521#","p__40529","vec__40530","seq__40531","first__40532","fipp.clojure/pretty-if","p1__40526#","p__40534","vec__40535","seq__40536","first__40537","fipp.clojure/pretty-method","params","body","p1__40533#","p__40542","vec__40543","seq__40544","first__40545","fipp.clojure/pretty-defn","fn-name","vec__40546","vec__40549","vec__40552","docstring","cljs.core/string?","attr-map","cljs.core/map?","cljs.core/vector?","params-on-first-line?","and__4115__auto__","params-after-attr-map?","cljs.core/not","p1__40540#","p1__40541#","p__40561","vec__40563","seq__40564","first__40565","fipp.clojure/pretty-fn","vec__40567","vec__40570","cljs.core/symbol?","p1__40558#","p1__40559#","p__40578","vec__40579","fipp.clojure/pretty-fn*","_","form","cljs.core/seq?","vec__40582","inits","rests","p1__40573#","cljs.core/split-with","cljs.core.not_EQ_","params*","cljs.core.merge","cljs.core._EQ_","cljs.core/zipmap","p1__40574#","cljs.core.symbol","cljs.core.range","cljs.core/second","body*","clojure.walk/prewalk-replace","p1__40575#","p__40588","vec__40589","seq__40590","first__40591","fipp.clojure/pretty-libspec","p1__40587#","p__40593","vec__40594","seq__40595","first__40596","fipp.clojure/pretty-ns","ns-sym","vec__40597","vec__40600","specs","p1__40592#","p__40603","vec__40604","fipp.clojure/pretty-quote","macro","arg","G__40609","cljs.core/Keyword","js/Error","cljs.core.keyword","cljs.core/name","fipp.clojure/pretty-bindings","bvec","kvps","iter__4529__auto__","s__40612","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__40614","cljs.core/chunk-buffer","i__40613","vec__40618","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__40611","cljs.core/chunk-rest","vec__40621","cljs.core/cons","k","v","p__40628","vec__40631","seq__40632","first__40633","fipp.clojure/pretty-let","p1__40627#","fipp.clojure/pretty-impls","opts+specs","p1__40640#","p__40645","vec__40649","seq__40650","first__40651","fipp.clojure/pretty-type","fields","p__40653","vec__40654","seq__40655","first__40657","fipp.clojure/pretty-reify","fipp.clojure/build-symbol-map","dispatch","cljs.core.into","s__40663","xs__6292__auto__","vec__40676","iterys__4525__auto__","s__40665","s__40667","b__40669","i__40668","iter__40666","fs__4526__auto__","iter__40664","iter__40662","pretty-fn","syms","sym","cljs.core/special-symbol?","fipp.clojure/default-symbols","G__40702","fipp.clojure/pprint","fipp.clojure.pprint","options","fipp.edn.pprint","cljs.core/chunk-first"],"sourcesContent":["(ns fipp.clojure\n  \"Provides a pretty document serializer and pprint fn for Clojure code.\n  See fipp.edn for pretty printing Clojure/EDN data structures\"\n  (:require [clojure.walk :as walk]\n            [fipp.visit :as v :refer [visit]]\n            [fipp.edn :as edn]))\n\n\n;;; Helper functions\n\n(defn block [nodes]\n  [:nest 2 (interpose :line nodes)])\n\n(defn list-group [& nodes]\n  [:group \"(\" nodes \")\"])\n\n(defn maybe-a [pred xs]\n  (let [x (first xs)] (if (pred x) [x (rest xs)] [nil xs])))\n\n\n;;; Format case, cond, condp\n\n(defn pretty-cond-clause [p [test result]]\n  [:group (visit p test) :line [:nest 2 (visit p result)]])\n\n(defn pretty-case [p [head expr & more]]\n  (let [clauses (partition 2 more)\n        default (when (odd? (count more)) (last more))]\n    (list-group\n      (visit p head) \" \" (visit p expr) :line\n      (block (concat (map #(pretty-cond-clause p %) clauses)\n                     (when default [(visit p default)]))))))\n\n(defn pretty-cond [p [head & more]]\n  (let [clauses (partition 2 more)]\n    (list-group\n      (visit p head) :line\n      (block (map #(pretty-cond-clause p %) clauses)))))\n\n;;TODO this will get tripped up by ternary (test :>> result) clauses\n(defn pretty-condp [p [head pred expr & more]]\n  (let [clauses (partition 2 more)\n        default (when (odd? (count more)) (last more))]\n    (list-group\n      (visit p head) \" \" (visit p pred) \" \" (visit p expr) :line\n      (block (concat (map #(pretty-cond-clause p %) clauses)\n                     (when default [(visit p default)]))))))\n\n\n;;; Format arrows, def, if, and similar\n\n(defn pretty-arrow [p [head & stmts]]\n  (list-group\n    (visit p head) \" \"\n    [:align (interpose :line (map #(visit p %) stmts))]))\n\n;;TODO we're also using this to format def \u2013 should that be separate?\n(defn pretty-if [p [head test & more]]\n  (list-group\n    (visit p head) \" \" (visit p test) :line\n    (block (map #(visit p %) more))))\n\n\n;;; Format defn, fn, and similar\n\n(defn pretty-method [p [params & body]]\n  (list-group\n    (visit p params) :line\n    (block (map #(visit p %) body))))\n\n(defn pretty-defn [p [head fn-name & more]]\n  (let [[docstring more] (maybe-a string? more)\n        [attr-map more]  (maybe-a map?    more)\n        [params body]    (maybe-a vector? more)\n        params-on-first-line?  (and params (nil? docstring) (nil? attr-map))\n        params-after-attr-map? (and params (not params-on-first-line?))]\n    (list-group\n      (concat [(visit p head) \" \" (visit p fn-name)]\n              (when params-on-first-line? [\" \" (visit p params)]))\n      :line\n      (block (concat (when docstring [(visit p docstring)])\n                     (when attr-map  [(visit p attr-map)])\n                     (when params-after-attr-map? [(visit p params)])\n                     (if body (map #(visit p %) body)\n                              (map #(pretty-method p %) more)))))))\n\n(defn pretty-fn [p [head & more]]\n  (let [[fn-name more] (maybe-a symbol? more)\n        [params body]  (maybe-a vector? more)]\n    (list-group\n      (concat [(visit p head)]\n              (when fn-name [\" \" (visit p fn-name)])\n              (when params  [\" \" (visit p params)]))\n      :line\n      (block (if body (map #(visit p %) body)\n                      (map #(pretty-method p %) more))))))\n\n(defn pretty-fn* [p [_ params body :as form]]\n  (if (and (vector? params) (seq? body))\n    (let [[inits rests] (split-with #(not= % '&) params)\n          params* (merge (if (= (count inits) 1)\n                           {(first inits) '%}\n                           (zipmap inits (map #(symbol (str \\% (inc %))) (range))))\n                         (when (seq rests) {(second rests) '%&}))\n          body* (walk/prewalk-replace params* body)]\n      [:group \"#(\" [:align 2 (interpose :line (map #(visit p %) body*))] \")\"])\n    (pretty-fn p form)))\n\n\n;;; Format ns\n\n(defn pretty-libspec [p [head & clauses]]\n  (list-group\n    (visit p head) \" \"\n    [:align (interpose :line (map #(visit p %) clauses))]))\n\n(defn pretty-ns [p [head ns-sym & more]]\n  (let [[docstring more] (maybe-a string? more)\n        [attr-map specs] (maybe-a map?    more)]\n    (list-group\n      (visit p head) \" \" (visit p ns-sym) :line\n      (block (concat (when docstring [(visit p docstring)])\n                     (when attr-map  [(visit p attr-map)])\n                     (map #(pretty-libspec p %) specs))))))\n\n\n;;; Format deref, quote, unquote, var\n\n(defn pretty-quote [p [macro arg]]\n  [:span (case (keyword (name macro))\n           :deref \"@\", :quote \"'\", :unquote \"~\", :var \"#'\")\n         (visit p arg)])\n\n;;; Format let, loop, and similar\n\n(defn pretty-bindings [p bvec]\n  (let [kvps (for [[k v] (partition 2 bvec)]\n               [:span (visit p k) \" \" [:align (visit p v)]])]\n    [:group \"[\" [:align (interpose [:line \", \"] kvps)] \"]\"]))\n\n(defn pretty-let [p [head bvec & body]]\n  (list-group\n    (visit p head) \" \" (pretty-bindings p bvec) :line\n    (block (map #(visit p %) body))))\n\n\n;;; Types and interfaces\n\n(defn pretty-impls [p opts+specs]\n  ;;TODO parse out opts\n  ;;TODO parse specs and call pretty on methods\n  (block (map #(visit p %) opts+specs)))\n\n(defn pretty-type [p [head fields & opts+specs]]\n  (list-group (visit p head) \" \" (visit p fields) :line\n              (pretty-impls p opts+specs)))\n\n(defn pretty-reify [p [head & opts+specs]]\n  (list-group (visit p head) :line\n              (pretty-impls p opts+specs)))\n\n\n;;; Symbol table\n\n(defn build-symbol-map [dispatch]\n  (into {} (for [[pretty-fn syms] dispatch\n                 sym syms\n                 sym (cons sym (when-not (special-symbol? sym)\n                                 [(symbol \"clojure.core\" (name sym))\n                                  (symbol \"cljs.core\" (name sym))]))]\n             [sym pretty-fn])))\n\n(def default-symbols\n  (build-symbol-map\n    {pretty-arrow '[. .. -> ->> and doto or some-> some->>]\n     pretty-case  '[case cond-> cond->>]\n     pretty-cond  '[cond]\n     pretty-condp '[condp]\n     pretty-defn  '[defmacro defmulti defn defn-]\n     pretty-fn    '[fn]\n     pretty-fn*   '[fn*]\n     pretty-if    '[def defonce if if-not when when-not]\n     pretty-ns    '[ns]\n     pretty-let   '[binding doseq dotimes for if-let if-some let let* loop loop*\n                    when-first when-let when-some with-local-vars with-open with-redefs]\n     pretty-quote '[deref quote unquote var]\n     pretty-type  '[deftype defrecord]\n     pretty-reify '[reify]}))\n\n\n(defn pprint\n  ([x] (pprint x {}))\n  ([x options]\n   (edn/pprint x (merge {:symbols default-symbols} options))))\n"]}