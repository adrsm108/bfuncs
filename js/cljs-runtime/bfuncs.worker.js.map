{"version":3,"sources":["bfuncs/worker.cljs"],"mappings":"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","names":["bfuncs.worker/tasks","e__30013__auto__","vec__68752","obj68762","obj68760","k68761","obj68764","applied-science.js-interop.impl/in?*","js/undefined","k68763","obj68765","vec__68756","cljs.core.nth","return","f-args","f-body","arity","bytes","js/module$bfuncs$jsUtils.functionBytes","js/Function","G__68767","G__68768","obj68769","k68770","obj68771","vec__68776","obj68787","obj68785","k68786","obj68789","k68788","obj68790","vec__68780","on-terms","unspecified","G__68791","G__68792","obj68793","k68794","obj68795","vec__68796","obj68802","obj68800","k68801","obj68806","k68803","obj68808","x","vec__68811","obj68817","obj68815","k68816","obj68819","k68818","obj68820","_","id","bfuncs.worker/worker-id","bfuncs.utils/dbg","vec__68821","obj68827","obj68825","k68826","obj68829","k68828","obj68830","vars","G__68831","bfuncs.minimization/min-sops","vec__68835","obj68841","obj68839","k68840","obj68843","k68842","obj68844","G__68847","bfuncs.minimization/min-poss","vec__68848","obj68860","obj68858","k68859","obj68862","k68861","obj68863","digit-string","G__68864","bfuncs.minimization/zhegalkin-polynomial","bfuncs.worker/return-fn","task-id","message","js/postMessage","cljs.core/clj->js","transferrables","bfuncs.worker/dispatch","event","task-name","obj68872","obj68869","k68870","obj68874","k68873","obj68879","obj68882","obj68880","k68881","obj68884","k68883","obj68888","e68893","temp__5737__auto__","t","cljs.core.get","G__68903","G__68904","js/Error","js/Object","e","obj68894","k68895","obj68896","obj68897","k68898","obj68899","obj__27297__auto__","f__27298__auto__","bfuncs.worker/init","js/self"],"sourcesContent":["(ns bfuncs.worker\r\n  (:require [bfuncs.minimization :as bmin :refer [zhegalkin-polynomial min-sops min-poss]]\r\n            [applied-science.js-interop :as j]\r\n            [bfuncs.utils :refer [dbg echod maximum floor-log2]]\r\n            [\"/bfuncs/jsUtils\" :refer [functionBytes, bytesToBigInt]])\r\n  (:require-macros [bfuncs.worker-fns :refer [task]]))\r\n\r\n(declare worker-id)\r\n\r\n(def tasks\r\n  {\"function-bytes\" (task [return [f-args f-body] arity]\r\n                      (let [bytes (functionBytes (js/Function f-args f-body) arity)]\r\n                        (return bytes [(j/get bytes :buffer)])))\r\n\r\n   \"minterms-bytes\" (task [return [on-terms unspecified] arity]\r\n                      (let [bytes (functionBytes (j/lit {:on on-terms\r\n                                                         :unspecified unspecified})\r\n                                                 arity)]\r\n                        (return bytes [(j/get bytes :buffer)])))\r\n\r\n   \"test-task\" (task [return x]\r\n                 (return x))\r\n\r\n   \"assign-id\" (task [_ id]\r\n                 (def worker-id id)\r\n                 (dbg \"worker assigned id \" id))\r\n\r\n   \"min-sops\" (task [return vars bytes]\r\n                (dbg \"minsops bitbytes: \" bytes)\r\n                (return (min-sops vars bytes)))\r\n\r\n   \"min-poss\" (task [return vars bytes]\r\n                (dbg \"minposs bitbytes: \" bytes)\r\n                (return (bmin/min-poss vars bytes)))\r\n\r\n   \"zhegalkin-polynomial\" (task [return vars digit-string]\r\n                            (return (zhegalkin-polynomial vars digit-string)))\r\n   })\r\n\r\n(defn return-fn [task-id]\r\n  (fn\r\n    ([message]\r\n     (js/postMessage (clj->js {:task-id task-id :value message})))\r\n    ([message transferrables]\r\n     (js/postMessage (clj->js {:task-id task-id :value message})\r\n                     (clj->js transferrables)))))\r\n\r\n(defn dispatch [event]\r\n  (dbg \"worker dispatch event received by worker\" worker-id)\r\n  (dbg event)\r\n  (let [task-name (j/get-in event [:data :task])\r\n        task-id (j/get-in event [:data :task-id])]\r\n    (try\r\n      (if-some [t (get tasks task-name)]\r\n        (t (return-fn task-id) event)\r\n        (throw (js/Error. (str \"Execution error: no such task as \" task-name))))\r\n      (catch js/Object e\r\n        (dbg \"Error in worker\" worker-id)\r\n        (js/postMessage #js {:type \"error\"\r\n                             :name (j/get e :name)\r\n                             :message (j/get e :message)\r\n                             :error (j/call e :toString)\r\n                             :task task-name\r\n                             :task-id task-id\r\n                             :worker-id worker-id})))))\r\n\r\n\r\n(defn init []\r\n  (dbg \"worker created\")\r\n  (j/call js/self :addEventListener \"message\" dispatch)\r\n  (dbg js/self))"]}