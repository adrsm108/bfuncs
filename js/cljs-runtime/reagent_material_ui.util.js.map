{"version":3,"sources":["reagent_material_ui/util.cljs"],"mappings":"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","names":["var_args","G__40706","reagent-material-ui.util/adapt-react-class","js/Error","c","reagent_material_ui.util.adapt_react_class","reagent.impl.util/fun-name","display-name","adapted","reagent.core/adapt-react-class","reagent-material-ui.util/color-key?","reagent-material-ui.util/numeric-string?","s","cljs.core/re-matches","reagent-material-ui.util/pascal-case?","cljs.core/contains?","cljs.core/first","reagent-material-ui.util/keyword-safe?","reagent-material-ui.util/key->str","k","n","cljs.core/name","clojure.string/starts-with?","camel-snake-kebab.core/->camelCaseString","reagent-material-ui.util/convert-map-keys","m","f","clojure.walk/postwalk","x","cljs.core/map-entry?","G__40723","cljs.core/key","cljs.core/val","reagent-material-ui.util/clj->js'","obj","cljs.core/clj->js","cljs.core/Keyword","reagent-material-ui.util/js-key->clj","cljs.core.keyword","js/parseInt","camel-snake-kebab.core/->kebab-case-keyword","reagent-material-ui.util/js->clj'","convert","cljs.core/seq?","cljs.core.doall","cljs.core.map","cljs.core/MapEntry","cljs.core/coll?","cljs.core.into","cljs.core/empty","cljs.core/array?","cljs.core/persistent!","p1__40730#","p2__40731#","cljs.core.reduce","cljs.core.conj_BANG_","cljs.core/transient","js/module$node_modules$react$index.isValidElement","cljs.core/type","js/Object","r","cljs.core._EQ_","cljs.core.assoc_BANG_","goog.object/get","cljs.core/js-keys","reagent-material-ui.util/wrap-clj-function","args","cljs.core.apply","reagent-material-ui.util/wrap-js-function","reagent-material-ui.util/wrap-all-clj-functions","cljs.core/fn?","reagent-material-ui.util/reactify-component","component","reactified","js/module$node_modules$react$index.forwardRef","props","ref","clj-props","cljs.core.assoc","reagent.core.as_element","reagent-material-ui.util/wrap-jss-styles","styles","theme","G__40747","reagent-material-ui.util/apply-hoc","hoc","G__40750","G__40753","reagent-material-ui.util/get-anycase","reagent_material_ui.util.get_anycase","default","temp__5733__auto__","entry","or__4126__auto__","cljs.core/find","camel-snake-kebab.core/->camelCaseKeyword","G__40767","reagent-material-ui.util/assoc-anycase","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq40762","G__40763","cljs.core/next","G__40764","G__40765","self__4723__auto__","v","cljs.core.dissoc","kvs","ret","reagent_material_ui.util.assoc_anycase","cljs.core/second","cljs.core/nnext","reagent-material-ui.util/debounce","ms","timeout","cljs.core/volatile!","cljs.core/deref","js/clearTimeout","cljs.core/vreset!","js/setTimeout","reagent-material-ui.util/remove-undefined-vals","cljs.core/reduce-kv","acc","cljs.core.dissoc_BANG_","reagent-material-ui.util/set-ref","value","args__4742__auto__","argseq__4743__auto__","reagent-material-ui.util/use-fork-ref","seq40784","self__4724__auto__","cljs.core/seq","refs","js/module$node_modules$react$index.useMemo","cljs.core/not-every?","cljs.core/nil?","seq__40787","chunk__40788","count__40789","i__40790","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/array","reagent-material-ui.util/use-callback","callback","js/module$node_modules$react$index.useCallback","reagent-material-ui.util/use-effect","effect","js/module$node_modules$react$index.useEffect","reagent-material-ui.util/use-layout-effect","js/module$node_modules$react$index.useLayoutEffect","reagent-material-ui.util/use-ref","js/module$node_modules$react$index.useRef","reagent-material-ui.util/use-state","initial-state","js/module$node_modules$react$index.useState"],"sourcesContent":["(ns reagent-material-ui.util\n  (:require-macros [reagent-material-ui.util :refer [e forward-ref]])\n  (:require [react :as react]\n            [reagent.core :as r]\n            [reagent.impl.util :refer [fun-name]]\n            [cljs.core :refer [MapEntry]]\n            [clojure.string :as str]\n            [clojure.walk :refer [postwalk]]\n            [camel-snake-kebab.core :refer [->kebab-case-keyword ->camelCaseKeyword ->camelCaseString]]\n            [goog.object :as obj]))\n\n(defn adapt-react-class\n  ([c]\n   (adapt-react-class c (fun-name c)))\n  ([c display-name]\n   (let [adapted (r/adapt-react-class c)]\n     (set! (.-displayName adapted) display-name)\n     adapted)))\n\n(def ^:private color-key? #{:A100 :A200 :A400 :A700 \"A100\" \"A200\" \"A400\" \"A700\"})\n(defn ^:private numeric-string? [s]\n  (and (string? s)\n       (some? (re-matches #\"[0-9]+\" s))))\n(defn ^:private pascal-case? [s]\n  (and (string? s)\n       (contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}\n                  (first s))))\n(defn ^:private keyword-safe? [s]\n  (some? (re-matches #\"[-*+!?<>='&$%#|\\w]+\" s)))\n\n(defn ^:private key->str [k]\n  (let [n (name k)]\n    (cond\n      (color-key? k) n\n      (str/starts-with? n \"data-\") n\n      (str/starts-with? n \"aria-\") n\n      (pascal-case? n) n\n      :else (->camelCaseString k))))\n\n(defn ^:private convert-map-keys [m f]\n  (postwalk (fn [x]\n              (if (map-entry? x)\n                [(f (key x)) (val x)]\n                x))\n            m))\n\n(defn clj->js'\n  [obj]\n  (clj->js (convert-map-keys obj (fn [k]\n                                   (if (keyword? k)\n                                     (key->str k)\n                                     k)))))\n\n(defn ^:private js-key->clj [k]\n  (cond\n    (keyword? k) k\n    (color-key? k) (keyword k)\n    (numeric-string? k) (js/parseInt k)\n    (keyword-safe? k) (if (pascal-case? k)\n                        (keyword k)\n                        (->kebab-case-keyword k))\n    :else k))\n\n(defn js->clj'\n  [obj]\n  (let [convert (fn convert [x]\n                  (cond\n                    (seq? x)\n                    (doall (map convert x))\n\n                    (map-entry? x)\n                    (MapEntry. (convert (key x)) (convert (val x)) nil)\n\n                    (coll? x)\n                    (into (empty x) (map convert) x)\n\n                    (array? x)\n                    (persistent!\n                     (reduce #(conj! %1 (convert %2))\n                             (transient []) x))\n\n                    (react/isValidElement x)\n                    x\n\n                    (identical? (type x) js/Object)\n                    (persistent!\n                     (reduce (fn [r k]\n                               (if (= \"ref\" k)\n                                 (assoc! r :ref (obj/get x k))\n                                 (assoc! r (js-key->clj k) (convert (obj/get x k)))))\n                             (transient {}) (js-keys x)))\n                    :else x))]\n    (convert obj)))\n\n(defn wrap-clj-function [f]\n  (fn [& args]\n    (clj->js' (apply f (map js->clj' args)))))\n\n(defn wrap-js-function [f]\n  (fn [& args]\n    (js->clj' (apply f (map clj->js' args)))))\n\n(defn wrap-all-clj-functions [m]\n  (postwalk (fn [x]\n              (if (fn? x)\n                (wrap-clj-function x)\n                x))\n            m))\n\n(defn reactify-component [component]\n  (let [reactified (forward-ref [props ref]\n                     (let [clj-props (assoc (js->clj' props) :ref ref)]\n                       (r/as-element [component clj-props])))]\n    (set! (.-displayName reactified) (fun-name component))\n    reactified))\n\n(defn wrap-jss-styles [styles]\n  (if (fn? styles)\n    (fn [theme]\n      (-> (js->clj' theme)\n          (styles)\n          (wrap-all-clj-functions)\n          (clj->js')))\n    (clj->js (wrap-all-clj-functions styles))))\n\n(defn apply-hoc [hoc component]\n  (-> component\n      (reactify-component)\n      (hoc)\n      (adapt-react-class)))\n\n(defn get-anycase\n  ([m k]\n   (get-anycase m k nil))\n  ([m k default]\n   (if-let [entry (or (find m (->kebab-case-keyword k))\n                      (find m (->camelCaseKeyword k)))]\n     (val entry)\n     default)))\n\n(defn assoc-anycase\n  ([m k v]\n   (assoc (dissoc m (->camelCaseKeyword k)) (->kebab-case-keyword k) v))\n  ([m k v & kvs]\n   (let [ret (assoc-anycase m k v)]\n     (if kvs\n       (recur ret (first kvs) (second kvs) (nnext kvs))\n       ret))))\n\n(defn debounce [f ms]\n  (let [timeout (volatile! nil)\n        ret (fn [& args]\n              (js/clearTimeout @timeout)\n              (vreset! timeout (js/setTimeout #(apply f args) ms)))]\n    (set! (.-clear ret) #(js/clearTimeout @timeout))\n    ret))\n\n(defn remove-undefined-vals [m]\n  (persistent!\n   (reduce-kv (fn [acc k v]\n                (if (undefined? v)\n                  (dissoc! acc k)\n                  acc))\n              (transient m)\n              m)))\n\n(defn set-ref [ref value]\n  (cond\n    (fn? ref) (ref value)\n    ref (set! (.-current ref) value)))\n\n(defn use-fork-ref [& refs]\n  (react/useMemo #(when (not-every? nil? refs)\n                    (fn [value]\n                      (doseq [ref refs]\n                        (set-ref ref value))))\n                 (apply array refs)))\n\n(defn use-callback [callback props]\n  (react/useCallback callback props))\n\n(defn use-effect [effect props]\n  (react/useEffect effect props))\n\n(defn use-layout-effect [effect]\n  (react/useLayoutEffect effect))\n\n(defn use-ref [value]\n  (react/useRef value))\n\n(defn use-state [initial-state]\n  (react/useState initial-state))\n"]}