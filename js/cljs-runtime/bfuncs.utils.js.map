{"version":3,"sources":["bfuncs/utils.cljs"],"mappings":"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","names":["bfuncs.utils/event-value","e","obj66836","obj66834","k66835","obj66838","applied-science.js-interop.impl/in?*","js/undefined","k66837","obj66839","bfuncs.utils/event-checked","obj66842","obj66840","k66841","obj66844","k66843","obj66845","bfuncs.utils/clipboard-write!","text","js/navigator","obj66846","k66847","obj66848","result","G__66850","fexpr__66849","obj66851","k66852","obj66853","obj66854","k66855","obj66856","cljs.core/constantly","bfuncs.utils/log","js/console.log","bfuncs.utils/dbg","js/console.debug","var_args","G__66858","bfuncs.utils/echo","js/Error","x","cljs.core.println","label","G__66860","bfuncs.utils/echol","G__66862","bfuncs.utils/echod","G__66864","bfuncs.utils/rrange","cljs.core.ex_info","end","cljs.core.range","start","step","l","r","cljs.core/rem","cljs.core/quot","bfuncs.utils/named?","cljs.core/Keyword","cljs.core/Symbol","bfuncs.utils/name-or-str","fexpr__66865","cljs.core/name","cljs.core/str","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","bfuncs.utils/distinct-keys","seq66866","self__4724__auto__","cljs.core/seq","maps","cljs.core.mapcat","cljs.core/keys","cljs.core.distinct","G__66870","bfuncs.utils/map-reduce","f","rf","coll","bfuncs.utils.map_reduce","G__66871","cljs.core/first","cljs.core/rest","cljs.core.reduce","init","p1__66867#","p2__66868#","G__66872","G__66873","bfuncs.utils/select","pred","xset","cljs.core/persistent!","s","k","cljs.core.disj_BANG_","cljs.core/transient","bfuncs.utils/map-vals","m","cljs.core/empty?","temp__5733__auto__","tm","cljs.core/map?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IEditableCollection","p__66875","vec__66876","cljs.core.nth","v","cljs.core.assoc_BANG_","p__66879","vec__66880","cljs.core.assoc","cljs.core/empty","bfuncs.utils/map-kv","p__66884","vec__66885","p__66888","vec__66889","bfuncs.utils/minimal-by","temp__5735__auto__","xs__6292__auto__","a","p__66892","vec__66893","mins","minv","cljs.core._EQ_","cljs.core.conj","bfuncs.utils/maximal-by","p__66896","vec__66897","maxs","maxv","G__66901","bfuncs.utils/maximum","cljs.core/max","mv","x__4214__auto__","y__4215__auto__","G__66903","bfuncs.utils/minimum","cljs.core/min","x__4217__auto__","y__4218__auto__","bfuncs.utils/count-when","p1__66905#","p2__66904#","bfuncs.utils/count-distinct","total","marked","xs","vec__66909","seq__66910","first__66911","cljs.core/next","xs'","cljs.core/contains?","cljs.core.conj_BANG_","bfuncs.utils/one?","bfuncs.utils/singleton?","cljs.core/coll?","cljs.core/bounded-count","bfuncs.utils/disjoint?","c1","c2","p1__66912#","cljs.core/not-any?","bfuncs.utils/products","seq66913","seqs","vecs","cljs.core.mapv","cljs.core/vec","n-1","cljs.core/count","pare-down","vs","i","rst","G__66920","bfuncs.utils/conj-kept","args-arr__4757__auto__","argseq__4758__auto__","seq66917","G__66918","G__66919","self__4723__auto__","p1__66915#","p2__66914#","bfuncs.utils/positions","p1__66922#","p2__66921#","cljs.core.keep_indexed","bfuncs.utils/pick","sel","ret","G__66924","bfuncs.utils/hiccup-tag","cljs.core/vector?","t","test","cljs.core/set?","bfuncs.utils/count-truthy","p1__66926#","p2__66925#","G__66930","bfuncs.utils/truth-vecs","n","bfuncs.utils.truth_vecs","meta?","idxs","bfuncs.utils.rrange","cljs.core.map","p1__66927#","p1__66928#","cljs.core/with-meta","cljs.core.partial","cljs.core/bit-test","cljs.core.sorted_set","bfuncs.utils/max-set-bit","cljs.core/nat-int?","bfuncs.utils/map-assoc","keys","p1__66931#","p2__66932#","bfuncs.utils/pass","goog.functions/NULL","bfuncs.utils/essence","cljs.core/deref","cljs.core/IDeref","G__66941","bfuncs.utils/construct","seq66935","G__66936","G__66937","G__66938","G__66939","G__66940","y","z","b","c","d","more","cljs.core.apply","bfuncs.utils/mapa","arr","G__66942","bfuncs.utils/map-into-array","cljs.core/array?","G__66943","bfuncs.utils/reset-nil!","seq66944","atoms","seq__66945","chunk__66946","count__66947","i__66948","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/reset!","bfuncs.utils/postinc!","cljs.core.swap_BANG_","cljs.core/inc","bfuncs.utils/post-swap!","seq66949","G__66950","G__66951","args","cljs.core/swap!","bfuncs.utils/add-keys","seq","p1__66953#","p2__66952#","cljs.core.map_indexed","cljs.core.vary_meta","cljs.core/assoc","G__66959","bfuncs.utils/assoc-some","seq66955","G__66956","G__66957","G__66958","kvs","bfuncs.utils.assoc_some","cljs.core/second","cljs.core/nnext","bfuncs.utils/array-like?","G__66961","bfuncs.utils/int-digits","cljs.core/int?","Math/abs","Math/log10","Math/floor","base","Math/log","G__66962","Math/LN2","Math/LN10","bfuncs.utils/stopping-propagation","event","obj__27297__auto__","f__27298__auto__","p__66963","map__66964","cljs.core/hash-map","cljs.core.get","vec__66965","bfuncs.utils/toggle-selection","selection","_","per-page","new-selection","new-step","obj66969","k66970","obj66971","parent__27304__auto__","f__27305__auto__","bfuncs.utils/toggle-selection-key-down-fn","!sel","G__66972","obj66973","k66974","obj66975","obj66976","k66977","obj66978","bfuncs.utils/toggle-selection-key-up-fn","G__66979","obj66980","k66981","obj66982","G__66988","bfuncs.utils/assoc-in'","seq66984","G__66985","G__66986","G__66987","ks","cljs.core/assoc-in","bfuncs.utils/reduce-from","cljs.core/reduced?","G__66991","bfuncs.utils/toggle!","atom","cljs.core/not","val","p1__66989#","G__66993","bfuncs.utils/str-join","clojure.string.join","sep","sb","js/goog.string.StringBuffer","G__66997","G__67005","bfuncs.utils/big-int","js/BigInt","bfuncs.utils/str-surround","G__67013","bfuncs.utils/byte-array","size-or-seq","cljs.core/seqable?","js/Int8Array.from","js/Int8Array","size","init-val-or-seq","obj67014","obj67015","cljs.core/clj->js","bfuncs.utils/byte-array?","cljs.core/type","bfuncs.utils/floor-log2","js/Math.clz32","bfuncs.utils/non-empties","seq67018","cljs.core.remove"],"sourcesContent":["(ns bfuncs.utils\r\n  (:require [goog.functions :as gfunc]\r\n            [applied-science.js-interop :as j]\r\n            [clojure.string :as str]\r\n            [cljs.core :as core])\r\n  (:require-macros [bfuncs.utils :refer [reduce!]])\r\n  (:import [goog.string StringBuffer]))\r\n\r\n(defn event-value\r\n  [^js/Event e]\r\n  (j/get-in e [:target :value]))\r\n\r\n(defn event-checked\r\n  [^js/Event e]\r\n  (j/get-in e [:target :checked]))\r\n\r\n(defn clipboard-write!\r\n  \"Attempts to write text to system clipboard.\r\n  Returns a boolean indicating whether write was successful.\"\r\n  [text]\r\n  (-> js/navigator\r\n      (j/get \"permissions\")\r\n      (.query #js {:name \"clipboard-write\"})\r\n      (.then (fn [result]\r\n               (if (#{\"granted\" \"prompt\"} (j/get result \"state\"))\r\n                 (-> js/navigator\r\n                     (j/get \"clipboard\")\r\n                     (.writeText (str text))\r\n                     (.then (constantly true)\r\n                            (constantly false)))\r\n                 false)))\r\n      (.catch (constantly false))))\r\n\r\n(def log js/console.log)\r\n(def dbg js/console.debug)\r\n(defn echo\r\n  ([x] (println x) x)\r\n  ([label x]\r\n   (println label x)\r\n   x))\r\n\r\n(defn echol\r\n  ([x] (log x) x)\r\n  ([label x] (log label x) x))\r\n\r\n(defn echod\r\n  ([x] (dbg x) x)\r\n  ([label x] (dbg label x) x))\r\n\r\n(defn rrange\r\n  \"Gives a sequence that is the reverse of the one produced by range with the same arguments.\r\n  Arguments are expected to be numerical. Not defined for zero arguments.\"\r\n  ([] (throw (ex-info \"rrange is not defined on zero arguments\" {})))\r\n  ([end]\r\n   {:pre [(number? end)]}\r\n   (range (dec end) -1 -1))\r\n  ([start end]\r\n   {:pre [(number? start) (number? end)]}\r\n   (range (dec end) (inc start) -1))\r\n  ([start end step]\r\n   {:pre [(number? start) (number? end) (number? step)]}\r\n   (let [l (- end start)\r\n         r (rem l step)]\r\n     (range (+ start\r\n               (* step (- (quot l step)\r\n                          (if (zero? r) 1 0))))\r\n            (- start step)\r\n            (- step)))))\r\n\r\n(defn named?\r\n  \"Returns true if x is suitable input for the name function.\"\r\n  [x]\r\n  (or (string? x)\r\n      (keyword? x)\r\n      (symbol? x)))\r\n\r\n\r\n(defn name-or-str\r\n  \"Returns (name x) if x is a keyword or symbol, (str x) otherwise.\"\r\n  [x] ((if (named? x) name str) x))\r\n\r\n(defn distinct-keys\r\n  \"Returns a sequence of distinct keys from its arguments.\"\r\n  [& maps]\r\n  (->> maps\r\n       (mapcat keys)\r\n       distinct))\r\n\r\n(defn map-reduce\r\n  \"Equivalent to (reduce rf init? (map f coll))\"\r\n  ([f rf coll]\r\n   (if (seq coll)\r\n     (map-reduce f\r\n                 rf\r\n                 (f (first coll))\r\n                 (rest coll))\r\n     (reduce rf coll)))\r\n  ([f rf init coll]\r\n   (reduce #(rf %1 (f %2))\r\n           init\r\n           coll)))\r\n\r\n(defn select\r\n  \"Returns the set of elements from xset for which pred is logical true.\r\n  Just like clojure.set/select, but utilizes transient collections.\"\r\n  [pred xset]\r\n  (reduce! (fn [s k] (if (pred k) s (disj! s k)))\r\n           (transient xset)\r\n           xset))\r\n\r\n(defn map-vals [f m]\r\n  (if (empty? m)\r\n    m\r\n    (if-let [tm (if (map? m)\r\n                  (when (satisfies? IEditableCollection m)\r\n                    (transient m))\r\n                  (transient {}))]\r\n      (reduce! (fn [tm [k v]]\r\n                 (assoc! tm k (f v)))\r\n               tm m)\r\n      (reduce (fn [m [k v]]\r\n                (assoc m k (f v)))\r\n              (empty m) m))))\r\n\r\n(defn map-kv [f m]\r\n  (if (empty? m)\r\n    m\r\n    (if-let [tm (if (map? m)\r\n                  (when (satisfies? IEditableCollection m)\r\n                    (transient m))\r\n                  (transient {}))]\r\n      (reduce! (fn [tm [k v]]\r\n                 (assoc! tm k (f k v)))\r\n               tm m)\r\n      (reduce (fn [m [k v]]\r\n                (assoc m k (f k v)))\r\n              (empty m) m))))\r\n\r\n(defn minimal-by\r\n  [f coll]\r\n  (when-first [a coll]\r\n    (reduce (fn [[mins minv :as m] x]\r\n              (let [v (f x)]\r\n                (cond\r\n                  (< v minv) [[x] v]\r\n                  (= v minv) [(conj mins x) minv]\r\n                  :else m)))\r\n            [[a] (f a)]\r\n            (rest coll))))\r\n\r\n(defn maximal-by\r\n  \"Returns the vector [maximal-items max-val],\r\n  where maximal-items is the collection of x in coll for which (f x) is greatest,\r\n  and max-val is the greatest value of f\"\r\n  [f coll]\r\n  (when-first [a coll]\r\n    (reduce (fn [[maxs maxv :as m] x]\r\n              (let [v (f x)]\r\n                (cond\r\n                  (> v maxv) [[x] v]\r\n                  (= v maxv) [(conj maxs x) maxv]\r\n                  :else m)))\r\n            [[a] (f a)]\r\n            (rest coll))))\r\n\r\n(defn maximum\r\n  \"Returns the max value of (f x) over all x in coll, where f defaults to identity.\"\r\n  ([coll]\r\n   (reduce max coll))\r\n  ([f coll]\r\n   (when-first [a coll]\r\n     (reduce (fn [mv x]\r\n               (max mv (f x)))\r\n             (f a)\r\n             (rest coll)))) )\r\n\r\n(defn minimum\r\n  \"Returns the min value of (f x) over all x in coll, where f defaults to identity.\"\r\n  ([coll]\r\n   (reduce min coll))\r\n  ([f coll]\r\n   (when-first [a coll]\r\n     (reduce (fn [mv x]\r\n               (min mv (f x)))\r\n             (f a)\r\n             (rest coll)))) )\r\n\r\n(defn count-when\r\n  [pred coll]\r\n  (reduce #(if (pred %2) (inc %1) %1) 0 coll))\r\n\r\n(defn count-distinct\r\n  [coll]\r\n  (loop [total 0\r\n         marked (transient #{})\r\n         xs coll]\r\n    (if-let [[x & xs'] (seq xs)]\r\n      (if (contains? marked x)\r\n        (recur total marked xs')\r\n        (recur (inc total) (conj! marked x) xs'))\r\n      total)))\r\n\r\n(defn one? [x] (= x 1))\r\n\r\n(defn singleton?\r\n  \"Returns true if x is a collection with exactly one item.\"\r\n  [x]\r\n  (and (coll? x)\r\n       (one? (bounded-count 2 x))))\r\n\r\n(defn disjoint?\r\n  \"Given two collections, returns true if they contain no common elements.\"\r\n  [c1 c2]\r\n  (or (empty? c1)\r\n      (empty? c2)\r\n      (not-any? #(contains? c2 %) c1)))\r\n\r\n(defn products\r\n  \"Returns a vector of vectors representing the cartesian product of elements in the given sequences.\"\r\n  [& seqs]\r\n  (let [vecs (mapv vec seqs)\r\n        n-1 (dec (count vecs))\r\n        pare-down (fn [vs]\r\n                    (loop [i n-1\r\n                           vs vs]\r\n                      (when (>= i 0)\r\n                        (if-let [rst (next (vs i))]\r\n                          (assoc vs i rst)\r\n                          (recur (dec i) (assoc vs i (vecs i)))))))]\r\n    (when (not-any? empty? vecs)\r\n      (loop [result []\r\n             vs vecs]\r\n        (if (empty? vs)\r\n          result\r\n          (recur (conj result (mapv first vs))\r\n                 (pare-down vs)))))))\r\n\r\n(defn conj-kept\r\n  \"Returns new collection with non-nil xs conjoined.\"\r\n  ([] (conj))\r\n  ([coll] (conj coll))\r\n  ([coll x] (if (nil? x) coll (conj coll x)))\r\n  ([coll x & xs] (reduce! #(if (nil? %2) %1 (conj! %1 %2))\r\n                          (if (nil? x)\r\n                            (transient coll)\r\n                            (conj! (transient coll) x))\r\n                          xs)))\r\n\r\n(defn positions\r\n  [pred coll]\r\n  (seq (keep-indexed #(when (pred %2) %1) coll)))\r\n\r\n\r\n(defn pick\r\n  \"Takes two sequences, and returns a vector consisting of items from the\r\n  first where the element at the corresponding position of the second is\r\n  logical true.\r\n\r\n  (pick [:a :b :c :d] [true false true false])\r\n  ;; => [:a :b]\"\r\n  [coll sel]\r\n  (loop [coll (seq coll)\r\n         sel (seq sel)\r\n         ret []]\r\n    (if (and coll sel)\r\n      (recur (next coll)\r\n             (next sel)\r\n             (if (first sel)\r\n               (conj ret (first coll))\r\n               ret))\r\n      ret)))\r\n\r\n(defn hiccup-tag\r\n  \"With one argument x, returns (first x) if x is a vector whose first item is\r\n  a keyword, nil otherwise.\r\n\r\n  With an additional first argument test, returns (first x) when x is a vector,\r\n  and test is either equal to (first x), or is a set which contains (first x).\"\r\n  ([x]\r\n   (when (vector? x)\r\n     (let [t (first x)]\r\n       (when (keyword? t) t))))\r\n  ([test x]\r\n   (when (vector? x)\r\n     (let [t (first x)]\r\n       (cond\r\n         (set? test) (test t)\r\n         (= test t) t)))))\r\n\r\n(defn count-truthy\r\n  [coll]\r\n  (reduce #(if %2 (inc %1) %1)\r\n          0\r\n          coll))\r\n\r\n\r\n(defn truth-vecs\r\n  ([n] (truth-vecs n false))\r\n  ([n meta?]\r\n   (let [idxs (rrange n)]\r\n     (map (if meta? #(with-meta (mapv (partial bit-test %) idxs)\r\n                                {:terms (sorted-set %)})\r\n                    #(mapv (partial bit-test %) idxs))\r\n          (range (bit-set 0 n))))))\r\n\r\n\r\n(defn max-set-bit\r\n  \"Gets maximum set bit of n. Expects n to be a nonnegative integer.\"\r\n  [n]\r\n  {:pre [(nat-int? n)]}\r\n  (loop [x n, i 0]\r\n    (if (pos? x)\r\n      (recur (bit-shift-right x 1) (inc i))\r\n      i)))\r\n\r\n(defn map-assoc\r\n  [f keys]\r\n  (reduce! #(assoc! %1 %2 (f %2))\r\n           (transient {})\r\n           keys))\r\n\r\n;(defn pass [& _] nil)\r\n(def pass gfunc/NULL)\r\n\r\n(defn essence [x]\r\n  (if (satisfies? IDeref x) @x x))\r\n\r\n(defn construct\r\n  ([f] (f))\r\n  ([f x] (f x))\r\n  ([f x y] (f x y))\r\n  ([f x y z] (f x y z))\r\n  ([f a b c d] (f a b c d))\r\n  ([f a b c d & more] (apply f a b c d more)))\r\n\r\n(defn mapa\r\n  [f coll]\r\n  (let [arr (array)]\r\n    (loop [coll (seq coll)]\r\n      (when coll\r\n        (.push arr (f (first coll)))\r\n        (recur (next coll))))\r\n    arr))\r\n\r\n\r\n(defn map-into-array\r\n  [f arr coll]\r\n  {:pre [(array? arr)]}\r\n  (loop [coll (seq coll)]\r\n    (when coll\r\n      (.push arr (f (first coll)))\r\n      (recur (next coll))))\r\n  arr)\r\n\r\n(defn reset-nil! [& atoms]\r\n  (doseq [a atoms] (reset! a nil)))\r\n\r\n(defn postinc! [a]\r\n  (let [v @a]\r\n    (swap! a inc)\r\n    v))\r\n\r\n(defn post-swap! [a f & args]\r\n  (let [v @a]\r\n    (apply swap! f args)\r\n    v))\r\n\r\n(defn add-keys [seq]\r\n  (map-indexed #(vary-meta %2 assoc :key %1) seq))\r\n\r\n\r\n\r\n(defn assoc-some\r\n  ([coll k v]\r\n   (if (some? k)\r\n     (assoc coll k v)\r\n     coll))\r\n  ([coll k v & kvs]\r\n   (let [ret (assoc-some coll k v)]\r\n     (if kvs\r\n       (recur ret (first kvs) (second kvs) (nnext kvs))\r\n       ret))))\r\n\r\n(defn array-like? [x]\r\n  (or (array? x)\r\n      (vector? x)))\r\n\r\n(defn int-digits\r\n  ([x] {:pre [(int? x)]}\r\n   (if (zero? x)\r\n     1\r\n     (-> x Math/abs Math/log10 Math/floor inc)))\r\n  ([x base] {:pre [(int? x) (int? base)]}\r\n   (if (zero? x)\r\n     1\r\n     (-> x\r\n         Math/abs\r\n         Math/log\r\n         (/ (case base\r\n              2 Math/LN2\r\n              10 Math/LN10\r\n              (Math/log base)))\r\n         Math/floor\r\n         inc)))\r\n  )\r\n\r\n(defn stopping-propagation [f]\r\n  (fn [event & args]\r\n    (apply f event args)\r\n    (j/call event :stopPropagation)))\r\n\r\n\r\n(defn toggle-selection\r\n  \"Updates :selection in sel, to new-selection if it is different from current value, nil otherwise.\r\n  In the latter case, event.target.blur() is also called.\r\n  When event.shiftKey is true, :selection becomes new-selection, and :page-data is updated to show new-step.\"\r\n  [{selection :selection\r\n    [_ per-page] :page-data\r\n    :as sel} event new-selection new-step]\r\n  (if (j/get event :ctrlKey)\r\n    (if new-step\r\n      {:selection new-selection\r\n       :page-data [(quot new-step per-page) per-page]}\r\n      (assoc sel :selection new-selection))\r\n    (assoc sel\r\n      :selection (if (= new-selection selection)\r\n                   ;; blur target and return nil\r\n                   (j/call-in event [:target :blur])\r\n                   new-selection))))\r\n\r\n(defn toggle-selection-key-down-fn [!sel new-selection new-step]\r\n  (fn [e]\r\n    (case (j/get e :key)\r\n      \"Enter\" (do\r\n                (swap! !sel toggle-selection e new-selection new-step)\r\n                (j/call e :preventDefault)\r\n                (j/call e :stopPropagation))\r\n      \" \" (do\r\n            (j/call e :preventDefault)\r\n            (j/call e :stopPropagation)\r\n            (when-not (j/get e :repeat)\r\n              (j/call-in e [:target :classList :toggle] \"active\" true)))\r\n      nil)))\r\n\r\n(defn toggle-selection-key-up-fn [!sel new-selection new-step]\r\n  (fn [e]\r\n    (case (j/get e :key)\r\n      \" \" (do\r\n            (swap! !sel toggle-selection e new-selection new-step)\r\n            (j/call-in e [:target :classList :toggle] \"active\" false)\r\n            (j/call e :preventDefault)\r\n            (j/call e :stopPropagation))\r\n      nil)))\r\n\r\n(defn assoc-in'\r\n  \"assoc-in that allows for multiple key-seq/value pairs.\"\r\n  ([m ks v]\r\n   (assoc-in m ks v))\r\n  ([m ks v & kvs]\r\n   (let [ret (assoc-in m ks v)]\r\n     (if kvs\r\n       (recur ret (first kvs) (second kvs) (nnext kvs))\r\n       ret))))\r\n\r\n(defn reduce-from [f init coll]\r\n  (if (reduced? init)\r\n    @init\r\n    (reduce f init coll)))\r\n\r\n(defn toggle!\r\n  ([atom] (swap! atom not))\r\n  ([atom val] (swap! atom #(when-not (= % val) val))) )\r\n\r\n(defn str-join\r\n  ([coll] (str/join coll))\r\n  ([sep coll] (str/join sep coll))\r\n  #_([start end coll]\r\n   (loop [sb (StringBuffer. (str start))\r\n          coll (seq coll)]\r\n     (if-not (nil? coll)\r\n       (recur (j/call sb :append (str (first coll))) (next coll))\r\n       ^string (do (j/call sb :append (str end))\r\n                   (j/call sb :toString)))))\r\n  ([sep f coll]\r\n   (loop [sb (StringBuffer.)\r\n          coll (seq coll)]\r\n     (if-not (nil? coll)\r\n       (do (j/call sb :append (str (f (first coll))))\r\n           (let [coll (next coll)]\r\n             (when-not (nil? coll)\r\n               (j/call sb :append sep))\r\n             (recur sb coll)))\r\n       ^string (j/call sb :toString))))\r\n  ([start sep end coll]\r\n   (loop [sb (StringBuffer. (str start))\r\n          coll (seq coll)]\r\n     (if-not (nil? coll)\r\n       (do (j/call sb :append (str (first coll)))\r\n           (let [coll (next coll)]\r\n             (when-not (nil? coll)\r\n               (j/call sb :append sep))\r\n             (recur sb coll)))\r\n       ^string (do (j/call sb :append (str end))\r\n                   (j/call sb :toString)))))\r\n\r\n  ([start sep end f coll]\r\n   (loop [sb (StringBuffer. (str start))\r\n          coll (seq coll)]\r\n     (if-not (nil? coll)\r\n       (do (j/call sb :append (str (f (first coll))))\r\n           (let [coll (next coll)]\r\n             (when-not (nil? coll)\r\n               (j/call sb :append sep))\r\n             (recur sb coll)))\r\n       ^string (do (j/call sb :append (str end))\r\n                   (j/call sb :toString))))) )\r\n\r\n(defn big-int [n]\r\n  (js/BigInt n))\r\n\r\n\r\n(defn str-surround [start end s]\r\n  (str start s end))\r\n\r\n\r\n(defn byte-array\r\n  ([size-or-seq] (if (seqable? size-or-seq)\r\n                   (js/Int8Array.from size-or-seq)\r\n                   (js/Int8Array. size-or-seq)))\r\n  ([size init-val-or-seq] (if (seqable? init-val-or-seq)\r\n                            (js/Int8Array.from (j/assoc! (clj->js init-val-or-seq)\r\n                                                 :length size))\r\n                            (j/call (js/Int8Array. size) :fill init-val-or-seq))))\r\n\r\n(defn byte-array? [x] (= (type x) js/Int8Array))\r\n\r\n(defn floor-log2 [n] (- 31 (js/Math.clz32 n)))\r\n\r\n(defn non-empties [& args]\r\n  (remove empty? args))\r\n"]}