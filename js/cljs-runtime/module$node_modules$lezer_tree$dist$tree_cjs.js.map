{
"version":3,
"file":"module$node_modules$lezer_tree$dist$tree_cjs.js",
"lineCount":40,
"mappings":"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",
"sources":["node_modules/lezer-tree/dist/tree.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$lezer_tree$dist$tree_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/// The default maximum length of a `TreeBuffer` node.\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nconst CachedNode = new WeakMap();\n/// Each [node type](#tree.NodeType) can have metadata associated with\n/// it in props. Instances of this class represent prop names.\nclass NodeProp {\n    /// Create a new node prop type. You can optionally pass a\n    /// `deserialize` function.\n    constructor({ deserialize } = {}) {\n        this.id = nextPropID++;\n        this.deserialize = deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// Create a string-valued node prop whose deserialize function is\n    /// the identity function.\n    static string() { return new NodeProp({ deserialize: str => str }); }\n    /// Create a number-valued node prop whose deserialize function is\n    /// just `Number`.\n    static number() { return new NodeProp({ deserialize: Number }); }\n    /// Creates a boolean-valued node prop whose deserialize function\n    /// returns true for any input.\n    static flag() { return new NodeProp({ deserialize: () => true }); }\n    /// Store a value for this prop in the given object. This can be\n    /// useful when building up a prop object to pass to the\n    /// [`NodeType`](#tree.NodeType) constructor. Returns its first\n    /// argument.\n    set(propObj, value) {\n        propObj[this.id] = value;\n        return propObj;\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#tree.NodeSet.extend) or\n    /// [`Parser.withProps`](#lezer.Parser.withProps) to compute prop\n    /// values for each node type in the set. Takes a [match\n    /// object](#tree.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The inverse of [`openedBy`](#tree.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n    /// @internal\n    constructor(\n    /// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, \n    /// @internal\n    props, \n    /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, \n    /// @internal\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |\n            (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src)\n                    src[0].set(props, src[1]);\n            }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) { return this.props[prop.id]; }\n    /// True when this is the top node of a grammar.\n    get isTop() { return (this.flags & 1 /* Top */) > 0; }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }\n    /// Indicates whether this is an error node.\n    get isError() { return (this.flags & 4 /* Error */) > 0; }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }\n    /// Returns true when this node's name or one of its\n    /// [groups](#tree.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#tree.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#tree.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a number array. Each parser\n/// [has](#lezer.Parser.nodeSet) a node set, and [tree\n/// buffers](#tree.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536)\n/// node types in it, so that the ids fit into 16-bit typed array\n/// slots.\nclass NodeSet {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(\n    /// The node types in this set, by id.\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method should be created with\n    /// [`NodeProp.add`](#tree.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    add[0].set(newProps, add[1]);\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the `TreeCursor` interface instead, which provides a view on\n/// some part of this data structure, and can be used to move around\n/// to adjacent nodes.\nclass Tree {\n    /// Construct a new tree. You usually want to go through\n    /// [`Tree.build`](#tree.Tree^build) instead.\n    constructor(type, \n    /// The tree's child nodes. Children small enough to fit in a\n    /// `TreeBuffer will be represented as such, other children can be\n    /// further `Tree` instances with their own internal structure.\n    children, \n    /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, \n    /// The total length of this tree\n    length) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n    }\n    /// @internal\n    toString() {\n        let children = this.children.map(c => c.toString()).join();\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#tree.TreeCursor) rooted at this tree. When\n    /// `pos` is given, the cursor is [moved](#tree.TreeCursor.moveTo)\n    /// to the given position and side.\n    cursor(pos, side = 0) {\n        let scope = (pos != null && CachedNode.get(this)) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        if (pos != null) {\n            cursor.moveTo(pos, side);\n            CachedNode.set(this, cursor._tree);\n        }\n        return cursor;\n    }\n    /// Get a [tree cursor](#tree.TreeCursor) that, unlike regular\n    /// cursors, doesn't skip [anonymous](#tree.NodeType.isAnonymous)\n    /// nodes.\n    fullCursor() {\n        return new TreeCursor(this.topNode, true);\n    }\n    /// Get a [syntax node](#tree.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#tree.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    resolve(pos, side = 0) {\n        return this.cursor(pos, side).node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, the given node\n    /// will not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        for (let c = this.cursor();;) {\n            let mustLeave = false;\n            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to) !== false)) {\n                if (c.firstChild())\n                    continue;\n                if (!c.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(c.type, c.from, c.to);\n                mustLeave = c.type.isAnonymous;\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Balance the direct children of this tree.\n    balance(maxBufferLength = DefaultBufferLength) {\n        return this.children.length <= BalanceBranchFactor ? this\n            : balanceRange(this.type, NodeType.none, this.children, this.positions, 0, this.children.length, 0, maxBufferLength, this.length, 0);\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) { return buildTree(data); }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\n// For trees that need a context hash attached, we're using this\n// kludge which assigns an extra property directly after\n// initialization (creating a single new object shape).\nfunction withHash(tree, hash) {\n    if (hash)\n        tree.contextHash = hash;\n    return tree;\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it)\nclass TreeBuffer {\n    /// Create a tree buffer @internal\n    constructor(\n    /// @internal\n    buffer, \n    // The total length of the group of nodes in the buffer.\n    length, \n    /// @internal\n    set, type = NodeType.none) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n        this.type = type;\n    }\n    /// @internal\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, after) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (after != -100000000 /* None */) {\n                let start = buffer[i + 1], end = buffer[i + 2];\n                if (dir > 0) {\n                    if (end > after)\n                        pick = i;\n                    if (end > after)\n                        break;\n                }\n                else {\n                    if (start < after)\n                        pick = i;\n                    if (end >= after)\n                        break;\n                }\n            }\n            else {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n}\nclass TreeNode {\n    constructor(node, from, index, _parent) {\n        this.node = node;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this.node.type; }\n    get name() { return this.node.type.name; }\n    get to() { return this.from + this.node.length; }\n    nextChild(i, dir, after, full = false) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent.node, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (after != -100000000 /* None */ && (dir < 0 ? start >= after : start + next.length <= after))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    let index = next.findChild(0, next.buffer.length, dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - start);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if (full || (!next.type.isAnonymous || hasChild(next))) {\n                    let inner = new TreeNode(next, start, i, parent);\n                    return full || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, after);\n                }\n            }\n            if (full || !parent.type.isAnonymous)\n                return null;\n            i = parent.index + dir;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, -100000000 /* None */); }\n    get lastChild() { return this.nextChild(this.node.children.length - 1, -1, -100000000 /* None */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos); }\n    childBefore(pos) { return this.nextChild(this.node.children.length - 1, -1, pos); }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent ? this._parent.nextChild(this.index + 1, 1, -1) : null;\n    }\n    get prevSibling() {\n        return this._parent ? this._parent.nextChild(this.index - 1, -1, -1) : null;\n    }\n    get cursor() { return new TreeCursor(this); }\n    resolve(pos, side = 0) {\n        return this.cursor.moveTo(pos, side).node;\n    }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() { return this.node.toString(); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor, result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode {\n    constructor(context, _parent, index) {\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    child(dir, after) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.context.start);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, -100000000 /* None */); }\n    get lastChild() { return this.child(-1, -100000000 /* None */); }\n    childAfter(pos) { return this.child(1, pos); }\n    childBefore(pos) { return this.child(-1, pos); }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, -1);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));\n    }\n    get cursor() { return new TreeCursor(this); }\n    resolve(pos, side = 0) {\n        return this.cursor.moveTo(pos, side).node;\n    }\n    /// @internal\n    toString() { return this.context.buffer.childString(this.index); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n    /// @internal\n    constructor(node, full = false) {\n        this.full = full;\n        this.buffer = null;\n        this.stack = [];\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    /// Shorthand for `.type.name`.\n    get name() { return this.type.name; }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enter(dir, after) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, after, this.full));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.buffer.start);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() { return this.enter(1, -100000000 /* None */); }\n    /// Move the cursor to this node's last child.\n    lastChild() { return this.enter(-1, -100000000 /* None */); }\n    /// Move the cursor to the first child that starts at or after `pos`.\n    childAfter(pos) { return this.enter(1, pos); }\n    /// Move to the last child that ends at or before `pos`.\n    childBefore(pos) { return this.enter(-1, pos); }\n    /// Move the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode(this.full ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = this.full ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree._parent.nextChild(this._tree.index + dir, dir, -100000000 /* None */, this.full));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, -100000000 /* None */, this.full)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() { return this.sibling(1); }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            for (let i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {\n                let child = parent.node.children[i];\n                if (this.full || !child.type.isAnonymous || child instanceof TreeBuffer || hasChild(child))\n                    return false;\n            }\n        }\n        return true;\n    }\n    move(dir) {\n        if (this.enter(dir, -100000000 /* None */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty, its next sibling or the next sibling of\n    /// the first parent node that has one.\n    next() { return this.move(1); }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by ist last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev() { return this.move(-1); }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        for (;;) {\n            if (side < 0 ? !this.childBefore(pos) : !this.childAfter(pos))\n                break;\n            if (this.from == this.to ||\n                (side < 1 ? this.from >= pos : this.from > pos) ||\n                (side > -1 ? this.to <= pos : this.to < pos)) {\n                this.parent();\n                break;\n            }\n        }\n        return this;\n    }\n    /// Get a [syntax node](#tree.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#tree.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#tree.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree.node;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => !ch.type.isAnonymous || ch instanceof TreeBuffer || hasChild(ch));\n}\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\nconst BalanceBranchFactor = 8;\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, topID = 0, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id, start, end, size } = cursor;\n        let startPos = start - parentStart;\n        if (size < 0) {\n            if (size == -1) { // Reused node\n                children.push(reused[id]);\n                positions.push(startPos);\n            }\n            else { // Context change\n                contextHash = id;\n            }\n            cursor.next();\n            return;\n        }\n        let type = types[id], node, buffer;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index, inRepeat);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet, inRepeat < 0 ? NodeType.none : types[inRepeat]);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            while (cursor.pos > endPos) {\n                if (cursor.id == localInRepeat)\n                    cursor.next();\n                else\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n            }\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && localChildren.length > BalanceBranchFactor)\n                node = balanceRange(type, type, localChildren, localPositions, 0, localChildren.length, 0, maxBufferLength, end - start, contextHash);\n            else\n                node = withHash(new Tree(type, localChildren, localPositions, end - start), contextHash);\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let nodeSize = fork.size, startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0)\n                    break scan;\n                if (fork.id >= minRepeatType)\n                    localSkipped += 4;\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index, inRepeat) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (id == inRepeat)\n            return index;\n        let startIndex = index;\n        if (size > 4) {\n            let endPos = cursor.pos - (size - 4);\n            while (cursor.pos > endPos)\n                index = copyToBuffer(bufferStart, buffer, index, inRepeat);\n        }\n        if (id < minRepeatType) { // Don't copy repeat nodes into buffers\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[topID], children.reverse(), positions.reverse(), length);\n}\nfunction balanceRange(outerType, innerType, children, positions, from, to, start, maxBufferLength, length, contextHash) {\n    let localChildren = [], localPositions = [];\n    if (length <= maxBufferLength) {\n        for (let i = from; i < to; i++) {\n            localChildren.push(children[i]);\n            localPositions.push(positions[i] - start);\n        }\n    }\n    else {\n        let maxChild = Math.max(maxBufferLength, Math.ceil(length * 1.5 / BalanceBranchFactor));\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i];\n            i++;\n            for (; i < to; i++) {\n                let nextEnd = positions[i] + children[i].length;\n                if (nextEnd - groupStart > maxChild)\n                    break;\n            }\n            if (i == groupFrom + 1) {\n                let only = children[groupFrom];\n                if (only instanceof Tree && only.type == innerType && only.length > maxChild << 1) { // Too big, collapse\n                    for (let j = 0; j < only.children.length; j++) {\n                        localChildren.push(only.children[j]);\n                        localPositions.push(only.positions[j] + groupStart - start);\n                    }\n                    continue;\n                }\n                localChildren.push(only);\n            }\n            else if (i == groupFrom + 1) {\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let inner = balanceRange(innerType, innerType, children, positions, groupFrom, i, groupStart, maxBufferLength, positions[i - 1] + children[i - 1].length - groupStart, contextHash);\n                if (innerType != NodeType.none && !containsType(inner.children, innerType))\n                    inner = withHash(new Tree(NodeType.none, inner.children, inner.positions, inner.length), contextHash);\n                localChildren.push(inner);\n            }\n            localPositions.push(groupStart - start);\n        }\n    }\n    return withHash(new Tree(outerType, localChildren, localPositions, length), contextHash);\n}\nfunction containsType(nodes, type) {\n    for (let elt of nodes)\n        if (elt.type == type)\n            return true;\n    return false;\n}\n/// Tree fragments are used during [incremental\n/// parsing](#lezer.ParseOptions.fragments) to track parts of old\n/// trees that can be reused in a new parse. An array of fragments is\n/// used to track regions of an old tree whose nodes might be reused\n/// in new parses. Use the static\n/// [`applyChanges`](#tree.TreeFragment^applyChanges) method to update\n/// fragments for document changes.\nclass TreeFragment {\n    constructor(\n    /// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, \n    /// The end of the unchanged range.\n    to, \n    /// The tree that this fragment is based on.\n    tree, \n    /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, open) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = open;\n    }\n    get openStart() { return (this.open & 1 /* Start */) > 0; }\n    get openEnd() { return (this.open & 2 /* End */) > 0; }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        let cI = 0, pos = 0, off = 0;\n        for (;;) {\n            let nextC = cI < changes.length ? changes[cI++] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null :\n                            new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, (cI > 0 ? 1 /* Start */ : 0) | (nextC ? 2 /* End */ : 0));\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the token at its\n    /// end is not included in [`safeTo`](#tree.TreeFragment.safeTo).\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, partial ? 2 /* End */ : 0)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n}\n// Creates an `Input` that is backed by a single, flat string.\nfunction stringInput(input) { return new StringInput(input); }\nclass StringInput {\n    constructor(string, length = string.length) {\n        this.string = string;\n        this.length = length;\n    }\n    get(pos) {\n        return pos < 0 || pos >= this.length ? -1 : this.string.charCodeAt(pos);\n    }\n    lineAfter(pos) {\n        if (pos < 0)\n            return \"\";\n        let end = this.string.indexOf(\"\\n\", pos);\n        return this.string.slice(pos, end < 0 ? this.length : Math.min(end, this.length));\n    }\n    read(from, to) { return this.string.slice(from, Math.min(this.length, to)); }\n    clip(at) { return new StringInput(this.string, at); }\n}\n\nexports.DefaultBufferLength = DefaultBufferLength;\nexports.NodeProp = NodeProp;\nexports.NodeSet = NodeSet;\nexports.NodeType = NodeType;\nexports.Tree = Tree;\nexports.TreeBuffer = TreeBuffer;\nexports.TreeCursor = TreeCursor;\nexports.TreeFragment = TreeFragment;\nexports.stringInput = stringInput;\n//# sourceMappingURL=tree.cjs.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","withHash","tree","hash","contextHash","getChildren","node","type","before","after","cur","cursor","result","firstChild","is","nextSibling","push","hasChild","children","some","ch","isAnonymous","TreeBuffer","buildTree","data","takeNode","parentStart","minPos","positions","inRepeat","id","start","end","size","startPos","reused","next","types","fork","skip","minStart","maxBufferLength","pos","maxSize","nodeSize","localSkipped","minRepeatType","nodeStart","undefined","Uint16Array","buffer","endPos","index","length","copyToBuffer","nodeSet","NodeType","none","localChildren","localPositions","localInRepeat","reverse","BalanceBranchFactor","balanceRange","Tree","bufferStart","startIndex","_a","topID","DefaultBufferLength","Array","isArray","FlatBufferCursor","outerType","innerType","from","to","i","maxChild","Math","max","ceil","groupFrom","groupStart","only","j","inner","elt","nodes","Object","defineProperty","value","nextPropID","CachedNode","WeakMap","NodeProp","constructor","deserialize","Error","string","str","number","Number","flag","set","propObj","add","match","closedBy","split","openedBy","group","noProps","create","name","props","flags","define","spec","top","skipped","error","src","prop","indexOf","map","direct","groups","found","NodeSet","RangeError","extend","newTypes","newProps","source","assign","toString","c","join","test","isError","JSON","stringify","side","scope","get","topNode","TreeCursor","moveTo","_tree","fullCursor","TreeNode","resolve","iterate","enter","leave","mustLeave","parent","balance","build","empty","childString","endIndex","findChild","dir","pick","_parent","nextChild","full","e","BufferNode","BufferContext","childAfter","childBefore","nextSignificantParent","val","getChild","r","context","child","externalSibling","stack","bufferNode","yieldNode","n","unshift","yieldBuf","yield","lastChild","pop","sibling","d","prevSibling","atLastNode","move","prev","cache","depth","TreeFragment","offset","open","applyChanges","fragments","changes","minGap","fI","nextF","cI","off","nextC","nextPos","fromA","cut","fFrom","fTo","min","toA","toB","addTree","partial","f","StringInput","charCodeAt","lineAfter","slice","read","clip","at","stringInput","input"]
}
