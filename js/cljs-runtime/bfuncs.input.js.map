{"version":3,"sources":["bfuncs/input.cljs"],"mappings":"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","names":["js/bfuncs","js/bfuncs.input","js/bfuncs.input.!input-type","bfuncs.input/!input-type","reagent.core.atom","js/bfuncs.input.!expression-field-state","bfuncs.input/!expression-field-state","js/bfuncs.input.!marked-var","bfuncs.input/!marked-var","js/bfuncs.input.!minterms-field-state","bfuncs.input/!minterms-field-state","js/bfuncs.input.!u-minterms-field-state","bfuncs.input/!u-minterms-field-state","js/bfuncs.input.!duped-minterms","bfuncs.input/!duped-minterms","js/bfuncs.input.!maxterms-field-state","bfuncs.input/!maxterms-field-state","js/bfuncs.input.!u-maxterms-field-state","bfuncs.input/!u-maxterms-field-state","js/bfuncs.input.!duped-maxterms","bfuncs.input/!duped-maxterms","bfuncs.input/state-atoms","bfuncs.input/u-state-atoms","bfuncs.input/parse-result->clj","parse-result","type","G__68199","cljs.core/Keyword","js/Error","obj68200","k68201","obj68202","applied-science.js-interop.impl/in?*","js/undefined","obj68203","k68204","obj68205","obj68207","k68208","obj68209","obj68212","k68213","obj68215","cljs.core/vec","obj68216","k68217","obj68222","obj68224","k68225","obj68226","obj68228","k68229","obj68230","obj68233","k68234","obj68235","obj68237","k68238","obj68239","p__68243","p__68244","map__68245","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__68246","bfuncs.input/term-intersection","t1","x1","t2","x2","cljs.core/empty?","cljs.core.disj","vec__68253","cljs.core.nth","cljs.core.sort_by","cljs.core/count","cljs.core.into","cljs.core.filter","cljs.core.partial","cljs.core/contains?","cljs.core/set","bfuncs.input/handle-terms-fn","!this-state","!other-state","!duped-terms","js-result","new-parse","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/reset!","cljs.core/deref","p__68264","map__68265","bfuncs.input/expression-field","marked-var","on-parse","class","initial-doc","placeholder","issues","js/module$bfuncs$EditorField.ExpressionField","classes68272","bfuncs.style/!vclasses","reagent.core.class_names","p__68276","map__68277","bfuncs.input/terms-field","duped-terms","allow-empty","js/module$bfuncs$EditorField.TermsField","classes68280","bfuncs.utils.echol","bfuncs.input/variable","var","marked?","reagent-material-ui.core.button-base/button-base","classes68290","bfuncs.utils.toggle_BANG_","p1__68282#","cljs.core/second","p1__68283#","bfuncs.typesetting/$","bfuncs.typesetting/format-latex-var","bfuncs.input/term","t","obj__27297__auto__","f__27298__auto__","bfuncs.input/variables-section","vars","mvar","reagent-material-ui.core.typography/typography","cljs.core.map","v","cljs.core._EQ_","bfuncs.input/terms-section","title","terms","cljs.core/seq","bfuncs.input/expression-section","expr","bfuncs.typesetting/expression","p__68320","map__68321","bfuncs.input/expression-input","with-let68327","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__27840__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init68328","res__27841__auto__","handle-parse","handle-click-away","default-text","cljs.core.get_in","!last-valid-expr","cljs.core.atom","map__68339","map__68340","reagent.core.track_BANG_","cljs.core/first","tree","errors?","porse","reagent-material-ui.core.click-away-listener/click-away-listener","p__68351","map__68352","bfuncs.input/minterms-input","with-let68355","init68356","handle-minterms-parse","default-u-text","handle-u-minterms-parse","map__68378","map__68380","map__68382","map__68383","duped-minterms","reagent.core.track","cljs.core/clj->js","u-issues","u-terms","bfuncs.typesetting/minterms-expression","p__68418","map__68419","bfuncs.input/maxterms-input","with-let68422","init68423","handle-maxterms-parse","handle-u-maxterms-parse","map__68439","map__68440","map__68441","map__68442","duped-maxterms","bfuncs.typesetting/maxterms-expression","bfuncs.utils.echo","bfuncs.input/update-issues!","!state","p1__68453#","cljs.core.assoc","map__68455","duplicates?","cljs.core.remove","cljs.core/nil?","p__68466","map__68467","bfuncs.input/input-card","on-success","on-failure","on-submit","with-let68473","init68474","p1__68458#","submit","temp__27540__auto__","G__68482","input-type","map__68484","parse","fexpr__68488","map__68490","map__68491","u-parse","G__68540","fexpr__68539","cljs.core.update","cljs.core.merge_with","cljs.core/vector","reagent-material-ui.core.card/card","reagent-material-ui.core.card-content/card-content","classes68541","reagent-material-ui.core.form-control/form-control","reagent-material-ui.core.form-label/form-label","reagent-material-ui.core.radio-group/radio-group","bfuncs.utils/event-value","reagent-material-ui.core.form-control-label/form-control-label","reagent.core.as_element","reagent-material-ui.core.radio/radio","bfuncs.transitions/switch-transition","G__68543","reagent-material-ui.core.fade/fade","reagent-material-ui.core.button/button"],"sourcesContent":["(ns bfuncs.input\r\n  (:require\r\n   [reagent.core :as r :refer-macros [with-let]]\r\n   [bfuncs.style :refer [classes]]\r\n   [applied-science.js-interop :as j]\r\n   [bfuncs.utils :refer [echol echo mp toggle! event-value let-case reduce!]]\r\n   [bfuncs.typesetting :refer [$ format-latex-var minterms-expression maxterms-expression expression]]\r\n   [reagent-material-ui.core.typography :refer [typography]]\r\n   [reagent-material-ui.core.button-base :refer [button-base]]\r\n   [reagent-material-ui.core.click-away-listener :refer [click-away-listener]]\r\n   [reagent-material-ui.core.button :refer [button]]\r\n   [reagent-material-ui.core.card :refer [card]]\r\n   [reagent-material-ui.core.card-content :refer [card-content]]\r\n   [reagent-material-ui.core.form-label :refer [form-label]]\r\n   [reagent-material-ui.core.form-control-label :refer [form-control-label]]\r\n   [reagent-material-ui.core.form-control :refer [form-control]]\r\n   [reagent-material-ui.core.fade :refer [fade]]\r\n   [reagent-material-ui.core.icon-button :refer [icon-button]]\r\n   [reagent-material-ui.core.radio :refer [radio]]\r\n   [reagent-material-ui.core.radio-group :refer [radio-group]]\r\n   [reagent-material-ui.icons.add-outlined :refer [add-outlined]]\r\n   [bfuncs.transitions :refer [switch-transition]]\r\n   [\"/bfuncs/EditorField\" :refer [TermsField ExpressionField]]\r\n   [clojure.set :as set]))\r\n\r\n\r\n(defonce !input-type (r/atom \"expression\"))\r\n(defonce !expression-field-state (r/atom {:issues nil, :parse nil}))\r\n(defonce !marked-var (r/atom nil))\r\n\r\n(defonce !minterms-field-state (r/atom {:issues nil, :parse nil}))\r\n(defonce !u-minterms-field-state (r/atom {:issues nil, :parse nil}))\r\n(defonce !duped-minterms (r/atom #{}))\r\n\r\n(defonce !maxterms-field-state (r/atom {:issues nil :parse nil}))\r\n(defonce !u-maxterms-field-state (r/atom {:issues nil :parse nil}))\r\n(defonce !duped-maxterms (r/atom #{}))\r\n\r\n(def state-atoms\r\n  {\"minterms\" !minterms-field-state\r\n   \"maxterms\" !maxterms-field-state})\r\n\r\n(def u-state-atoms\r\n  {\"minterms\" !u-minterms-field-state\r\n   \"maxterms\" !u-maxterms-field-state})\r\n\r\n(defn- parse-result->clj [parse-result type]\r\n  (case type\r\n    :expression {:tree (j/get parse-result :parse)\r\n                 :vars (j/get parse-result :vars)\r\n                 :errors? (j/get parse-result :errors)\r\n                 :text (j/get parse-result :text)\r\n                 :type type}\r\n    (:unspecified\r\n     :minterms\r\n     :maxterms) {:terms (vec (j/get parse-result :terms))\r\n                 :extra (j/get parse-result :extra)\r\n                 :errors? (j/get parse-result :errors)\r\n                 :duplicates? (j/get parse-result :duplicates)\r\n                 :text (j/get parse-result :text)\r\n                 :type type}))\r\n\r\n(defn- term-intersection [{t1 :terms, x1 :extra} {t2 :terms, x2 :extra}]\r\n  (if (or (empty? t1) (empty? t2))\r\n    #{}\r\n    (disj\r\n     (let [[t1 t2] (sort-by count [t1 t2])]\r\n       (into #{}\r\n             (filter (partial contains? (set t2)))\r\n             t1))\r\n     x1 x2)))\r\n\r\n(defn- handle-terms-fn [type !this-state !other-state !duped-terms]\r\n  (fn [js-result]\r\n    (let [new-parse (parse-result->clj js-result type)]\r\n      (swap! !this-state assoc :parse new-parse)\r\n      (reset! !duped-terms (term-intersection new-parse (:parse @!other-state))))))\r\n\r\n\r\n(defn expression-field [{:keys [marked-var on-parse class initial-doc placeholder issues]}]\r\n  [:> ExpressionField {:class (classes :editor-field :expression-field class)\r\n                       :onParse on-parse\r\n                       :showErrors (contains? issues :errors)\r\n                       :markedVariable marked-var\r\n                       :placeholder placeholder\r\n                       :initialDoc initial-doc}])\r\n\r\n(defn terms-field [{:keys [class on-parse issues duped-terms allow-empty initial-doc placeholder]\r\n                    :or {allow-empty false}}]\r\n  [:> TermsField {:class (classes :editor-field :terms-field class)\r\n                  :onParse on-parse\r\n                  :showErrors (contains? issues :errors)\r\n                  :duplicatedTerms (echol (str placeholder \" dups: \") duped-terms)\r\n                  :placeholder placeholder\r\n                  :initialDoc initial-doc\r\n                  :allowEmpty allow-empty}])\r\n\r\n(defn variable [var marked?]\r\n  [button-base {:class (classes :input-variable :chip-like (when marked? \"selected\"))\r\n                :on-click (fn []\r\n                            (toggle! !marked-var [var true]))\r\n                :on-mouse-enter (fn []\r\n                                  (swap! !marked-var #(if (second %) % [var false])))\r\n                :on-mouse-leave (fn []\r\n                                  (swap! !marked-var #(if (second %) % [nil false])))}\r\n   [$ (format-latex-var var)]])\r\n\r\n(defn term [t]\r\n  [:div.term (j/call t :toString)])\r\n\r\n(defn variables-section [vars mvar]\r\n  [:div.variables-section\r\n   [typography {:variant \"body1\"\r\n                :class \"title\"}\r\n    (str \"Variables (\" (count vars) \")\")]\r\n   (into [:div.variables-container]\r\n         (map (fn [v] [variable v (= v mvar)]))\r\n         vars)])\r\n\r\n(defn terms-section [title terms]\r\n  (when (seq terms)\r\n    [:div.terms-section\r\n     [typography {:variant \"body1\"\r\n                  :class \"title\"}\r\n      (str title \" (\" (count terms) \")\")]\r\n     (into [:div.terms-container]\r\n           (map (fn [t] [:div.term {:key t} t]))\r\n           terms)]))\r\n\r\n(defn expression-section [expr]\r\n  [:div.expression-section\r\n   [typography {:variant \"body1\"\r\n                :class \"title\"}\r\n    \"Parsed Expression\"]\r\n   [expression {:class (classes :typeset-expression)\r\n                :expandable true}\r\n    (echol :expr expr)]])\r\n\r\n(defn expression-input [{:keys [class]}]\r\n  (r/with-let [handle-parse (fn [js-result]\r\n                              (swap! !expression-field-state assoc\r\n                                     :parse (parse-result->clj\r\n                                             (echol :js-result js-result)\r\n                                             :expression)))\r\n               handle-click-away #(reset! !marked-var [nil false])\r\n               default-text (get-in @!expression-field-state [:parse :text])\r\n               !last-valid-expr (atom nil)]\r\n    (let [marked-var @(r/track! first @!marked-var)\r\n          {issues :issues\r\n           {:keys [vars tree errors?] :as porse} :parse} @!expression-field-state]\r\n      [click-away-listener {:on-click-away handle-click-away}\r\n       [:div {:class (classes :expression-input class)}\r\n        [expression-field {:marked-var marked-var\r\n                           :on-parse handle-parse\r\n                           :issues issues\r\n                           :initial-doc (echol \"default-text\" default-text)}]\r\n        [expression-section (do\r\n                              (echol porse)\r\n                              (if errors?\r\n                                @!last-valid-expr\r\n                                (reset! !last-valid-expr tree)))]\r\n        [variables-section vars marked-var]]])))\r\n\r\n(defn- minterms-input [{:keys [class]}]\r\n  (with-let [default-text (get-in @!minterms-field-state [:parse :text])\r\n             handle-minterms-parse (handle-terms-fn :minterms\r\n                                                    !minterms-field-state\r\n                                                    !u-minterms-field-state\r\n                                                    !duped-minterms)\r\n             default-u-text (get-in @!u-minterms-field-state [:parse :text])\r\n             handle-u-minterms-parse (handle-terms-fn :unspecified\r\n                                                      !u-minterms-field-state\r\n                                                      !minterms-field-state\r\n                                                      !duped-minterms)]\r\n    (let [duped-minterms @(r/track clj->js @!duped-minterms)\r\n          {issues :issues\r\n           {terms :terms} :parse} @!minterms-field-state\r\n          {u-issues :issues\r\n           {u-terms :terms} :parse} @!u-minterms-field-state]\r\n      [:div {:class (classes :minterms-input class)}\r\n       [terms-field {:class \"required\"\r\n                     :duped-terms duped-minterms\r\n                     :placeholder \"Minterms...\"\r\n                     :on-parse handle-minterms-parse\r\n                     :issues issues\r\n                     :initial-doc default-text}]\r\n       [terms-field {:class \"unspecified\"\r\n                     :placeholder \"Unspecified terms...\"\r\n                     :duped-terms duped-minterms\r\n                     :issues u-issues\r\n                     :on-parse handle-u-minterms-parse\r\n                     :initial-doc default-u-text\r\n                     :allow-empty true}]\r\n       [terms-section \"Minterms\" terms]\r\n       [terms-section \"Unspecified\" u-terms]\r\n       [minterms-expression {:minterms terms\r\n                             :unspecified u-terms}]])))\r\n\r\n(defn- maxterms-input [{:keys [class]}]\r\n  (with-let [default-text (get-in @!maxterms-field-state [:parse :text])\r\n             handle-maxterms-parse (handle-terms-fn :maxterms\r\n                                                    !maxterms-field-state\r\n                                                    !u-maxterms-field-state\r\n                                                    !duped-maxterms)\r\n             default-u-text (get-in @!u-maxterms-field-state [:parse :text])\r\n             handle-u-maxterms-parse (handle-terms-fn :unspecified\r\n                                                      !u-maxterms-field-state\r\n                                                      !maxterms-field-state\r\n                                                      !duped-maxterms)]\r\n    (let [duped-maxterms @(r/track clj->js @!duped-maxterms)\r\n          {issues :issues\r\n           {terms :terms} :parse} @!maxterms-field-state\r\n          {u-issues :issues\r\n           {u-terms :terms} :parse} @!u-maxterms-field-state]\r\n      [:div {:class (classes :maxterms-input class)}\r\n       [terms-field {:class \"required\"\r\n                     :duped-terms duped-maxterms\r\n                     :placeholder \"Maxterms...\"\r\n                     :on-parse handle-maxterms-parse\r\n                     :issues issues\r\n                     :initial-doc default-text}]\r\n       [terms-field {:class \"unspecified\"\r\n                     :placeholder \"Unspecified terms...\"\r\n                     :duped-terms duped-maxterms\r\n                     :issues u-issues\r\n                     :on-parse handle-u-maxterms-parse\r\n                     :initial-doc default-u-text\r\n                     :allow-empty true}]\r\n       [terms-section \"Minterms\" terms]\r\n       [terms-section \"Unspecified\" u-terms]\r\n       [maxterms-expression (echo :ppop {:maxterms terms\r\n                                         :unspecified u-terms})]])))\r\n\r\n(defn update-issues! [!state]\r\n  (swap! !state #(assoc % :issues\r\n                          (let [{:keys [errors? duplicates?]} (get % :parse)]\r\n                            (into #{}\r\n                                  (remove nil?)\r\n                                  [(when errors? :errors) (when duplicates? :duplicates)])))))\r\n\r\n(defn input-card [{:keys [on-success on-failure on-submit]}]\r\n  \"on-success/on-failure should have signature [{:keys [type text vars tree errors?]}]\"\r\n  (r/with-let [submit (fn []\r\n                        (on-submit)\r\n                        (let-case [input-type @!input-type]\r\n                          \"expression\" (let [{:keys [issues parse]}\r\n                                             (update-issues! !expression-field-state)]\r\n                                         (echol parse)\r\n                                         ((if-not (empty? issues)\r\n                                            on-failure\r\n                                            on-success) parse))\r\n                          (\"minterms\"\r\n                           \"maxterms\") (let [{issues :issues\r\n                                              parse :parse} (update-issues! (state-atoms input-type))\r\n                                             {u-issues :issues\r\n                                              u-parse :parse} (update-issues! (u-state-atoms input-type))]\r\n                                         ((if-not (and (empty? issues) (empty? u-issues))\r\n                                            on-failure\r\n                                            on-success) (update (merge-with vector parse u-parse)\r\n                                                          :type first)))))]\r\n    [card {:class (classes :input-card)}\r\n     [card-content {:class (classes :card-content :vertical-grid)}\r\n      [typography {:variant \"h5\"}\r\n       \"Enter Function\"]\r\n      [form-control {:component \"fieldset\"}\r\n       [form-label {:class \"specification-label\"\r\n                    :component \"legend\"} \"Specify by\"]\r\n       [radio-group {:row true\r\n                     :value @!input-type\r\n                     :on-change #(reset! !input-type (event-value %))}\r\n        [form-control-label {:value \"expression\"\r\n                             :label \"Expression\"\r\n                             :control (r/as-element [radio])}]\r\n        [form-control-label {:value \"minterms\"\r\n                             :label \"Minterms\"\r\n                             :control (r/as-element [radio])}]\r\n        [form-control-label {:value \"maxterms\"\r\n                             :label \"Maxterms\"\r\n                             :control (r/as-element [radio])}]]]\r\n      [switch-transition\r\n       (case @!input-type\r\n         \"minterms\" [fade {:key \"minterms\"}\r\n                     [:div.fade-wrapper\r\n                      [minterms-input]]]\r\n         \"maxterms\" [fade {:key \"maxterms\"}\r\n                     [:div.fade-wrapper\r\n                      [maxterms-input]]]\r\n         \"expression\" [fade {:key \"expression\"}\r\n                       [:div.fade-wrapper\r\n                        [expression-input]]])]\r\n      [:div.buttons\r\n       [button {:class \"go-button\"\r\n                :variant \"outlined\"\r\n                :disable-elevation true\r\n                :color \"primary\"\r\n                :on-click submit\r\n                :size \"large\"}\r\n        \"Convert\"]]]]))\r\n"]}