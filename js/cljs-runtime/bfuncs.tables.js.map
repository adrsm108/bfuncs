{"version":3,"sources":["bfuncs/tables.cljs"],"mappings":"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","names":["p__68284","map__68285","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","bfuncs.tables/appearing-linear-progress","timeout","fade-props","progress-props","with-let68292","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__27840__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init68293","res__27841__auto__","destroy__27839__auto__","reagent.ratom/reactive?","visible","reagent.core.atom","timeout-id","js/setTimeout","cljs.core/reset!","reagent-material-ui.core.fade/fade","cljs.core/deref","reagent.core.merge_props","reagent-material-ui.core.linear-progress/linear-progress","js/clearTimeout","p__68316","map__68317","bfuncs.tables/row-group","group-name","data","buttons","reagent.core.class_names","bfuncs.style/!vclasses","reagent-material-ui.core.typography/typography","bfuncs.transitions/switch-transition","cljs.core/empty?","bfuncs.transitions/css-transition","reagent-material-ui.core.container/container","reagent-material-ui.core.collapse/collapse","G__68326","cljs.core.into","reagent-material-ui.core.list/list","cljs.core.map","expr","bfuncs.typesetting/expression","reagent-material-ui.core.list-item/list-item","cljs.core.conj","p__68335","map__68336","bfuncs.tables/expressions-table-rows","label","chunk-size","with-let68342","init68343","!rows-visible","row-count","cljs.core/count","rows-visible","cljs.core.take","change-rows-fn","x","op!","cljs.core/fn?","cljs.core/swap!","goog.functions/debounce","hidden-count","extra-visible?","all-visible?","show-more!","p1__68332#","x__4217__auto__","y__4218__auto__","show-fewer!","p1__68333#","x__4214__auto__","y__4215__auto__","show-all!","show-none!","reagent-material-ui.core.icon-button/icon-button","reagent-material-ui.icons.last-page-outlined/last-page-outlined","reagent-material-ui.core.button-base/button-base","reagent-material-ui.core.link/link","reagent-material-ui.icons.expand-more-outlined/expand-more-outlined","reagent-material-ui.icons.expand-less-outlined/expand-less-outlined","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","bfuncs.tables/expressions-table","p__68376","map__68377","seq68367","G__68368","cljs.core/first","cljs.core/next","self__4723__auto__","children","reagent-material-ui.core.table-container/table-container","p__68398","map__68403","bfuncs.tables/truth-table","vars","tt","bfuncs.minimization/truth-table","reagent-material-ui.core.table/table","reagent-material-ui.core.table-head/table-head","reagent-material-ui.core.table-row/table-row","cljs.core.doall","cljs.core/seq","iter__4529__auto__","s__68415","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__68417","cljs.core/chunk-buffer","i__68416","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__68414","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","v","reagent-material-ui.core.table-cell/table-cell","reagent-material-ui.core.table-body/table-body","iter__27573__auto__","s__68434","i__68435","c__68438","size__27572__auto__","b__68437","j__68436","cljs.core.nth","iter__68433","i","row","cljs.core/peek","cljs.core.map_indexed","j","cljs.core/chunk-first"],"sourcesContent":["(ns bfuncs.tables\r\n  (:require\r\n   [bfuncs.typesetting :refer [expression $]]\r\n   [bfuncs.style :refer [classes]]\r\n   [bfuncs.transitions :refer [switch-transition transition-group css-transition]]\r\n   [bfuncs.utils :refer\r\n    [echo map-vals map-reduce event-value\r\n     event-checked for' fori fori' mp\r\n     conj-when log fn-> let-case exec timed-fn get-meta]]\r\n   [bfuncs.minimization :as bmin]\r\n   [cljs.core.async :refer [<!] :refer-macros [go]]\r\n   [clojure.set :refer [subset?]]\r\n   [goog.functions :as gfunc]\r\n   [reagent-material-ui.core.button :refer [button]]\r\n   [reagent-material-ui.core.button-base :refer [button-base]]\r\n   [reagent-material-ui.core.container :refer [container]]\r\n   [reagent-material-ui.core.fade :refer [fade]]\r\n   [reagent-material-ui.core.hidden :refer [hidden]]\r\n   [reagent-material-ui.core.icon-button :refer [icon-button]]\r\n   [reagent-material-ui.core.linear-progress :refer [linear-progress]]\r\n   [reagent-material-ui.core.link :refer [link]]\r\n   [reagent-material-ui.core.table :refer [table]]\r\n   [reagent-material-ui.core.table-body :refer [table-body]]\r\n   [reagent-material-ui.core.table-cell :refer [table-cell]]\r\n   [reagent-material-ui.core.table-container :refer [table-container]]\r\n   [reagent-material-ui.core.table-footer :refer [table-footer]]\r\n   [reagent-material-ui.core.table-head :refer [table-head]]\r\n   [reagent-material-ui.core.table-pagination :refer [table-pagination]]\r\n   [reagent-material-ui.core.table-row :refer [table-row]]\r\n   [reagent-material-ui.core.typography :refer [typography]]\r\n   [reagent-material-ui.icons.expand-less-outlined :refer [expand-less-outlined]]\r\n   [reagent-material-ui.icons.expand-more-outlined :refer [expand-more-outlined]]\r\n   [reagent-material-ui.icons.last-page-outlined :refer [last-page-outlined]]\r\n   [reagent-material-ui.core.collapse :refer [collapse]]\r\n   [reagent-material-ui.core.list :refer [list]]\r\n   [\"@material-ui/core/List\" :default MuiList]\r\n   [\"@material-ui/core/styles/transitions\" :refer [duration]]\r\n   [\"react-transition-group\" :refer [CSSTransition]]\r\n   [reagent-material-ui.core.list-item :refer [list-item]]\r\n   [reagent.core :as r :refer-macros [with-let]]\r\n   [applied-science.js-interop :as j]))\r\n\r\n\r\n(defn- appearing-linear-progress\r\n  [{:keys [timeout fade-props progress-props] :or {timeout 1000}}]\r\n  (with-let [visible (r/atom false)\r\n             timeout-id (js/setTimeout\r\n                         #(reset! visible true)\r\n                         timeout)]\r\n    [fade (r/merge-props fade-props {:in @visible})\r\n     [linear-progress progress-props]]\r\n    (finally (js/clearTimeout timeout-id))))\r\n\r\n(defn- row-group [{:keys [group-name data]} buttons]\r\n  [:div {:class (classes :expressions-group)}\r\n   [typography {:variant \"subtitle1\"\r\n                :class \"group-label\"}\r\n    group-name]\r\n   [:div {:class \"content\"}\r\n    [switch-transition\r\n     (if (empty? data)\r\n       [css-transition {:key \"progress\"\r\n                        :timeout 300\r\n                        :appear true}\r\n        [container {:max-width \"sm\"\r\n                    :class \"progress-container\"}\r\n         [linear-progress {:class \"progress-bar\"}]]]\r\n       [collapse {:key \"expressions\"\r\n                  :class (classes :fade-collapse)}\r\n        (cond-> (into [list {:class (classes \"expressions\"\r\n                                             (if buttons \"with-buttons\" \"without-buttons\"))}]\r\n                      (map (fn [expr]\r\n                             [expression {:expandable true\r\n                                          :wrapper-props {:component list-item\r\n                                                          :disable-gutters true\r\n                                                          :divider true}}\r\n                              expr]))\r\n                      data)\r\n          buttons (conj buttons))])]]])\r\n\r\n\r\n(defn expressions-table-rows [{:keys [data label chunk-size]\r\n                               :or {chunk-size 4}}]\r\n  (with-let [!rows-visible (r/atom chunk-size)]\r\n    (let [row-count (count data)\r\n          rows-visible @!rows-visible]\r\n      [row-group {:group-name label\r\n                  :data (take rows-visible data)}\r\n       (when (> row-count chunk-size)\r\n         (let [change-rows-fn (fn [x]\r\n                                (let [op! (if (fn? x) swap! reset!)]\r\n                                  (gfunc/debounce\r\n                                   #(op! !rows-visible x)\r\n                                   350)))\r\n               hidden-count (- row-count rows-visible)\r\n               extra-visible? (> rows-visible chunk-size)\r\n               all-visible? (<= hidden-count 0)\r\n               show-more! (change-rows-fn #(min row-count (+ % chunk-size)))\r\n               show-fewer! (change-rows-fn #(max chunk-size (- % chunk-size)))\r\n               show-all! (change-rows-fn row-count)\r\n               show-none! (change-rows-fn chunk-size)]\r\n           [:li {:class (classes :expressions-table-button-group\r\n                                 (when all-visible? \"all-visible\")\r\n                                 (when extra-visible? \"extra-visible\"))}\r\n            [icon-button {:class \"all\"\r\n                          :size \"small\"\r\n                          :disabled all-visible?\r\n                          :title \"Show all results\"\r\n                          :on-click show-all!}\r\n             [last-page-outlined {:style {:transform \"rotate(90deg)\"}}]]\r\n            [icon-button {:class \"none\"\r\n                          :size \"small\"\r\n                          :disabled (not extra-visible?)\r\n                          :title \"Hide most results\"\r\n                          :on-click show-none!}\r\n             [last-page-outlined {:style {:transform \"rotate(-90deg)\"}}]]\r\n            [button-base {:component \"div\"\r\n                          :class \"spacer\"\r\n                          :tab-index -1\r\n                          :role \"none\"\r\n                          :disabled all-visible?\r\n                          :title \"Show more results\"\r\n                          :aria-hidden true\r\n                          :on-click show-more!}\r\n             (when-not all-visible?\r\n               [link {:component \"span\"\r\n                      :class \"label\"\r\n                      :color \"textSecondary\"}\r\n                (str hidden-count \" more...\")])]\r\n            [icon-button {:class \"more\"\r\n                          :size \"small\"\r\n                          :disabled all-visible?\r\n                          :title \"Show more results\"\r\n                          :on-click show-more!}\r\n             [expand-more-outlined]]\r\n            [icon-button {:class \"less\"\r\n                          :size \"small\"\r\n                          :disabled (not extra-visible?)\r\n                          :title \"Show fewer results\"\r\n                          :on-click show-fewer!}\r\n             [expand-less-outlined]]]))])))\r\n\r\n#_[button-base {:class \"spacer\"\r\n                :title \"Show more results\"\r\n                :on-click (gfunc/debounce\r\n                           (fn []\r\n                             (swap! rows-visible\r\n                                    #(min row-count (+ % chunk-size))))\r\n                           200)}\r\n   [link {:class \"more\"\r\n          :component \"span\"\r\n          :color \"textSecondary\"}\r\n    (str diff \" more...\")]]\r\n\r\n(defn expressions-table [{:keys []} & children]\r\n  [table-container {:class (classes :expressions-table)}\r\n   (into [:div.table]\r\n         children)])\r\n\r\n(defn truth-table\r\n  [{:keys [expr vars]}]\r\n  (when (and (some? expr)\r\n             (some? vars))\r\n    (if (> (count vars) 6)\r\n      [typography\r\n       \"Truth table with more than 64 rows suppressed.\"]\r\n      (let [tt (bmin/truth-table expr vars)]\r\n        [table-container {:class (classes :truth-table)}\r\n         [table {:size \"small\"\r\n                 :sticky-header true}\r\n          [table-head\r\n           [table-row\r\n            (for' [v vars]\r\n              [table-cell {:key v}\r\n               [expression {:class (classes :typeset-expression)}\r\n                v]])\r\n            [table-cell\r\n             [expression {:class (classes :typeset-expression)}\r\n              expr]]]]\r\n          [table-body\r\n           (fori' [i :index\r\n                   row tt]\r\n             [table-row {:key i,\r\n                         :class (if (peek row) \"true\" \"false\")}\r\n              (map-indexed\r\n               (fn [j x]\r\n                 [table-cell {:key j} (if x \"1\" \"0\")])\r\n               row)])]]]))))\r\n\r\n\r\n"]}