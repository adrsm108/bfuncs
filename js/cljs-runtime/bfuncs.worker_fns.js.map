{"version":3,"sources":["bfuncs/worker_fns.cljs"],"mappings":";AAMA,AAAA,AAAKA;AAEL,AAAA,AAAMC;AAAN,AACE,AAAMC,AAAG,AAAK,AAACC;AACTC,AAAO,AAAAC,AAAM,AAAAK,AAAA;AAAN,AAAA,AAAAJ,AAAAD;AAAAE,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAC,AAAAD,AAEI,AAAA,AAAA,AAAA,AAEeJ;;AAJnB,AAAAM,AAAAH;AAAA,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAA,AAGW;AAHX,AAAA,AAAAC,AAAA,AAKuBP;;AALvBO;AAAAJ;;AADb,AAOE,AAAAC,AAAQN;AAARO,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAC,AAAAD,AAA2BF;;AAC3BA;;AAEJ,AAAA,AAAMO,AAAuBC;AAA7B,AACE,AAAMC,AAAe,AAACC,AAAKF;AAA3B,AACE,AAAAG,AAAYH;AAAZ,AAAA,AAAA,AAAUI;;AAAV,AAAA,AAAA,AAAAD,AAAUC;AAAV,AAAe,AAACC,AAAKJ,AAAe,AAACZ;;AAArC,AAAA,AAAA,AAAUe;;;;AAAV;;;;AACAH;;AAEJ,AAAA,AAAwBK;;AAAxB,AACE,AAAAC,AAAmB,AAAAb,AAAQN;AAARO,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAC,AAAAD;;AAAnB,AAAA,AAAA,AAAAa,AAAA;AAAA;;AAAA,AAAAA,AAAYf;AAAZ,AACE,AAAAE,AAAQF;AAARG,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAC,AAAAD;;AACA","names":["bfuncs.worker-fns/worker-array","bfuncs.worker-fns/create-worker","id","cljs.core/random-uuid","worker","G__67860","obj__27297__auto__","f__27298__auto__","obj67862","obj67863","js/Worker","bfuncs.worker-fns/create-worker-channel","n","worker-channel","cljs.core.async.chan","n__4613__auto__","_","cljs.core.async.put_BANG_","bfuncs.worker-fns/destroy-workers!","temp__5739__auto__"],"sourcesContent":["(ns bfuncs.worker-fns\r\n  (:require ;[bfuncs.utils :refer [echo echol]]\r\n   [cljs.core.async :refer [chan put!]]\r\n   [applied-science.js-interop :as j])\r\n  (:require-macros [bfuncs.worker-fns]))\r\n\r\n(def worker-array #js[])\r\n\r\n(defn create-worker []\r\n  (let [id (str (random-uuid))\r\n        worker (doto (js/Worker. \"/js/worker.js\")\r\n                 (j/call :postMessage\r\n                   (j/lit {:task \"assign-id\"\r\n                           :task-id 0\r\n                           :args [id]}))\r\n                 (j/assoc! :worker-id id))]\r\n    (j/call worker-array :push worker)\r\n    worker))\r\n\r\n(defn create-worker-channel [n]\r\n  (let [worker-channel (chan n)]\r\n    (dotimes [_ n] (put! worker-channel (create-worker)))\r\n    worker-channel))\r\n\r\n(defn ^:dev/before-load destroy-workers! []\r\n  (when-some [worker (j/call worker-array :pop)]\r\n    (j/call worker :terminate)\r\n    (recur)))\r\n\r\n"]}