{
"version":3,
"file":"module$node_modules$$codemirror$text$dist$index_cjs.js",
"lineCount":23,
"mappings":"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",
"sources":["node_modules/@codemirror/text/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$codemirror$text$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// Compressed representation of the Grapheme_Cluster_Break=Extend\n// information from\n// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.\n// Each pair of elements represents a range, as an offet from the\n// previous range and a length. Numbers are in base-36, with the empty\n// string being a shorthand for 1.\nlet extend = \"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o\".split(\",\").map(s => s ? parseInt(s, 36) : 1);\n// Convert offsets into absolute values\nfor (let i = 1; i < extend.length; i++)\n    extend[i] += extend[i - 1];\nfunction isExtendingChar(code) {\n    for (let i = 1; i < extend.length; i += 2)\n        if (extend[i] > code)\n            return extend[i - 1] <= code;\n    return false;\n}\nfunction isRegionalIndicator(code) {\n    return code >= 0x1F1E6 && code <= 0x1F1FF;\n}\nconst ZWJ = 0x200d;\n/// Returns a next grapheme cluster break _after_ (not equal to)\n/// `pos`, if `forward` is true, or before otherwise. Returns `pos`\n/// itself if no further cluster break is available in the string.\n/// Moves across surrogate pairs, extending characters, characters\n/// joined with zero-width joiners, and flag emoji.\nfunction findClusterBreak(str, pos, forward = true) {\n    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos);\n}\nfunction nextClusterBreak(str, pos) {\n    if (pos == str.length)\n        return pos;\n    // If pos is in the middle of a surrogate pair, move to its start\n    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))\n        pos--;\n    let prev = codePointAt(str, pos);\n    pos += codePointSize(prev);\n    while (pos < str.length) {\n        let next = codePointAt(str, pos);\n        if (prev == ZWJ || next == ZWJ || isExtendingChar(next)) {\n            pos += codePointSize(next);\n            prev = next;\n        }\n        else if (isRegionalIndicator(next)) {\n            let countBefore = 0, i = pos - 2;\n            while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {\n                countBefore++;\n                i -= 2;\n            }\n            if (countBefore % 2 == 0)\n                break;\n            else\n                pos += 2;\n        }\n        else {\n            break;\n        }\n    }\n    return pos;\n}\nfunction prevClusterBreak(str, pos) {\n    while (pos > 0) {\n        let found = nextClusterBreak(str, pos - 2);\n        if (found < pos)\n            return found;\n        pos--;\n    }\n    return 0;\n}\nfunction surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }\nfunction surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }\n/// Find the code point at the given position in a string (like the\n/// [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\n/// string method).\nfunction codePointAt(str, pos) {\n    let code0 = str.charCodeAt(pos);\n    if (!surrogateHigh(code0) || pos + 1 == str.length)\n        return code0;\n    let code1 = str.charCodeAt(pos + 1);\n    if (!surrogateLow(code1))\n        return code0;\n    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;\n}\n/// Given a Unicode codepoint, return the JavaScript string that\n/// respresents it (like\n/// [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).\nfunction fromCodePoint(code) {\n    if (code <= 0xffff)\n        return String.fromCharCode(code);\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);\n}\n/// The first character that takes up two positions in a JavaScript\n/// string. It is often useful to compare with this after calling\n/// `codePointAt`, to figure out whether your character takes up 1 or\n/// 2 index positions.\nfunction codePointSize(code) { return code < 0x10000 ? 1 : 2; }\n\n/// Count the column position at the given offset into the string,\n/// taking extending characters and tab size into account.\nfunction countColumn(string, n, tabSize) {\n    for (let i = 0; i < string.length;) {\n        if (string.charCodeAt(i) == 9) {\n            n += tabSize - (n % tabSize);\n            i++;\n        }\n        else {\n            n++;\n            i = findClusterBreak(string, i);\n        }\n    }\n    return n;\n}\n/// Find the offset that corresponds to the given column position in a\n/// string, taking extending characters and tab size into account.\nfunction findColumn(string, n, col, tabSize) {\n    for (let i = 0; i < string.length;) {\n        if (n >= col)\n            return { offset: i, leftOver: 0 };\n        n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;\n        i = findClusterBreak(string, i);\n    }\n    return { offset: string.length, leftOver: col - n };\n}\n\n/// The data structure for documents.\nclass Text {\n    /// @internal\n    constructor() { }\n    /// Get the line description around the given position.\n    lineAt(pos) {\n        if (pos < 0 || pos > this.length)\n            throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);\n        return this.lineInner(pos, false, 1, 0);\n    }\n    /// Get the description for the given (1-based) line number.\n    line(n) {\n        if (n < 1 || n > this.lines)\n            throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);\n        return this.lineInner(n, true, 1, 0);\n    }\n    /// Replace a range of the text with the given content.\n    replace(from, to, text) {\n        let parts = [];\n        this.decompose(0, from, parts, 2 /* To */);\n        if (text.length)\n            text.decompose(0, text.length, parts, 1 /* From */ | 2 /* To */);\n        this.decompose(to, this.length, parts, 1 /* From */);\n        return TextNode.from(parts, this.length - (to - from) + text.length);\n    }\n    /// Append another document to this one.\n    append(other) {\n        return this.replace(this.length, this.length, other);\n    }\n    /// Retrieve the text between the given points.\n    slice(from, to = this.length) {\n        let parts = [];\n        this.decompose(from, to, parts, 0);\n        return TextNode.from(parts, to - from);\n    }\n    /// Test whether this text is equal to another instance.\n    eq(other) {\n        if (other == this)\n            return true;\n        if (other.length != this.length || other.lines != this.lines)\n            return false;\n        let a = new RawTextCursor(this), b = new RawTextCursor(other);\n        for (;;) {\n            a.next();\n            b.next();\n            if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)\n                return false;\n            if (a.done)\n                return true;\n        }\n    }\n    /// Iterate over the text. When `dir` is `-1`, iteration happens\n    /// from end to start. This will return lines and the breaks between\n    /// them as separate strings, and for long lines, might split lines\n    /// themselves into multiple chunks as well.\n    iter(dir = 1) { return new RawTextCursor(this, dir); }\n    /// Iterate over a range of the text. When `from` > `to`, the\n    /// iterator will run in reverse.\n    iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }\n    /// @internal\n    toString() { return this.sliceString(0); }\n    /// Convert the document to an array of lines (which can be\n    /// deserialized again via [`Text.of`](#text.Text^of)).\n    toJSON() {\n        let lines = [];\n        this.flatten(lines);\n        return lines;\n    }\n    /// Create a `Text` instance for the given array of lines.\n    static of(text) {\n        if (text.length == 0)\n            throw new RangeError(\"A document must have at least one line\");\n        if (text.length == 1 && !text[0])\n            return Text.empty;\n        return text.length <= 32 /* Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));\n    }\n}\nif (typeof Symbol != \"undefined\")\n    Text.prototype[Symbol.iterator] = function () { return this.iter(); };\n// Leaves store an array of line strings. There are always line breaks\n// between these strings. Leaves are limited in size and have to be\n// contained in TextNode instances for bigger documents.\nclass TextLeaf extends Text {\n    constructor(text, length = textLength(text)) {\n        super();\n        this.text = text;\n        this.length = length;\n    }\n    get lines() { return this.text.length; }\n    get children() { return null; }\n    lineInner(target, isLine, line, offset) {\n        for (let i = 0;; i++) {\n            let string = this.text[i], end = offset + string.length;\n            if ((isLine ? line : end) >= target)\n                return new Line(offset, end, line, string);\n            offset = end + 1;\n            line++;\n        }\n    }\n    decompose(from, to, target, open) {\n        let text = from <= 0 && to >= this.length ? this\n            : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));\n        if (open & 1 /* From */) {\n            let prev = target.pop();\n            let joined = appendText(text.text, prev.text.slice(), 0, text.length);\n            if (joined.length <= 32 /* Branch */) {\n                target.push(new TextLeaf(joined, prev.length + text.length));\n            }\n            else {\n                let mid = joined.length >> 1;\n                target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));\n            }\n        }\n        else {\n            target.push(text);\n        }\n    }\n    replace(from, to, text) {\n        if (!(text instanceof TextLeaf))\n            return super.replace(from, to, text);\n        let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);\n        let newLen = this.length + text.length - (to - from);\n        if (lines.length <= 32 /* Branch */)\n            return new TextLeaf(lines, newLen);\n        return TextNode.from(TextLeaf.split(lines, []), newLen);\n    }\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\n        let result = \"\";\n        for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {\n            let line = this.text[i], end = pos + line.length;\n            if (pos > from && i)\n                result += lineSep;\n            if (from < end && to > pos)\n                result += line.slice(Math.max(0, from - pos), to - pos);\n            pos = end + 1;\n        }\n        return result;\n    }\n    flatten(target) {\n        for (let line of this.text)\n            target.push(line);\n    }\n    static split(text, target) {\n        let part = [], len = -1;\n        for (let line of text) {\n            part.push(line);\n            len += line.length + 1;\n            if (part.length == 32 /* Branch */) {\n                target.push(new TextLeaf(part, len));\n                part = [];\n                len = -1;\n            }\n        }\n        if (len > -1)\n            target.push(new TextLeaf(part, len));\n        return target;\n    }\n}\n// Nodes provide the tree structure of the `Text` type. They store a\n// number of other nodes or leaves, taking care to balance themselves\n// on changes. There are implied line breaks _between_ the children of\n// a node (but not before the first or after the last child).\nclass TextNode extends Text {\n    constructor(children, length) {\n        super();\n        this.children = children;\n        this.length = length;\n        this.lines = 0;\n        for (let child of children)\n            this.lines += child.lines;\n    }\n    lineInner(target, isLine, line, offset) {\n        for (let i = 0;; i++) {\n            let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;\n            if ((isLine ? endLine : end) >= target)\n                return child.lineInner(target, isLine, line, offset);\n            offset = end + 1;\n            line = endLine + 1;\n        }\n    }\n    decompose(from, to, target, open) {\n        for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (from <= end && to >= pos) {\n                let childOpen = open & ((pos <= from ? 1 /* From */ : 0) | (end >= to ? 2 /* To */ : 0));\n                if (pos >= from && end <= to && !childOpen)\n                    target.push(child);\n                else\n                    child.decompose(from - pos, to - pos, target, childOpen);\n            }\n            pos = end + 1;\n        }\n    }\n    replace(from, to, text) {\n        if (text.lines < this.lines)\n            for (let i = 0, pos = 0; i < this.children.length; i++) {\n                let child = this.children[i], end = pos + child.length;\n                // Fast path: if the change only affects one child and the\n                // child's size remains in the acceptable range, only update\n                // that child\n                if (from >= pos && to <= end) {\n                    let updated = child.replace(from - pos, to - pos, text);\n                    let totalLines = this.lines - child.lines + updated.lines;\n                    if (updated.lines < (totalLines >> (5 /* BranchShift */ - 1)) &&\n                        updated.lines > (totalLines >> (5 /* BranchShift */ + 1))) {\n                        let copy = this.children.slice();\n                        copy[i] = updated;\n                        return new TextNode(copy, this.length - (to - from) + text.length);\n                    }\n                    return super.replace(pos, end, updated);\n                }\n                pos = end + 1;\n            }\n        return super.replace(from, to, text);\n    }\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\n        let result = \"\";\n        for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (pos > from && i)\n                result += lineSep;\n            if (from < end && to > pos)\n                result += child.sliceString(from - pos, to - pos, lineSep);\n            pos = end + 1;\n        }\n        return result;\n    }\n    flatten(target) {\n        for (let child of this.children)\n            child.flatten(target);\n    }\n    static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {\n        let lines = 0;\n        for (let ch of children)\n            lines += ch.lines;\n        if (lines < 32 /* Branch */) {\n            let flat = [];\n            for (let ch of children)\n                ch.flatten(flat);\n            return new TextLeaf(flat, length);\n        }\n        let chunk = Math.max(32 /* Branch */, lines >> 5 /* BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;\n        let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];\n        function add(child) {\n            let last;\n            if (child.lines > maxChunk && child instanceof TextNode) {\n                for (let node of child.children)\n                    add(node);\n            }\n            else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {\n                flush();\n                chunked.push(child);\n            }\n            else if (child instanceof TextLeaf && currentLines &&\n                (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&\n                child.lines + last.lines <= 32 /* Branch */) {\n                currentLines += child.lines;\n                currentLen += child.length + 1;\n                currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);\n            }\n            else {\n                if (currentLines + child.lines > chunk)\n                    flush();\n                currentLines += child.lines;\n                currentLen += child.length + 1;\n                currentChunk.push(child);\n            }\n        }\n        function flush() {\n            if (currentLines == 0)\n                return;\n            chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));\n            currentLen = -1;\n            currentLines = currentChunk.length = 0;\n        }\n        for (let child of children)\n            add(child);\n        flush();\n        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);\n    }\n}\nText.empty = new TextLeaf([\"\"], 0);\nfunction textLength(text) {\n    let length = -1;\n    for (let line of text)\n        length += line.length + 1;\n    return length;\n}\nfunction appendText(text, target, from = 0, to = 1e9) {\n    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {\n        let line = text[i], end = pos + line.length;\n        if (end >= from) {\n            if (end > to)\n                line = line.slice(0, to - pos);\n            if (pos < from)\n                line = line.slice(from - pos);\n            if (first) {\n                target[target.length - 1] += line;\n                first = false;\n            }\n            else\n                target.push(line);\n        }\n        pos = end + 1;\n    }\n    return target;\n}\nfunction sliceText(text, from, to) {\n    return appendText(text, [\"\"], from, to);\n}\nclass RawTextCursor {\n    constructor(text, dir = 1) {\n        this.dir = dir;\n        this.done = false;\n        this.lineBreak = false;\n        this.value = \"\";\n        this.nodes = [text];\n        this.offsets = [dir > 0 ? 0 : text instanceof TextLeaf ? text.text.length : text.children.length];\n    }\n    next(skip = 0) {\n        for (;;) {\n            let last = this.nodes.length - 1;\n            if (last < 0) {\n                this.done = true;\n                this.value = \"\";\n                this.lineBreak = false;\n                return this;\n            }\n            let top = this.nodes[last], offset = this.offsets[last];\n            let size = top instanceof TextLeaf ? top.text.length : top.children.length;\n            if (offset == (this.dir > 0 ? size : 0)) {\n                this.nodes.pop();\n                this.offsets.pop();\n            }\n            else if (!this.lineBreak && offset != (this.dir > 0 ? 0 : size)) {\n                // Internal offset with lineBreak == false means we have to\n                // count the line break at this position\n                this.lineBreak = true;\n                if (skip == 0) {\n                    this.value = \"\\n\";\n                    return this;\n                }\n                skip--;\n            }\n            else if (top instanceof TextLeaf) {\n                // Move to the next string\n                let next = top.text[offset - (this.dir < 0 ? 1 : 0)];\n                this.offsets[last] = (offset += this.dir);\n                this.lineBreak = false;\n                if (next.length > Math.max(0, skip)) {\n                    this.value = skip == 0 ? next : this.dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);\n                    return this;\n                }\n                skip -= next.length;\n            }\n            else {\n                let next = top.children[this.dir > 0 ? offset : offset - 1];\n                this.offsets[last] = offset + this.dir;\n                this.lineBreak = false;\n                if (skip > next.length) {\n                    skip -= next.length;\n                }\n                else {\n                    this.nodes.push(next);\n                    this.offsets.push(this.dir > 0 ? 0 : next instanceof TextLeaf ? next.text.length : next.children.length);\n                }\n            }\n        }\n    }\n}\nclass PartialTextCursor {\n    constructor(text, start, end) {\n        this.value = \"\";\n        this.cursor = new RawTextCursor(text, start > end ? -1 : 1);\n        if (start > end) {\n            this.skip = text.length - start;\n            this.limit = start - end;\n        }\n        else {\n            this.skip = start;\n            this.limit = end - start;\n        }\n    }\n    next(skip = 0) {\n        if (this.limit <= 0) {\n            this.limit = -1;\n        }\n        else {\n            let { value, lineBreak, done } = this.cursor.next(this.skip + skip);\n            this.skip = 0;\n            this.value = value;\n            let len = lineBreak ? 1 : value.length;\n            if (len > this.limit)\n                this.value = this.cursor.dir > 0 ? value.slice(0, this.limit) : value.slice(len - this.limit);\n            if (done || this.value.length == 0)\n                this.limit = -1;\n            else\n                this.limit -= this.value.length;\n        }\n        return this;\n    }\n    get lineBreak() { return this.cursor.lineBreak; }\n    get done() { return this.limit < 0; }\n}\n/// This type describes a line in the document. It is created\n/// on-demand when lines are [queried](#text.Text.lineAt).\nclass Line {\n    /// @internal\n    constructor(\n    /// The position of the start of the line.\n    from, \n    /// The position at the end of the line (_before_ the line break,\n    /// or at the end of document for the last line).\n    to, \n    /// This line's line number (1-based).\n    number, \n    /// The line's content.\n    text) {\n        this.from = from;\n        this.to = to;\n        this.number = number;\n        this.text = text;\n    }\n    /// The length of the line (not including any line break after it).\n    get length() { return this.to - this.from; }\n}\n\nexports.Line = Line;\nexports.Text = Text;\nexports.codePointAt = codePointAt;\nexports.codePointSize = codePointSize;\nexports.countColumn = countColumn;\nexports.findClusterBreak = findClusterBreak;\nexports.findColumn = findColumn;\nexports.fromCodePoint = fromCodePoint;\n\n};"],
"names":["shadow$provide","global","require","module","exports","isRegionalIndicator","code","findClusterBreak","str","pos","forward","nextClusterBreak","prevClusterBreak","length","ch","prev","codePointAt","codePointSize","next","i","extend","countBefore","found","code0","charCodeAt","code1","textLength","text","line","appendText","target","from","to","first","end","slice","push","Object","defineProperty","value","map","s","parseInt","Text","constructor","lineAt","RangeError","lineInner","n","lines","replace","parts","decompose","TextNode","append","other","eq","a","RawTextCursor","b","lineBreak","done","iter","dir","iterRange","PartialTextCursor","toString","sliceString","toJSON","flatten","of","TextLeaf","split","empty","Symbol","prototype","iterator","isLine","offset","string","Line","open","Math","min","max","pop","joined","mid","newLen","lineSep","result","part","len","children","child","endLine","childOpen","updated","totalLines","copy","reduce","l","add","last","maxChunk","node","minChunk","currentLines","flush","chunked","currentChunk","currentLen","concat","chunk","flat","nodes","offsets","skip","top","size","start","cursor","limit","number","countColumn","tabSize","findColumn","col","leftOver","fromCodePoint","String","fromCharCode"]
}
