{
"version":3,
"file":"module$node_modules$color_convert$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,uCAAf,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQpGC,QAASA,QAAO,CAACC,EAAD,CAAK,CACpB,IAAIC,UAAYA,QAAS,CAACC,IAAD,CAAO,CAC/B,GAAaC,IAAAA,EAAb,GAAID,IAAJ,EAAmC,IAAnC,GAA0BA,IAA1B,CACC,MAAOA,KAGe,EAAvB,CAAIE,SAAJ,CAAcC,MAAd,GACCH,IADD,CACQI,KAAA,CAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,SAA3B,CADR,CAIA,OAAOJ,GAAA,CAAGE,IAAH,CATwB,CAa5B,aAAJ,EAAoBF,GAApB,GACCC,SADD,CACWS,UADX,CACwBV,EADxB,CAC2BU,UAD3B,CAIA,OAAOT,UAlBa,CAqBrBU,QAASA,YAAW,CAACX,EAAD,CAAK,CACxB,IAAIC,UAAYA,QAAS,CAACC,IAAD,CAAO,CAC/B,GAAaC,IAAAA,EAAb,GAAID,IAAJ,EAAmC,IAAnC,GAA0BA,IAA1B,CACC,MAAOA,KAGe,EAAvB,CAAIE,SAAJ,CAAcC,MAAd,GACCH,IADD,CACQI,KAAA,CAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,SAA3B,CADR,CAIA;IAAIQ,OAASZ,EAAA,CAAGE,IAAH,CAKb,IAAsB,QAAtB,GAAI,MAAOU,OAAX,CACC,IAD+B,IACtBC,IAAMD,MAANC,CAAaR,MADS,CACDS,EAAI,CAAlC,CAAqCA,CAArC,CAAyCD,GAAzC,CAA8CC,CAAA,EAA9C,CACCF,MAAA,CAAOE,CAAP,CAAA,CAAYC,IAAA,CAAKC,KAAL,CAAWJ,MAAA,CAAOE,CAAP,CAAX,CAId,OAAOF,OApBwB,CAwB5B,aAAJ,EAAoBZ,GAApB,GACCC,SADD,CACWS,UADX,CACwBV,EADxB,CAC2BU,UAD3B,CAIA,OAAOT,UA7BiB,CA5BzB,IAAIgB,YAAcrB,OAAA,CAAQ,+CAAR,CAAlB,CACIsB,MAAQtB,OAAA,CAAQ,yCAAR,CADZ,CAGIuB,QAAU,EAEDC,OAAAC,CAAOC,IAAPD,CAAYJ,WAAZI,CAuDb,CAAOE,OAAP,CAAe,QAAS,CAACC,SAAD,CAAY,CACnCL,OAAA,CAAQK,SAAR,CAAA,CAAqB,EAErBJ,OAAA,CAAOK,cAAP,CAAsBN,OAAA,CAAQK,SAAR,CAAtB,CAA0C,UAA1C,CAAsD,CAACE,MAAOT,WAAA,CAAYO,SAAZ,CAAPE,CAA8BC,QAA/B,CAAtD,CACAP;MAAA,CAAOK,cAAP,CAAsBN,OAAA,CAAQK,SAAR,CAAtB,CAA0C,QAA1C,CAAoD,CAACE,MAAOT,WAAA,CAAYO,SAAZ,CAAPE,CAA8BE,MAA/B,CAApD,CAEA,KAAIC,OAASX,KAAA,CAAMM,SAAN,CACKJ,OAAAU,CAAOR,IAAPQ,CAAYD,MAAZC,CAElB,CAAYP,OAAZ,CAAoB,QAAS,CAACQ,OAAD,CAAU,CACtC,IAAI/B,GAAK6B,MAAA,CAAOE,OAAP,CAETZ,QAAA,CAAQK,SAAR,CAAA,CAAmBO,OAAnB,CAAA,CAA8BpB,WAAA,CAAYX,EAAZ,CAC9BmB,QAAA,CAAQK,SAAR,CAAA,CAAmBO,OAAnB,CAAA,CAA4BC,GAA5B,CAAkCjC,OAAA,CAAQC,EAAR,CAJI,CAAvC,CATmC,CAApC,CAiBAH,OAAA,CAAOC,OAAP,CAAiBqB,OA9EmF;",
"sources":["node_modules/color-convert/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$color_convert$index\"] = function(global,require,module,exports) {\nvar conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n\n};"],
"names":["shadow$provide","global","require","module","exports","wrapRaw","fn","wrappedFn","args","undefined","arguments","length","Array","prototype","slice","call","conversion","wrapRounded","result","len","i","Math","round","conversions","route","convert","Object","models","keys","forEach","fromModel","defineProperty","value","channels","labels","routes","routeModels","toModel","raw"]
}
